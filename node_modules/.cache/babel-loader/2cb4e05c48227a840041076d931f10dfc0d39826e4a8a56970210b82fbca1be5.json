{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImpl } from './SparseSegmentReduction_impl';\nexport function sparseSegmentMean(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var data = inputs.data,\n    indices = inputs.indices,\n    segmentIds = inputs.segmentIds;\n  if (data.shape.length < 1) {\n    throw new Error(\"Data should be at least 1 dimensional but received scalar\");\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(\"Indices should be a vector but received shape\\n          \".concat(indices.shape));\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(\"Segment ids should be a vector but received shape\\n          \".concat(segmentIds.shape));\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(\"segmentIds and indices should have same size.\");\n  }\n  var $data = backend.data.get(data.dataId).values;\n  var $indices = backend.data.get(indices.dataId).values;\n  var $segmentIds = backend.data.get(segmentIds.dataId).values;\n  var _sparseSegmentReducti = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds, true),\n    _sparseSegmentReducti2 = _slicedToArray(_sparseSegmentReducti, 2),\n    outputData = _sparseSegmentReducti2[0],\n    outputDataShape = _sparseSegmentReducti2[1];\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport var sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,iBAAiB,QAAwD,uBAAuB;AAItH,SAAQC,0BAA0B,QAAO,+BAA+B;AAExE,OAAM,SAAUC,iBAAiB,CAC7BC,IAAgE;EAElE,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,IAAI,GAAyBF,MAAM,CAAnCE,IAAI;IAAEC,OAAO,GAAgBH,MAAM,CAA7BG,OAAO;IAAEC,UAAU,GAAIJ,MAAM,CAApBI,UAAU;EAChC,IAAIF,IAAI,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,6DACiD;;EAElE,IAAIJ,OAAO,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,oEACPJ,OAAO,CAACE,KAAK,EAAG;;EAE1B,IAAID,UAAU,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAIC,KAAK,wEACPH,UAAU,CAACC,KAAK,EAAG;;EAE7B,IAAIF,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC,KAAKD,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAC5C,MAAM,IAAIE,KAAK,iDAAiD;;EAGlE,IAAMC,KAAK,GAAGP,OAAO,CAACC,IAAI,CAACO,GAAG,CAACP,IAAI,CAACQ,MAAM,CAAC,CAACC,MAAoB;EAChE,IAAMC,QAAQ,GAAGX,OAAO,CAACC,IAAI,CAACO,GAAG,CAACN,OAAO,CAACO,MAAM,CAAC,CAACC,MAAoB;EACtE,IAAME,WAAW,GAAGZ,OAAO,CAACC,IAAI,CAACO,GAAG,CAACL,UAAU,CAACM,MAAM,CAAC,CAACC,MAAoB;EAE5E,4BAAsCd,0BAA0B,CAC5DW,KAAK,EAAEN,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACY,KAAK,EAAEF,QAAQ,EAAEC,WAAW,EAAE,IAAI,CAAC;IAAA;IADxDE,UAAU;IAAEC,eAAe;EAElC,OAAOf,OAAO,CAACgB,cAAc,CAACD,eAAe,EAAEd,IAAI,CAACY,KAAK,EAAEC,UAAU,CAAC;AACxE;AAEA,OAAO,IAAMG,uBAAuB,GAAiB;EACnDC,UAAU,EAAEvB,iBAAiB;EAC7BwB,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEvB;CACb","names":["SparseSegmentMean","sparseSegmentReductionImpl","sparseSegmentMean","args","inputs","backend","data","indices","segmentIds","shape","length","Error","$data","get","dataId","values","$indices","$segmentIds","dtype","outputData","outputDataShape","makeTensorInfo","sparseSegmentMeanConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\SparseSegmentMean.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}