{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Conv2DDerFilterProgram = /*#__PURE__*/_createClass(function Conv2DDerFilterProgram(convInfo) {\n  _classCallCheck(this, Conv2DDerFilterProgram);\n  this.variableNames = ['x', 'dy'];\n  this.outputShape = convInfo.filterShape;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \".concat(convInfo.batchSize, \"; b++) {\\n          for (int yR = 0; yR < \").concat(convInfo.outHeight, \"; yR++) {\\n            int xR = wR + yR * \").concat(strideHeight, \" - \").concat(padTop, \";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \").concat(convInfo.outWidth, \"; yC++) {\\n              int xC = wC + yC * \").concat(strideWidth, \" - \").concat(padLeft, \";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n                continue;\\n              }\\n\\n              if (\").concat(isChannelsLast, \") {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});\nexport var Conv2DDerInputProgram = /*#__PURE__*/_createClass(function Conv2DDerInputProgram(convInfo) {\n  _classCallCheck(this, Conv2DDerInputProgram);\n  this.variableNames = ['dy', 'W'];\n  this.outputShape = convInfo.inShape;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  var padTop = filterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n  var rowDim = isChannelsLast ? 1 : 2;\n  var colDim = isChannelsLast ? 2 : 3;\n  var channelDim = isChannelsLast ? 3 : 1;\n  this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[\").concat(channelDim, \"];\\n\\n        ivec2 dyCorner = ivec2(coords[\").concat(rowDim, \"], coords[\").concat(colDim, \"]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \").concat(filterHeight, \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \").concat(filterWidth, \" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \").concat(convInfo.outChannels, \"; d2++) {\\n\\n              if (\").concat(isChannelsLast, \") {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});\nexport var Conv3DDerFilterProgram = /*#__PURE__*/_createClass(function Conv3DDerFilterProgram(convInfo) {\n  _classCallCheck(this, Conv3DDerFilterProgram);\n  this.variableNames = ['x', 'dy'];\n  this.outputShape = convInfo.filterShape;\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var padFront = convInfo.padInfo.front;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  this.userCode = \"\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \".concat(convInfo.batchSize, \"; b++) {\\n          for (int yF = 0; yF < \").concat(convInfo.outDepth, \"; yF++) {\\n            int xF = wF + yF * \").concat(strideDepth, \" - \").concat(padFront, \";\\n\\n            if (xF < 0 || xF >= \").concat(convInfo.inDepth, \") {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < \").concat(convInfo.outHeight, \"; yR++) {\\n              int xR = wR + yR * \").concat(strideHeight, \" - \").concat(padTop, \";\\n\\n              if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < \").concat(convInfo.outWidth, \"; yC++) {\\n                int xC = wC + yC * \").concat(strideWidth, \" - \").concat(padLeft, \";\\n\\n                if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});\nexport var Conv3DDerInputProgram = /*#__PURE__*/_createClass(function Conv3DDerInputProgram(convInfo) {\n  _classCallCheck(this, Conv3DDerInputProgram);\n  this.variableNames = ['dy', 'W'];\n  this.outputShape = convInfo.inShape;\n  var filterDepth = convInfo.filterDepth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var padFront = filterDepth - 1 - convInfo.padInfo.front;\n  var padTop = filterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n  this.userCode = \"\\n      const ivec3 pads = ivec3(\".concat(padFront, \", \").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \").concat(filterDepth, \"; wF++) {\\n          float dyF = float(dyFCorner + wF) / \").concat(strideDepth, \".0;\\n\\n          if (dyF < 0.0 || dyF >= \").concat(convInfo.outDepth, \".0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = \").concat(filterDepth, \" - 1 - wF;\\n\\n          for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = \").concat(filterHeight, \" - 1 - wR;\\n\\n            for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = \").concat(filterWidth, \" - 1 - wC;\\n\\n              for (int d2 = 0; d2 < \").concat(convInfo.outChannels, \"; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});","map":{"version":3,"mappings":"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","names":["Conv2DDerFilterProgram","convInfo","outputShape","filterShape","strideHeight","strideWidth","padTop","padInfo","top","padLeft","left","isChannelsLast","dataFormat","userCode","batchSize","outHeight","inHeight","outWidth","inWidth","Conv2DDerInputProgram","inShape","filterHeight","filterWidth","rowDim","colDim","channelDim","outChannels","Conv3DDerFilterProgram","strideDepth","padFront","front","outDepth","inDepth","Conv3DDerInputProgram","filterDepth"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\conv_backprop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}