{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport var executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(node, tensorMap, context, resourceManager) {\n    var existingTableHandle, keyDType, valueDType, hashTable, handle, keys, values, _hashTable, _handle, _keys, defaultValue, _hashTable2, _handle2, _hashTable3;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = node.op;\n          _context.next = _context.t0 === 'HashTable' ? 3 : _context.t0 === 'HashTableV2' ? 3 : _context.t0 === 'InitializeTable' ? 13 : _context.t0 === 'InitializeTableV2' ? 13 : _context.t0 === 'LookupTableImport' ? 13 : _context.t0 === 'LookupTableImportV2' ? 13 : _context.t0 === 'LookupTableFind' ? 21 : _context.t0 === 'LookupTableFindV2' ? 21 : _context.t0 === 'LookupTableSize' ? 29 : _context.t0 === 'LookupTableSizeV2' ? 29 : 32;\n          break;\n        case 3:\n          existingTableHandle = resourceManager.getHashTableHandleByName(node.name); // Table is shared with initializer.\n          if (!(existingTableHandle != null)) {\n            _context.next = 8;\n            break;\n          }\n          return _context.abrupt(\"return\", [existingTableHandle]);\n        case 8:\n          keyDType = getParamValue('keyDType', node, tensorMap, context);\n          valueDType = getParamValue('valueDType', node, tensorMap, context);\n          hashTable = new HashTable(keyDType, valueDType);\n          resourceManager.addHashTable(node.name, hashTable);\n          return _context.abrupt(\"return\", [hashTable.handle]);\n        case 13:\n          handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          keys = getParamValue('keys', node, tensorMap, context);\n          values = getParamValue('values', node, tensorMap, context);\n          _hashTable = resourceManager.getHashTableById(handle.id);\n          _context.next = 19;\n          return _hashTable.import(keys, values);\n        case 19:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", [_context.t1]);\n        case 21:\n          _handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          _keys = getParamValue('keys', node, tensorMap, context);\n          defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n          _hashTable2 = resourceManager.getHashTableById(_handle.id);\n          _context.next = 27;\n          return _hashTable2.find(_keys, defaultValue);\n        case 27:\n          _context.t2 = _context.sent;\n          return _context.abrupt(\"return\", [_context.t2]);\n        case 29:\n          _handle2 = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          _hashTable3 = resourceManager.getHashTableById(_handle2.id);\n          return _context.abrupt(\"return\", [_hashTable3.tensorSize()]);\n        case 32:\n          throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n        case 33:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function executeOp(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var CATEGORY = 'hash_table';","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAqBA,SAAQA,SAAS,QAAO,2BAA2B;AAInD,SAAQC,aAAa,QAAO,SAAS;AAErC,OAAO,IAAMC,SAAS;EAAA,sEAA4B,iBAC9CC,IAAU,EAAEC,SAA0B,EAAEC,OAAyB,EACjEC,eAAgC;IAAA;IAAA;MAAA;QAAA;UAAA,cAC1BH,IAAI,CAACI,EAAE;UAAA,gCACR,WAAW,uBACX,aAAa,uBAiBb,iBAAiB,wBACjB,mBAAmB,wBACnB,mBAAmB,wBACnB,qBAAqB,wBAYrB,iBAAiB,wBACjB,mBAAmB,wBAWnB,iBAAiB,wBACjB,mBAAmB;UAAA;QAAA;UA5ChBC,mBAAmB,GACrBF,eAAe,CAACG,wBAAwB,CAACN,IAAI,CAACO,IAAI,CAAC,EACvD;UAAA,MACIF,mBAAmB,IAAI,IAAI;YAAA;YAAA;UAAA;UAAA,iCACtB,CAACA,mBAAmB,CAAC;QAAA;UAEtBG,QAAQ,GACVV,aAAa,CAAC,UAAU,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa;UAC7DO,UAAU,GACZX,aAAa,CAAC,YAAY,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa;UAE/DQ,SAAS,GAAG,IAAIb,SAAS,CAACW,QAAQ,EAAEC,UAAU,CAAC;UACrDN,eAAe,CAACQ,YAAY,CAACX,IAAI,CAACO,IAAI,EAAEG,SAAS,CAAC;UAAC,iCAC5C,CAACA,SAAS,CAACE,MAAM,CAAC;QAAA;UAOrBA,MAAM,GAAGd,aAAa,CACT,aAAa,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,EACvCC,eAAe,CAAW;UACvCU,IAAI,GAAGf,aAAa,CAAC,MAAM,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;UAChEY,MAAM,GACRhB,aAAa,CAAC,QAAQ,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;UAEzDQ,UAAS,GAAGP,eAAe,CAACY,gBAAgB,CAACH,MAAM,CAACI,EAAE,CAAC;UAAA;UAAA,OAE/CN,UAAS,CAACO,MAAM,CAACJ,IAAI,EAAEC,MAAM,CAAC;QAAA;UAAA;UAAA;QAAA;UAItCF,OAAM,GAAGd,aAAa,CACT,aAAa,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,EACvCC,eAAe,CAAW;UACvCU,KAAI,GAAGf,aAAa,CAAC,MAAM,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;UAChEgB,YAAY,GACdpB,aAAa,CAAC,cAAc,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;UAE/DQ,WAAS,GAAGP,eAAe,CAACY,gBAAgB,CAACH,OAAM,CAACI,EAAE,CAAC;UAAA;UAAA,OAC/CN,WAAS,CAACS,IAAI,CAACN,KAAI,EAAEK,YAAY,CAAC;QAAA;UAAA;UAAA;QAAA;UAI1CN,QAAM,GAAGd,aAAa,CACT,aAAa,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,EACvCC,eAAe,CAAW;UAEvCO,WAAS,GAAGP,eAAe,CAACY,gBAAgB,CAACH,QAAM,CAACI,EAAE,CAAC;UAAA,iCACtD,CAACN,WAAS,CAACU,UAAU,EAAE,CAAC;QAAA;UAAA,MAGzBC,SAAS,qBAAcrB,IAAI,CAACI,EAAE,yBAAsB;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAE/D;EAAA,gBA7DYL,SAAS;IAAA;EAAA;AAAA,GA6DrB;AAED,OAAO,IAAMuB,QAAQ,GAAG,YAAY","names":["HashTable","getParamValue","executeOp","node","tensorMap","context","resourceManager","op","existingTableHandle","getHashTableHandleByName","name","keyDType","valueDType","hashTable","addHashTable","handle","keys","values","getHashTableById","id","import","defaultValue","find","tensorSize","TypeError","CATEGORY"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\hash_table_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const existingTableHandle =\n          resourceManager.getHashTableHandleByName(node.name);\n      // Table is shared with initializer.\n      if (existingTableHandle != null) {\n        return [existingTableHandle];\n      } else {\n        const keyDType =\n            getParamValue('keyDType', node, tensorMap, context) as DataType;\n        const valueDType =\n            getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n        const hashTable = new HashTable(keyDType, valueDType);\n        resourceManager.addHashTable(node.name, hashTable);\n        return [hashTable.handle];\n      }\n    }\n    case 'InitializeTable':\n    case 'InitializeTableV2':\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}