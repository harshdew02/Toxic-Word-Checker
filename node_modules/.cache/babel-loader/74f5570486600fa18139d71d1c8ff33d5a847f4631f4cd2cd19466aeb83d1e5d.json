{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeNearestNeighborGrad(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var images = inputs.images,\n    dy = inputs.dy;\n  var alignCorners = attrs.alignCorners;\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n  var imagesStrides = util.computeStrides(images.shape);\n  var dyStrides = util.computeStrides(dy.shape);\n  var _images$shape = _slicedToArray(images.shape, 4),\n    batch = _images$shape[0],\n    xHeight = _images$shape[1],\n    xWidth = _images$shape[2],\n    depth = _images$shape[3];\n  var _dy$shape = _slicedToArray(dy.shape, 3),\n    yHeight = _dy$shape[1],\n    yWidth = _dy$shape[2];\n  var output = new Float32Array(batch * xHeight * xWidth * depth);\n  var dyValues = backend.data.get(dy.dataId).values;\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n  var effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n  var effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n  var heightScale = effectiveXSize[0] / effectiveYSize[0];\n  var widthScale = effectiveXSize[1] / effectiveYSize[1];\n  var invHeightScale = 1 / heightScale;\n  var invWidthScale = 1 / widthScale;\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  var winHeight = Math.ceil(invHeightScale) * 2 + 2;\n  var winWidth = Math.ceil(invWidthScale) * 2 + 2;\n  // Loop over the output space.\n  for (var b = 0; b < batch; b++) {\n    var batchOffset = b * imagesStrides[0];\n    for (var r = 0; r < xHeight; r++) {\n      var rowOffset = batchOffset + r * imagesStrides[1];\n      // Compute bounds for where in dy we will look\n      var startRLerp = Math.floor(r * invHeightScale);\n      var startDyR = Math.floor(startRLerp - winHeight / 2);\n      for (var c = 0; c < xWidth; c++) {\n        var colOffset = rowOffset + c * imagesStrides[2];\n        // Compute bounds for where in dy we will look\n        var startCLerp = Math.floor(c * invWidthScale);\n        var startDyC = Math.floor(startCLerp - winWidth / 2);\n        for (var d = 0; d < depth; d++) {\n          var accum = 0;\n          // loop over dy\n          for (var dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            var dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n            var dyROffset = batchOffset + dyR * dyStrides[1];\n            var sourceFracRow = dyR * heightScale;\n            var sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (var dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              var dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n              var dyCOffset = dyROffset + dyC * dyStrides[2];\n              var sourceFracCol = dyC * widthScale;\n              var sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) : Math.floor(sourceFracCol));\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\nexport var resizeNearestNeighborGradConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad\n};","map":{"version":3,"mappings":"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","names":["ResizeNearestNeighborGrad","util","assertNotComplex","resizeNearestNeighborGrad","args","inputs","backend","attrs","images","dy","alignCorners","imagesStrides","computeStrides","shape","dyStrides","batch","xHeight","xWidth","depth","yHeight","yWidth","output","Float32Array","dyValues","data","get","dataId","values","effectiveXSize","effectiveYSize","heightScale","widthScale","invHeightScale","invWidthScale","winHeight","Math","ceil","winWidth","b","batchOffset","r","rowOffset","startRLerp","floor","startDyR","c","colOffset","startCLerp","startDyC","d","accum","dyRIndex","dyR","dyROffset","sourceFracRow","sourceNearestRow","min","round","dyCIndex","dyC","dyCOffset","sourceFracCol","sourceNearestCol","makeTensorInfo","dtype","resizeNearestNeighborGradConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\ResizeNearestNeighborGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}