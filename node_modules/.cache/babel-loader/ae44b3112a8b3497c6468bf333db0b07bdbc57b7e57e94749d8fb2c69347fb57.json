{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nvar ARROW = '->';\nvar ARROW_REGEX = /->/g;\nvar COMMA = ',';\nvar ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n  var numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(\"Equation must contain exactly one arrow (\\\"\".concat(ARROW, \"\\\").\"));\n  }\n  var _equation$split = equation.split(ARROW),\n    _equation$split2 = _slicedToArray(_equation$split, 2),\n    inputString = _equation$split2[0],\n    outputString = _equation$split2[1];\n  assert(inputString.indexOf(ELLIPSIS) === -1, function () {\n    return \"The ellipsis notation (\\\"\".concat(ELLIPSIS, \"\\\") is not supported yet.\");\n  });\n  var inputTerms = inputString.split(COMMA);\n  var numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\"Expected \".concat(numInputs, \" input tensors, received \").concat(numTensors));\n  }\n  if (numInputs > 2) {\n    throw new Error('Support for more than 2 input tensors is not implemented yet.');\n  }\n  var allDims = [];\n  var _loop = function _loop() {\n    var dimName = outputString[i];\n    if (!inputTerms.some(function (inputTerm) {\n      return inputTerm.indexOf(dimName) !== -1;\n    })) {\n      throw new Error(\"Output subscripts contain the label \".concat(dimName, \" \") + \"not present in the input subscripts.\");\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  };\n  for (var i = 0; i < outputString.length; ++i) {\n    _loop();\n  }\n  for (var _i = 0; _i < inputString.length; ++_i) {\n    var dimName = inputString[_i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n  var idDims = new Array(inputTerms.length);\n  for (var _i2 = 0; _i2 < numInputs; ++_i2) {\n    if (new Set(inputTerms[_i2].split('')).size !== inputTerms[_i2].length) {\n      throw new Error(\"Found duplicate axes in input component \".concat(inputTerms[_i2], \". \") + \"Support for duplicate axes in input is not implemented yet.\");\n    }\n    idDims[_i2] = [];\n    for (var j = 0; j < inputTerms[_i2].length; ++j) {\n      idDims[_i2].push(allDims.indexOf(inputTerms[_i2][j]));\n    }\n  }\n  var numDims = allDims.length; // Number of unique dimensions.\n  var numOutDims = outputString.length; // Number of output dimensions.\n  var summedDims = []; // Dimensions being summed over.\n  for (var _i3 = numOutDims; _i3 < numDims; ++_i3) {\n    summedDims.push(_i3);\n  }\n  return {\n    allDims: allDims,\n    summedDims: summedDims,\n    idDims: idDims\n  };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims, idDims) {\n  var permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n  for (var i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  var expandDims = [];\n  for (var _i4 = 0; _i4 < nDims; ++_i4) {\n    if (permutationIndices[_i4] === -1) {\n      expandDims.push(_i4);\n    }\n  }\n  permutationIndices = permutationIndices.filter(function (d) {\n    return d !== -1;\n  });\n  return {\n    permutationIndices: permutationIndices,\n    expandDims: expandDims\n  };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n  var dimSizes = new Array(nDims);\n  var _loop2 = function _loop2(i) {\n    var shape = tensors[i].shape;\n    var _loop3 = function _loop3(j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], function () {\n          return \"Expected dimension \".concat(dimSizes[idDims[i][j]], \" at axis \").concat(j, \" \") + \"of input shaped \".concat(JSON.stringify(shape), \", \") + \"but got dimension \".concat(shape[j]);\n        });\n      }\n    };\n    for (var j = 0; j < idDims[i].length; ++j) {\n      _loop3(j);\n    }\n  };\n  for (var i = 0; i < tensors.length; ++i) {\n    _loop2(i);\n  }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims, idDims) {\n  var path = summedDims;\n  var steps = [];\n  var nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (var i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  var computedTermIndices = [];\n  for (var _i5 = 0; _i5 < path.length; ++_i5) {\n    var summedDim = path[_i5];\n    var termIndices = findTermsWithDim(idDims, summedDim);\n    var _iterator = _createForOfIteratorHelper(termIndices),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var termIndex = _step.value;\n        if (computedTermIndices.indexOf(termIndex) === -1) {\n          steps[_i5].push(termIndex);\n          computedTermIndices.push(termIndex);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return {\n    path: path,\n    steps: steps\n  };\n}\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm) {\n  return perm.every(function (dim, index) {\n    return dim === index;\n  });\n}\nfunction findTermsWithDim(idDims, dim) {\n  var termIndices = [];\n  for (var i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}","map":{"version":3,"mappings":"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","names":["assert","ARROW","ARROW_REGEX","COMMA","ELLIPSIS","decodeEinsumEquation","equation","numTensors","replace","numArrows","length","Error","split","inputString","outputString","indexOf","inputTerms","numInputs","allDims","dimName","i","some","inputTerm","push","idDims","Array","Set","size","j","numDims","numOutDims","summedDims","getEinsumPermutation","nDims","permutationIndices","fill","expandDims","filter","d","checkEinsumDimSizes","tensors","dimSizes","shape","undefined","JSON","stringify","getEinsumComputePath","path","steps","nSteps","computedTermIndices","summedDim","termIndices","findTermsWithDim","termIndex","isIdentityPermutation","perm","every","dim","index"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\backends\\einsum_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Utility functions for computing einsum (tensor contraction and summation\n * based on Einstein summation.)\n */\n\nimport {Tensor} from '../tensor';\nimport {assert} from '../util_base';\n\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation: string, numTensors: number): {\n  allDims: string[],\n  summedDims: number[],\n  idDims: number[][],\n} {\n  equation = equation.replace(/\\s/g, '');  // Remove witespace in equation.\n  const numArrows =\n      (equation.length - equation.replace(ARROW_REGEX, '').length) /\n      ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(\n      inputString.indexOf(ELLIPSIS) === -1,\n      () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\n        `Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\n        'Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims: string[] = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\n          `Output subscripts contain the label ${dimName} ` +\n          `not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims: number[][] = new Array<number[]>(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\n          `Found duplicate axes in input component ${inputTerms[i]}. ` +\n          `Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length;          // Number of unique dimensions.\n  const numOutDims = outputString.length;  // Number of output dimensions.\n  const summedDims: number[] = [];         // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {allDims, summedDims, idDims};\n}\n\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims: number, idDims: number[]):\n    {permutationIndices: number[], expandDims: number[]} {\n  let permutationIndices: number[] = new Array<number>(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims: number[] = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {permutationIndices, expandDims};\n}\n\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(\n    nDims: number, idDims: number[][], tensors: Tensor[]) {\n  const dimSizes: number[] = new Array<number>(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape: number[] = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(\n            dimSizes[idDims[i][j]] === shape[j],\n            () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                `of input shaped ${JSON.stringify(shape)}, ` +\n                `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims: number[], idDims: number[][]):\n    {path: number[], steps: number[][]} {\n  const path: number[] = summedDims;\n  const steps: number[][] = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices: number[] = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {path, steps};\n}\n\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm: number[]): boolean {\n  return perm.every((dim: number, index: number) => dim === index);\n}\n\nfunction findTermsWithDim(idDims: number[][], dim: number): number[] {\n  const termIndices: number[] = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}