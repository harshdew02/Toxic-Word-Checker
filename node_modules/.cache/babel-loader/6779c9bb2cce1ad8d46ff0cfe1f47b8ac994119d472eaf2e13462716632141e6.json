{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"E:\\\\react-detect-toxicity-in-a-chat-app-youtube-2\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport \"./styles.css\";\nimport { useEffect, useState, useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { load } from '@tensorflow-models/toxicity';\n\n// Set an id counter, so that we can automatically identify each message with a unique number:\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar id = 3;\n// Initialize our messages list with some sample messages:\nvar initialMessages = [{\n  id: 1,\n  msg: \"Hello!\"\n}, {\n  id: 2,\n  msg: \"What's up?\"\n}, {\n  id: 3,\n  msg: \"Hello!\"\n}];\nexport default function App() {\n  _s();\n  var _this = this;\n  var _useState = useState(initialMessages),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1]; // The list of messages\n  var _useState3 = useState({\n      isToxic: false,\n      labels: []\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    toxicity = _useState4[0],\n    setToxicity = _useState4[1]; // The state of toxicity for the message we just typed \n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isClassifying = _useState6[0],\n    setIsClassifying = _useState6[1]; // A simple state variable to reflect the classifying process status\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    hasLoaded = _useState8[0],\n    setHasLoaded = _useState8[1]; // Has the Toxicity model been loaded?\n  var hasMessages = messages.length > 0; // Should we render the ul that will hold the messages if no messages are available?\n  var model = useRef(null); // Retain a value throughout the Component's render cycles WITHOUT triggering a render, as opposed to a useState variable\n\n  // Handle form submission: check the toxicity of the message and update accordingly:\n  var sendMessage = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var form, msg, predictions, isToxic, labels;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // console.log(\"sendMessage()\");\n            event.preventDefault(); // Prevent default HTML form behaviour that will trigger an HTTP request and a page reload\n            form = event.target;\n            msg = form.message.value; // Run the classifier on every message\n            setIsClassifying(true);\n            _context.next = 6;\n            return model.current.classify([msg]);\n          case 6:\n            predictions = _context.sent;\n            setIsClassifying(false);\n\n            // Is the message toxic?\n            isToxic = predictions[6].results[0].match;\n            if (isToxic) {\n              labels = []; // Loop through the toxicity labels and create a list of them along with the corresponding percentagess (level of confidence):\n              predictions.forEach(function (p) {\n                if (p.results[0].match) {\n                  labels.push({\n                    label: p.label,\n                    prob: Math.round(p.results[0].probabilities[1] * 100) + \"%\"\n                  });\n                }\n              });\n              // console.log(labels);\n              setToxicity({\n                isToxic: true,\n                labels: labels\n              });\n            } else {\n              setMessages([].concat(_toConsumableArray(messages), [{\n                id: ++id,\n                msg: msg\n              }]));\n              setToxicity({\n                isToxic: false,\n                labels: []\n              });\n              form.reset();\n            }\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function sendMessage(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  // Load the model just one, when the component mounts (hence the empty dependency array [])\n  useEffect(function () {\n    function loadModel() {\n      return _loadModel.apply(this, arguments);\n    }\n    function _loadModel() {\n      _loadModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var threshold;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              threshold = 0.9; // Set a state that indicates the model is being loaded...\n              _context2.next = 3;\n              return load(threshold);\n            case 3:\n              model.current = _context2.sent;\n              setHasLoaded(true);\n              // Set the state to false to let the user know that they can check the text\n              console.log(\"Model loaded\");\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return _loadModel.apply(this, arguments);\n    }\n    loadModel();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TensorFlow.JS + Toxicity Classifier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), hasMessages && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(function (message) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: message.msg\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 20\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), hasLoaded && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"message\",\n        placeholder: \"Enter message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: isClassifying ? \" ️‍️‍🕵 \" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: toxicity.isToxic && \" 🤐\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), toxicity.labels.map(function (l) {\n        return \" \".concat(l.label, \" \").concat(l.prob);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"Q6owLLJjPbB+GQpglRS1W7DGjtc=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","useRef","tf","load","id","initialMessages","msg","App","messages","setMessages","isToxic","labels","toxicity","setToxicity","isClassifying","setIsClassifying","hasLoaded","setHasLoaded","hasMessages","length","model","sendMessage","event","preventDefault","form","target","message","value","current","classify","predictions","results","match","forEach","p","push","label","prob","Math","round","probabilities","reset","loadModel","threshold","console","log","map","l"],"sources":["E:/react-detect-toxicity-in-a-chat-app-youtube-2/src/App.jsx"],"sourcesContent":["import \"./styles.css\";\nimport { useEffect, useState, useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { load } from '@tensorflow-models/toxicity';\n\n// Set an id counter, so that we can automatically identify each message with a unique number:\nlet id = 3;\n// Initialize our messages list with some sample messages:\nconst initialMessages = [\n  { id: 1, msg: \"Hello!\" },\n  { id: 2, msg: \"What's up?\"},\n  { id: 3, msg: \"Hello!\"}\n]\n\nexport default function App() {\n  const [ messages, setMessages ] = useState(initialMessages); // The list of messages\n  const [ toxicity, setToxicity ] = useState({ isToxic: false, labels: [] }); // The state of toxicity for the message we just typed \n  const [ isClassifying, setIsClassifying ] = useState(false); // A simple state variable to reflect the classifying process status\n  const [ hasLoaded, setHasLoaded ] = useState(false); // Has the Toxicity model been loaded?\n  const hasMessages = messages.length > 0;  // Should we render the ul that will hold the messages if no messages are available?\n  const model = useRef(null); // Retain a value throughout the Component's render cycles WITHOUT triggering a render, as opposed to a useState variable\n\n  // Handle form submission: check the toxicity of the message and update accordingly:\n  const sendMessage = async event =>{\n    // console.log(\"sendMessage()\");\n    event.preventDefault(); // Prevent default HTML form behaviour that will trigger an HTTP request and a page reload\n    const form = event.target;\n    const msg = form.message.value;\n\n    // Run the classifier on every message\n    setIsClassifying(true);\n    const predictions = await model.current.classify([msg]);\n    setIsClassifying(false);\n\n    // Is the message toxic?\n    const isToxic = predictions[6].results[0].match;\n\n    if ( isToxic ){\n      const labels = [];\n      // Loop through the toxicity labels and create a list of them along with the corresponding percentagess (level of confidence):\n      predictions.forEach( p =>{\n        if ( p.results[0].match ){\n          labels.push({ \n            label: p.label, \n            prob: Math.round(p.results[0].probabilities[1] * 100) + \"%\" });\n        }\n      })\n      // console.log(labels);\n      setToxicity({ isToxic: true, labels });\n    } else {\n      setMessages([...messages, { id: ++id, msg: msg }]);\n      setToxicity({ isToxic: false, labels: [] });\n      form.reset();\n    }\n  }\n  // Load the model just one, when the component mounts (hence the empty dependency array [])\n  useEffect(()=>{\n\n    async function loadModel(){\n      const threshold = 0.9;\n      // Set a state that indicates the model is being loaded...\n      model.current = await load(threshold);\n      setHasLoaded(true);\n      // Set the state to false to let the user know that they can check the text\n      console.log(\"Model loaded\");\n    } \n    loadModel();\n\n\n  },[]);\n\n  return (\n    <>\n      <h1>TensorFlow.JS + Toxicity Classifier</h1>\n      { hasMessages && \n        <ul>\n          { messages.map( message =>{\n            return <li key={message.id}>{ message.msg }</li>\n          })}\n        </ul>\n      }{\n        hasLoaded && (\n          <form onSubmit={sendMessage}>\n            <input type=\"text\" name=\"message\" placeholder=\"Enter message\" />\n            <button>{ isClassifying ? \" ️‍️‍🕵 \" : \"Send\" }</button>\n            <span>{ toxicity.isToxic && \" 🤐\" }</span>\n            { toxicity.labels.map( l => ` ${l.label} ${l.prob}` )}\n          </form>\n        )\n      }\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}