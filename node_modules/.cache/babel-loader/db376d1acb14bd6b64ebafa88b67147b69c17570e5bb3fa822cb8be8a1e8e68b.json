{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport var floorDivGradConfig = {\n  kernelName: FloorDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 2),\n      a = _saved[0],\n      b = _saved[1];\n    var outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n    var derA = function derA() {\n      var res = div(dy, cast(b, 'float32'));\n      var reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    var derB = function derB() {\n      var res = mul(dy, cast(a, 'float32'));\n      var reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n      var tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,QAAQ,QAAO,iBAAiB;AAExC,SAAQC,0BAA0B,EAAEC,gBAAgB,QAAO,uBAAuB;AAClF,SAAQC,IAAI,QAAO,aAAa;AAChC,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,OAAO,QAAO,gBAAgB;AACtC,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,GAAG,QAAO,YAAY;AAG9B,OAAO,IAAMC,kBAAkB,GAAe;EAC5CC,UAAU,EAAEX,QAAQ;EACpBY,YAAY,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACxBC,QAAQ,EAAE,kBAACC,EAAU,EAAEC,KAAe,EAAI;IACxC,4BAAeA,KAAK;MAAbC,CAAC;MAAEC,CAAC;IACX,IAAMC,QAAQ,GAAGjB,0BAA0B,CAACe,CAAC,CAACG,KAAK,EAAEF,CAAC,CAACE,KAAK,CAAC;IAE7D,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAQ;MAChB,IAAMC,GAAG,GAAGjB,GAAG,CAACU,EAAE,EAAEX,IAAI,CAACc,CAAC,EAAE,SAAS,CAAC,CAAC;MACvC,IAAMK,UAAU,GAAGpB,gBAAgB,CAACc,CAAC,CAACG,KAAK,EAAED,QAAQ,CAAC;MACtD,IAAII,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QACzB,OAAOhB,OAAO,CAACE,GAAG,CAACY,GAAG,EAAEC,UAAU,CAAC,EAAEN,CAAC,CAACG,KAAK,CAAC;;MAE/C,OAAOE,GAAG;IACZ,CAAC;IACD,IAAMG,IAAI,GAAG,SAAPA,IAAI,GAAQ;MAChB,IAAIH,GAAG,GAAGhB,GAAG,CAACS,EAAE,EAAEX,IAAI,CAACa,CAAC,EAAE,SAAS,CAAC,CAAC;MACrC,IAAMM,UAAU,GAAGpB,gBAAgB,CAACe,CAAC,CAACE,KAAK,EAAED,QAAQ,CAAC;MACtD,IAAII,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QACzBF,GAAG,GAAGd,OAAO,CAACE,GAAG,CAACY,GAAG,EAAEC,UAAU,CAAC,EAAEL,CAAC,CAACE,KAAK,CAAC;;MAE9C,IAAMM,GAAG,GAAGjB,MAAM,CAACS,CAAC,CAAC;MACrB,OAAOX,GAAG,CAACF,GAAG,CAACiB,GAAG,EAAElB,IAAI,CAACsB,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC;IAC5C,CAAC;IACD,OAAO;MAACT,CAAC,EAAEI,IAAI;MAAEH,CAAC,EAAEO;IAAI,CAAC;EAC3B;CACD","names":["FloorDiv","assertAndGetBroadcastShape","getReductionAxes","cast","div","mul","neg","reshape","square","sum","floorDivGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","a","b","outShape","shape","derA","res","reduceAxes","length","derB","tmp"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\gradients\\FloorDiv_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {assertAndGetBroadcastShape, getReductionAxes} from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {square} from '../ops/square';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const floorDivGradConfig: GradConfig = {\n  kernelName: FloorDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n    return {a: derA, b: derB};\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}