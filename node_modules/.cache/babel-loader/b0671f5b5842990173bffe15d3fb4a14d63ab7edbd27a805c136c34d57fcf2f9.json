{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport var maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n      attrs = _ref.attrs,\n      backend = _ref.backend;\n    var x = inputs.x;\n    var filterSize = attrs.filterSize,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      includeBatchInIndex = attrs.includeBatchInIndex;\n    var cpuBackend = backend;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n    var values = cpuBackend.data.get(x.dataId).values;\n    var convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n    var _maxPoolWithArgmaxImp = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo),\n      _maxPoolWithArgmaxImp2 = _slicedToArray(_maxPoolWithArgmaxImp, 2),\n      pooled = _maxPoolWithArgmaxImp2[0],\n      indexes = _maxPoolWithArgmaxImp2[1];\n    var pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    var indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [{\n      dataId: pooledDataId,\n      shape: convInfo.outShape,\n      dtype: x.dtype\n    }, {\n      dataId: indexesDataId,\n      shape: convInfo.outShape,\n      dtype: 'int32'\n    }];\n  }\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAiB,QAAwD,uBAAuB;AACxG,SAAQC,YAAY,QAAiC,uBAAuB;AAE5E,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,SAAQC,qBAAqB,QAAO,0BAA0B;AAE9D,OAAO,IAAMC,uBAAuB,GAAiB;EACnDC,UAAU,EAAEL,iBAAiB;EAC7BM,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE,0BAA6B;IAAA,IAA3BC,MAAM,QAANA,MAAM;MAAEC,KAAK,QAALA,KAAK;MAAEC,OAAO,QAAPA,OAAO;IAClC,IAAOC,CAAC,GAAIH,MAAiC,CAAtCG,CAAC;IACR,IAAOC,UAAU,GACbH,KAA0C,CADvCG,UAAU;MAAEC,OAAO,GACtBJ,KAA0C,CAD3BI,OAAO;MAAEC,GAAG,GAC3BL,KAA0C,CADlBK,GAAG;MAAEC,mBAAmB,GAChDN,KAA0C,CADbM,mBAAmB;IAEpD,IAAMC,UAAU,GAAGN,OAAyB;IAC5CR,gBAAgB,CAACS,CAAC,EAAE,mBAAmB,CAAC;IAExC,IAAMM,MAAM,GAAGD,UAAU,CAACE,IAAI,CAACC,GAAG,CAACR,CAAC,CAACS,MAAM,CAAC,CAACH,MAAoB;IACjE,IAAMI,QAAQ,GAAGpB,YAAY,CAACqB,iBAAiB,CAC3CX,CAAC,CAACY,KAAyC,EAAEX,UAAU,EAAEC,OAAO,EAChE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,GAAG,CAAC;IAChB,4BAA0BX,qBAAqB,CAC3Cc,MAAM,EAAEN,CAAC,CAACY,KAAK,EAAEZ,CAAC,CAACa,KAAK,EAAET,mBAAmB,EAAEM,QAAQ,CAAC;MAAA;MADrDI,MAAM;MAAEC,OAAO;IAGtB,IAAMC,YAAY,GACdX,UAAU,CAACY,KAAK,CAACH,MAAsB,EAAEJ,QAAQ,CAACQ,QAAQ,EAAElB,CAAC,CAACa,KAAK,CAAC;IACxE,IAAMM,aAAa,GACfd,UAAU,CAACY,KAAK,CAACF,OAAqB,EAAEL,QAAQ,CAACQ,QAAQ,EAAElB,CAAC,CAACa,KAAK,CAAC;IACvE,OAAO,CACL;MAACJ,MAAM,EAAEO,YAAY;MAAEJ,KAAK,EAAEF,QAAQ,CAACQ,QAAQ;MAAEL,KAAK,EAAEb,CAAC,CAACa;IAAK,CAAC,EAChE;MAACJ,MAAM,EAAEU,aAAa;MAAEP,KAAK,EAAEF,QAAQ,CAACQ,QAAQ;MAAEL,KAAK,EAAE;IAAO,CAAC,CAClE;EACH;CACD","names":["MaxPoolWithArgmax","backend_util","assertNotComplex","maxPoolWithArgmaxImpl","maxPoolWithArgmaxConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","filterSize","strides","pad","includeBatchInIndex","cpuBackend","values","data","get","dataId","convInfo","computePool2DInfo","shape","dtype","pooled","indexes","pooledDataId","write","outShape","indexesDataId"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\MaxPoolWithArgmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}