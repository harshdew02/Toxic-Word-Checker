{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringToHashBucketFast } from '@tensorflow/tfjs-core';\nimport { stringToHashBucketFastImpl } from './StringToHashBucketFast_impl';\nexport function stringToHashBucketFast(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var numBuckets = attrs.numBuckets;\n  var input = inputs.input;\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(\"Number of buckets must be at least 1\");\n  }\n  var $input = backend.data.get(input.dataId).values;\n  var output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\nexport var stringToHashBucketFastConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,sBAAsB,QAA8E,uBAAuB;AAI7J,SAAQC,0BAA0B,QAAO,+BAA+B;AAExE,OAAM,SAAUC,sBAAsB,CAACC,IAItC;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,UAAU,GAAID,KAAK,CAAnBC,UAAU;EACjB,IAAOC,KAAK,GAAIJ,MAAM,CAAfI,KAAK;EAEZ,IAAIA,KAAK,CAACC,KAAK,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;;EAErD,IAAIH,UAAU,IAAI,CAAC,EAAE;IACnB,MAAM,IAAIG,KAAK,wCAAwC;;EAGzD,IAAMC,MAAM,GAAGN,OAAO,CAACO,IAAI,CAACC,GAAG,CAACL,KAAK,CAACM,MAAM,CAAC,CAACC,MAAsB;EAEpE,IAAMC,MAAM,GAAGf,0BAA0B,CAACU,MAAM,EAAEJ,UAAU,CAAC;EAC7D,OAAOF,OAAO,CAACY,cAAc,CAACT,KAAK,CAACU,KAAK,EAAE,OAAO,EAAEF,MAAM,CAAC;AAC7D;AAEA,OAAO,IAAMG,4BAA4B,GAAiB;EACxDC,UAAU,EAAEpB,sBAAsB;EAClCqB,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEpB;CACb","names":["StringToHashBucketFast","stringToHashBucketFastImpl","stringToHashBucketFast","args","inputs","backend","attrs","numBuckets","input","dtype","Error","$input","data","get","dataId","values","output","makeTensorInfo","shape","stringToHashBucketFastConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\StringToHashBucketFast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}