{"ast":null,"code":"import _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { l2Normalize } from '../losses';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport var Merge = /*#__PURE__*/function (_Layer) {\n  _inherits(Merge, _Layer);\n  var _super = _createSuper(Merge);\n  function Merge(args) {\n    var _this;\n    _classCallCheck(this, Merge);\n    _this = _super.call(this, args || {});\n    _this.supportsMasking = true;\n    return _this;\n  }\n  /**\n   * Logic for merging multiple tensors, to be overridden by subclasses.\n   * @param inputs\n   */\n  _createClass(Merge, [{\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      throw new NotImplementedError();\n    }\n    /**\n     * Computes the shape of the result of an elementwise operation.\n     *\n     * @param shape1: Shape of the first tensor.\n     * @param shape2: Shape of the second tensor.\n     * @returns Expected output shape when an elementwise operation is carried\n     *   out on 2 tensors with shapes `shape1` and `shape2`.\n     * @throws ValueError: If `shape1` and `shape2` are not compatible for\n     *   element-wise operations.\n     */\n  }, {\n    key: \"computeElementwiseOpOutputShape\",\n    value: function computeElementwiseOpOutputShape(shape1, shape2) {\n      if (shape1 == null || shape2 == null) {\n        return null;\n      } else if (shape1.length < shape2.length) {\n        return this.computeElementwiseOpOutputShape(shape2, shape1);\n      } else if (shape2.length === 0) {\n        return shape1;\n      }\n      var outputShape = shape1.slice(0, shape1.length - shape2.length);\n      for (var k = 0; k < shape2.length; ++k) {\n        var i = shape1[shape1.length - shape2.length + k];\n        var j = shape2[k];\n        if (i == null || j == null || i < 0 || j < 0) {\n          outputShape.push(null);\n        } else if (i === 1) {\n          outputShape.push(j);\n        } else if (j === 1) {\n          outputShape.push(i);\n        } else {\n          if (i !== j) {\n            throw new ValueError('Operands could not be broadcast together with shapes ' + JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n          }\n          outputShape.push(i);\n        }\n      }\n      return outputShape;\n    }\n  }, {\n    key: \"build\",\n    value: function build(inputShape) {\n      // Used purely for shape validation.\n      if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n        // Make sure that inputShape is an Array of shape.\n        inputShape = [getExactlyOneShape(inputShape)];\n      }\n      inputShape = inputShape;\n      if (inputShape.length < 2) {\n        throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.' + \" Got \".concat(inputShape.length, \" input(s).\"));\n      }\n      // Make sure that there is at most one unique batch size among the input\n      // shapes.\n      var batchSizes = [];\n      var _iterator = _createForOfIteratorHelper(inputShape),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _shape = _step.value;\n          if (_shape != null && _shape[0] !== null) {\n            batchSizes.push(_shape[0]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      batchSizes = generic_utils.unique(batchSizes);\n      if (batchSizes.length > 1) {\n        throw new ValueError(\"Can not merge tensors with different batch sizes. \" + \"Got tensors with shapes: \".concat(JSON.stringify(inputShape), \".\"));\n      }\n      var outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n      for (var i = 1; i < inputShape.length; ++i) {\n        var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n        outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n      }\n      // If the inputs have different ranks, we have to reshape them to make them\n      // broadcastable.\n      var allRanks = inputShape.map(function (shape) {\n        return shape.length;\n      });\n      if (inputShape.indexOf(null) === -1 && generic_utils.unique(allRanks).length === 1) {\n        this.reshapeRequired = false;\n      } else {\n        this.reshapeRequired = true;\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        inputs = inputs;\n        if (_this2.reshapeRequired) {\n          var reshapedInputs = [];\n          var inputDims = inputs.map(function (input) {\n            return input.rank;\n          });\n          if (inputDims.indexOf(null) === -1) {\n            // If ranks of all inputs are available, we simply expand each of them\n            // at axis=1 until all of them have the same rank.\n            var maxNDim = mathUtils.max(inputDims);\n            var _iterator2 = _createForOfIteratorHelper(inputs),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var x = _step2.value;\n                var xNDim = x.rank;\n                for (var k = 0; k < maxNDim - xNDim; ++k) {\n                  x = K.expandDims(x, 1);\n                }\n                reshapedInputs.push(x);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            return _this2.mergeFunction(reshapedInputs);\n          } else {\n            // Transpose all inputs so that batch size is the last dimension.\n            // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n            var transposed = false;\n            var _iterator3 = _createForOfIteratorHelper(inputs),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _x = _step3.value;\n                var _xNDim = _x.rank;\n                if (_xNDim == null) {\n                  var xShape = _x.shape;\n                  var _batchSize = xShape[0];\n                  var _newShape = xShape.slice(1).concat([_batchSize]);\n                  var xTransposed = tfc.reshape(_x, [_batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n                  xTransposed = tfc.transpose(xTransposed, [1, 0]);\n                  xTransposed = tfc.reshape(xTransposed, _newShape);\n                  reshapedInputs.push(xTransposed);\n                  transposed = true;\n                } else if (_xNDim > 1) {\n                  var _dims = mathUtils.range(1, _xNDim).concat([0]);\n                  reshapedInputs.push(tfc.transpose(_x, _dims));\n                  transposed = true;\n                } else {\n                  // We don't transpose inputs if they are 1D vectors or scalars.\n                  reshapedInputs.push(_x);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n            var y = _this2.mergeFunction(reshapedInputs);\n            var yNDim = y.rank;\n            if (transposed) {\n              // If inputs have been transposed, we have to transpose the output\n              // too.\n              if (yNDim == null) {\n                var yShape = y.shape;\n                var _yNDim = yShape.length;\n                var batchSize = yShape[_yNDim - 1];\n                var newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n                y = tfc.reshape(tfc.transpose(tfc.reshape(y, [-1, batchSize]), [1, 0]), newShape);\n              } else if (yNDim > 1) {\n                var dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n                y = tfc.transpose(y, dims);\n              }\n            }\n            return y;\n          }\n        } else {\n          return _this2.mergeFunction(inputs);\n        }\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = inputShape;\n      var outputShape;\n      if (inputShape[0] == null) {\n        outputShape = null;\n      } else {\n        outputShape = inputShape[0].slice(1);\n      }\n      for (var i = 1; i < inputShape.length; ++i) {\n        var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n        outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n      }\n      var batchSizes = [];\n      var _iterator4 = _createForOfIteratorHelper(inputShape),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _shape2 = _step4.value;\n          if (_shape2 != null && _shape2[0] !== null) {\n            batchSizes.push(_shape2[0]);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      batchSizes = generic_utils.unique(batchSizes);\n      if (batchSizes.length === 1) {\n        outputShape = batchSizes.concat(outputShape);\n      } else {\n        outputShape = [null].concat(outputShape);\n      }\n      return outputShape;\n    }\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      return tfc.tidy(function () {\n        if (mask == null) {\n          return null;\n        }\n        if (!Array.isArray(mask)) {\n          throw new ValueError('`mask` should be an Array');\n        }\n        if (!Array.isArray(inputs)) {\n          throw new ValueError('`inputs` should be an Array');\n        }\n        if (mask.length !== inputs.length) {\n          throw new ValueError(\"The Array 'inputs' and 'mask' are expected to have the same \" + \"length, but have different lengths \" + \"(\".concat(inputs.length, \" vs \").concat(mask.length, \")\"));\n        }\n        if (mask.every(function (m) {\n          return m == null;\n        })) {\n          return null;\n        }\n        mask = mask.map(function (m) {\n          return m == null ? m : tfc.expandDims(m, 0);\n        });\n        var output = mask[0];\n        for (var i = 1; i < mask.length - 1; ++i) {\n          output = tfc.logicalAnd(output, mask[i]);\n        }\n        return output;\n      });\n    }\n  }]);\n  return Merge;\n}(Layer);\nexport var Add = /*#__PURE__*/function (_Merge) {\n  _inherits(Add, _Merge);\n  var _super2 = _createSuper(Add);\n  function Add(args) {\n    _classCallCheck(this, Add);\n    return _super2.call(this, args);\n  }\n  _createClass(Add, [{\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      return tidy(function () {\n        var output = inputs[0].clone();\n        for (var i = 1; i < inputs.length; ++i) {\n          output = tfc.add(output, inputs[i]);\n        }\n        return output;\n      });\n    }\n  }]);\n  return Add;\n}(Merge);\n/** @nocollapse */\nAdd.className = 'Add';\nserialization.registerClass(Add);\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config) {\n  if (Array.isArray(config)) {\n    var layer = new Add({});\n    return layer.apply(config);\n  } else {\n    return new Add(config);\n  }\n}\nexport var Multiply = /*#__PURE__*/function (_Merge2) {\n  _inherits(Multiply, _Merge2);\n  var _super3 = _createSuper(Multiply);\n  function Multiply(args) {\n    _classCallCheck(this, Multiply);\n    return _super3.call(this, args);\n  }\n  _createClass(Multiply, [{\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      return tidy(function () {\n        var output = inputs[0].clone();\n        for (var i = 1; i < inputs.length; ++i) {\n          output = tfc.mul(output, inputs[i]);\n        }\n        return output;\n      });\n    }\n  }]);\n  return Multiply;\n}(Merge);\n/** @nocollapse */\nMultiply.className = 'Multiply';\nserialization.registerClass(Multiply);\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config) {\n  if (Array.isArray(config)) {\n    var layer = new Multiply({});\n    return layer.apply(config);\n  } else {\n    return new Multiply(config);\n  }\n}\nexport var Average = /*#__PURE__*/function (_Merge3) {\n  _inherits(Average, _Merge3);\n  var _super4 = _createSuper(Average);\n  function Average(args) {\n    _classCallCheck(this, Average);\n    return _super4.call(this, args);\n  }\n  _createClass(Average, [{\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      return tidy(function () {\n        var output = inputs[0].clone();\n        for (var i = 1; i < inputs.length; ++i) {\n          output = tfc.add(output, inputs[i]);\n        }\n        return tfc.mul(1 / inputs.length, output);\n      });\n    }\n  }]);\n  return Average;\n}(Merge);\n/** @nocollapse */\nAverage.className = 'Average';\nserialization.registerClass(Average);\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config) {\n  if (Array.isArray(config)) {\n    var layer = new Average({});\n    return layer.apply(config);\n  } else {\n    return new Average(config);\n  }\n}\nexport var Maximum = /*#__PURE__*/function (_Merge4) {\n  _inherits(Maximum, _Merge4);\n  var _super5 = _createSuper(Maximum);\n  function Maximum(args) {\n    _classCallCheck(this, Maximum);\n    return _super5.call(this, args);\n  }\n  _createClass(Maximum, [{\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      return tidy(function () {\n        var output = inputs[0];\n        for (var i = 1; i < inputs.length; ++i) {\n          output = tfc.maximum(output, inputs[i]);\n        }\n        return output;\n      });\n    }\n  }]);\n  return Maximum;\n}(Merge);\n/** @nocollapse */\nMaximum.className = 'Maximum';\nserialization.registerClass(Maximum);\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config) {\n  if (Array.isArray(config)) {\n    var layer = new Maximum({});\n    return layer.apply(config);\n  } else {\n    return new Maximum(config);\n  }\n}\nexport var Minimum = /*#__PURE__*/function (_Merge5) {\n  _inherits(Minimum, _Merge5);\n  var _super6 = _createSuper(Minimum);\n  function Minimum(args) {\n    _classCallCheck(this, Minimum);\n    return _super6.call(this, args);\n  }\n  _createClass(Minimum, [{\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      return tidy(function () {\n        var output = inputs[0];\n        for (var i = 1; i < inputs.length; ++i) {\n          output = tfc.minimum(output, inputs[i]);\n        }\n        return output;\n      });\n    }\n  }]);\n  return Minimum;\n}(Merge);\n/** @nocollapse */\nMinimum.className = 'Minimum';\nserialization.registerClass(Minimum);\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config) {\n  if (Array.isArray(config)) {\n    var layer = new Minimum({});\n    return layer.apply(config);\n  } else {\n    return new Minimum(config);\n  }\n}\nexport var Concatenate = /*#__PURE__*/function (_Merge6) {\n  _inherits(Concatenate, _Merge6);\n  var _super7 = _createSuper(Concatenate);\n  function Concatenate(args) {\n    var _this3;\n    _classCallCheck(this, Concatenate);\n    _this3 = _super7.call(this, args);\n    _this3.DEFAULT_AXIS = -1;\n    if (args == null) {\n      args = {};\n    }\n    _this3.axis = args.axis == null ? _this3.DEFAULT_AXIS : args.axis;\n    _this3.supportsMasking = true;\n    _this3.reshapeRequired = false;\n    return _this3;\n  }\n  _createClass(Concatenate, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      // Used purely for shape validation.]\n      if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) {\n        throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 ' + 'inputs');\n      }\n      inputShape = inputShape;\n      var allNoneShape = true;\n      var _iterator5 = _createForOfIteratorHelper(inputShape),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _shape3 = _step5.value;\n          if (_shape3 != null) {\n            allNoneShape = false;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      if (allNoneShape) {\n        return;\n      }\n      var shapeSet = [];\n      for (var i = 0; i < inputShape.length; ++i) {\n        var shapeWithoutConcatAxis = inputShape[i].slice();\n        shapeWithoutConcatAxis.splice(this.axis, 1);\n        var exists = false;\n        var _iterator6 = _createForOfIteratorHelper(shapeSet),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var shape = _step6.value;\n            if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n              exists = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        if (!exists) {\n          shapeSet.push(shapeWithoutConcatAxis);\n        }\n      }\n      if (shapeSet.length > 1) {\n        throw new ValueError('A `Concatenate` layer requires inputs with matching shapes ' + 'except for the concat axis. Got input shapes: ' + JSON.stringify(inputShape));\n      }\n    }\n  }, {\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      var _this4 = this;\n      return tidy(function () {\n        return K.concatenate(inputs, _this4.axis);\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n        throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');\n      }\n      var inputShapes = inputShape;\n      var outputShape = inputShapes[0].slice();\n      var axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n      // Porting Note: the line above is because TypeScript doesn't support\n      //   negative indices.\n      var _iterator7 = _createForOfIteratorHelper(inputShapes.slice(1)),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var shape = _step7.value;\n          if (outputShape[axis] == null || shape[axis] == null) {\n            outputShape[axis] = null;\n            break;\n          }\n          outputShape[axis] += shape[axis];\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return outputShape;\n    }\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      var _this5 = this;\n      if (mask == null) {\n        return null;\n      }\n      if (!Array.isArray(mask)) {\n        throw new ValueError('`mask` should be an array for Concatenate');\n      }\n      if (!Array.isArray(inputs)) {\n        throw new ValueError('`inputs` should be an array for Concatenate');\n      }\n      if (mask.length !== inputs.length) {\n        throw new ValueError(\"Mismatch in the length of mask (\".concat(mask.length, \") \") + \"and the legnth of inputs (\".concat(inputs.length, \")\"));\n      }\n      return tfc.tidy(function () {\n        var allNullMasks = true;\n        mask.forEach(function (m) {\n          if (m != null) {\n            allNullMasks = false;\n            return;\n          }\n        });\n        if (allNullMasks) {\n          return null;\n        }\n        var outputMasks = [];\n        for (var i = 0; i < inputs.length; ++i) {\n          if (mask[i] == null) {\n            // Input is unmasked. Append all 1's to masks.\n            outputMasks.push(tfc.cast(tfc.onesLike(inputs[i]), 'bool'));\n          } else if (mask[i].rank < inputs[i].rank) {\n            // Mask is smaller than the input, expand it.\n            outputMasks.push(tfc.expandDims(mask[i], -1));\n          } else {\n            outputMasks.push(mask[i]);\n          }\n        }\n        var concatenatedMasks = tfc.concat(outputMasks, _this5.axis);\n        return tfc.all(concatenatedMasks, -1, false);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'axis': this.axis\n      };\n      var baseConfig = _get(_getPrototypeOf(Concatenate.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return Concatenate;\n}(Merge);\n/** @nocollapse */\nConcatenate.className = 'Concatenate';\nserialization.registerClass(Concatenate);\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config) {\n  if (Array.isArray(config)) {\n    var layer = new Concatenate({});\n    return layer.apply(config);\n  } else {\n    return new Concatenate(config);\n  }\n}\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis, dim) {\n  while (axis < 0) {\n    axis += dim;\n  }\n  return axis;\n}\nfunction batchDot(x, y, axes) {\n  if (x.shape.length > 3 || y.shape.length > 3) {\n    throw new NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');\n  }\n  tfc.util.assert(x.shape.length >= 2, function () {\n    return \"batchDot requires the rank of x to be >= 2, \" + \"but got \".concat(x.shape.length);\n  });\n  tfc.util.assert(x.shape.length >= 2, function () {\n    return \"batchDot requires the rank of y to be >= 2, \" + \"but got \".concat(y.shape.length);\n  });\n  if (typeof axes === 'number') {\n    axes = [axes, axes];\n  }\n  if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n    throw new NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');\n  }\n  var xNDim = x.shape.length;\n  var yNDim = y.shape.length;\n  if (axes == null) {\n    // Behave like batchMatmul by default.\n    axes = [xNDim - 1, yNDim - 2];\n  }\n  var axesArray = axes;\n  return tfc.tidy(function () {\n    var diff;\n    if (xNDim > yNDim) {\n      diff = xNDim - yNDim;\n      var diffShape = [];\n      for (var i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      y = tfc.reshape(y, y.shape.concat(diffShape));\n    } else if (yNDim > xNDim) {\n      diff = yNDim - xNDim;\n      var _diffShape = [];\n      for (var _i = 0; _i < diff; ++_i) {\n        _diffShape.push(1);\n      }\n      x = tfc.reshape(x, x.shape.concat(_diffShape));\n    } else {\n      diff = 0;\n    }\n    var out;\n    if (x.shape.length === 2 && y.shape.length === 2) {\n      if (axesArray[0] === axesArray[1]) {\n        out = tfc.sum(tfc.mul(x, y), axesArray[0]);\n      } else {\n        out = tfc.sum(tfc.mul(tfc.transpose(x, [1, 0]), y), axesArray[1]);\n      }\n    } else {\n      var adjX = axesArray[0] !== x.shape.length - 1;\n      var adjY = axesArray[1] === y.shape.length - 1;\n      out = tfc.matMul(x, y, adjX, adjY);\n    }\n    if (diff > 0) {\n      var idx;\n      if (xNDim > yNDim) {\n        idx = xNDim + yNDim - 3;\n      } else {\n        idx = xNDim - 1;\n      }\n      var squeezeAxes = [];\n      for (var _i2 = idx; _i2 < idx + diff; ++_i2) {\n        squeezeAxes.push(_i2);\n      }\n      out = tfc.squeeze(out, squeezeAxes);\n    }\n    if (out.shape.length === 1) {\n      out = tfc.expandDims(out, 1);\n    }\n    return out;\n  });\n}\nexport var Dot = /*#__PURE__*/function (_Merge7) {\n  _inherits(Dot, _Merge7);\n  var _super8 = _createSuper(Dot);\n  function Dot(args) {\n    var _this6;\n    _classCallCheck(this, Dot);\n    _this6 = _super8.call(this, args);\n    _this6.axes = args.axes;\n    _this6.normalize = args.normalize == null ? false : args.normalize;\n    _this6.supportsMasking = true;\n    _this6.reshapeRequired = false;\n    return _this6;\n  }\n  _createClass(Dot, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), function () {\n        return 'A `Dot` layer should be called on a list of exactly 2 inputs.';\n      });\n      var shape1 = inputShape[0];\n      var shape2 = inputShape[1];\n      if (shape1.length > 3 || shape2.length > 3) {\n        throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n      }\n      var axes = this.interpretAxes(shape1, shape2);\n      if (shape1[axes[0]] !== shape2[axes[1]]) {\n        throw new ValueError(\"Dimension incompatibility: \" + \"\".concat(shape1[axes[0]], \" !== \").concat(shape2[axes[1]]));\n      }\n    }\n  }, {\n    key: \"mergeFunction\",\n    value: function mergeFunction(inputs) {\n      if (inputs.length !== 2) {\n        throw new ValueError('A `Dot` layer must be called on exactly 2 inputs, ' + \"but received \".concat(inputs.length, \" input(s).\"));\n      }\n      var x1 = inputs[0];\n      var x2 = inputs[1];\n      var axes;\n      if (!Array.isArray(this.axes)) {\n        axes = [interpretAxis(this.axes, x1.shape.length), interpretAxis(this.axes, x2.shape.length)];\n      } else {\n        axes = this.axes.map(function (axis, i) {\n          return interpretAxis(axis, inputs[i].shape.length);\n        });\n      }\n      if (this.normalize) {\n        x1 = l2Normalize(x1, axes[0]);\n        x2 = l2Normalize(x2, axes[1]);\n      }\n      return batchDot(x1, x2, axes);\n    }\n  }, {\n    key: \"interpretAxes\",\n    value: function interpretAxes(shape1, shape2) {\n      var axes;\n      if (!Array.isArray(this.axes)) {\n        // `this.axes` is a single integer.\n        axes = [interpretAxis(this.axes, shape1.length), interpretAxis(this.axes, shape2.length)];\n      } else {\n        // `this.axes` is an Array of integers.\n        axes = this.axes;\n      }\n      return axes;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 && Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), function () {\n        return 'A `Dot` layer should be called on a list of exactly 2 inputs.';\n      });\n      var shape1 = inputShape[0].slice();\n      var shape2 = inputShape[1].slice();\n      if (shape1.length > 3 || shape2.length > 3) {\n        throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n      }\n      var axes = this.interpretAxes(shape1, shape2);\n      shape1.splice(axes[0], 1);\n      shape2.splice(axes[1], 1);\n      shape2.splice(0, 1);\n      var outputShape = shape1.concat(shape2);\n      if (outputShape.length === 1) {\n        outputShape.push(1);\n      }\n      return outputShape;\n    }\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      return null;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'axes': this.axes,\n        'normalize': this.normalize\n      };\n      var baseConfig = _get(_getPrototypeOf(Dot.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return Dot;\n}(Merge);\n/** @nocollapse */\nDot.className = 'Dot';\nserialization.registerClass(Dot);\n// TODO(cais): Add functional interfaces for the merge layers.","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","util","K","Layer","NotImplementedError","ValueError","l2Normalize","generic_utils","mathUtils","getExactlyOneShape","Merge","args","supportsMasking","inputs","shape1","shape2","length","computeElementwiseOpOutputShape","outputShape","slice","k","i","j","push","JSON","stringify","inputShape","Array","isArray","batchSizes","shape","unique","allRanks","map","indexOf","reshapeRequired","kwargs","reshapedInputs","inputDims","input","rank","maxNDim","max","x","xNDim","expandDims","mergeFunction","transposed","xShape","batchSize","newShape","concat","xTransposed","reshape","arrayProd","transpose","dims","range","y","yNDim","yShape","mask","every","m","output","logicalAnd","Add","clone","add","registerClass","config","layer","apply","Multiply","mul","multiply","Average","average","Maximum","maximum","Minimum","minimum","Concatenate","axis","DEFAULT_AXIS","allNoneShape","shapeSet","shapeWithoutConcatAxis","splice","exists","arraysEqual","concatenate","inputShapes","allNullMasks","forEach","outputMasks","cast","onesLike","concatenatedMasks","all","baseConfig","Object","assign","interpretAxis","dim","batchDot","axes","assert","dtype","axesArray","diff","diffShape","out","sum","adjX","adjY","matMul","idx","squeezeAxes","squeeze","Dot","normalize","interpretAxes","x1","x2"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\merge.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport {Layer, LayerArgs, SymbolicTensor} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {l2Normalize} from '../losses';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport {getExactlyOneShape} from '../utils/types_utils';\n\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport abstract class Merge extends Layer {\n  protected reshapeRequired: boolean;\n\n  constructor(args?: LayerArgs) {\n    super(args || {});\n    this.supportsMasking = true;\n  }\n\n  /**\n   * Logic for merging multiple tensors, to be overridden by subclasses.\n   * @param inputs\n   */\n  protected mergeFunction(inputs: Tensor[]): Tensor {\n    throw new NotImplementedError();\n  }\n\n  /**\n   * Computes the shape of the result of an elementwise operation.\n   *\n   * @param shape1: Shape of the first tensor.\n   * @param shape2: Shape of the second tensor.\n   * @returns Expected output shape when an elementwise operation is carried\n   *   out on 2 tensors with shapes `shape1` and `shape2`.\n   * @throws ValueError: If `shape1` and `shape2` are not compatible for\n   *   element-wise operations.\n   */\n  private computeElementwiseOpOutputShape(shape1: Shape, shape2: Shape): Shape {\n    if (shape1 == null || shape2 == null) {\n      return null;\n    } else if (shape1.length < shape2.length) {\n      return this.computeElementwiseOpOutputShape(shape2, shape1);\n    } else if (shape2.length === 0) {\n      return shape1;\n    }\n    const outputShape: Shape = shape1.slice(0, shape1.length - shape2.length);\n    for (let k = 0; k < shape2.length; ++k) {\n      const i = shape1[shape1.length - shape2.length + k];\n      const j = shape2[k];\n      if (i == null || j == null || i < 0 || j < 0) {\n        outputShape.push(null);\n      } else if (i === 1) {\n        outputShape.push(j);\n      } else if (j === 1) {\n        outputShape.push(i);\n      } else {\n        if (i !== j) {\n          throw new ValueError(\n              'Operands could not be broadcast together with shapes ' +\n              JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n        }\n        outputShape.push(i);\n      }\n    }\n    return outputShape;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.\n    if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n      // Make sure that inputShape is an Array of shape.\n      inputShape = [getExactlyOneShape(inputShape)];\n    }\n    inputShape = inputShape as Shape[];\n    if (inputShape.length < 2) {\n      throw new ValueError(\n          'A merge layer should be called on an Array of at least 2 inputs.' +\n          ` Got ${inputShape.length} input(s).`);\n    }\n\n    // Make sure that there is at most one unique batch size among the input\n    // shapes.\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length > 1) {\n      throw new ValueError(\n          `Can not merge tensors with different batch sizes. ` +\n          `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n    }\n\n    let outputShape: Shape =\n        inputShape[0] == null ? null : inputShape[0].slice(1);\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n    // If the inputs have different ranks, we have to reshape them to make them\n    // broadcastable.\n    const allRanks = inputShape.map(shape => shape.length);\n    if (inputShape.indexOf(null) === -1 &&\n        generic_utils.unique(allRanks).length === 1) {\n      this.reshapeRequired = false;\n    } else {\n      this.reshapeRequired = true;\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (this.reshapeRequired) {\n        const reshapedInputs: Tensor[] = [];\n        const inputDims = inputs.map(input => input.rank);\n        if (inputDims.indexOf(null) === -1) {\n          // If ranks of all inputs are available, we simply expand each of them\n          // at axis=1 until all of them have the same rank.\n          const maxNDim = mathUtils.max(inputDims);\n          for (let x of inputs) {\n            const xNDim = x.rank;\n            for (let k = 0; k < maxNDim - xNDim; ++k) {\n              x = K.expandDims(x, 1);\n            }\n            reshapedInputs.push(x);\n          }\n          return this.mergeFunction(reshapedInputs);\n        } else {\n          // Transpose all inputs so that batch size is the last dimension.\n          // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n          let transposed = false;\n          for (const x of inputs) {\n            const xNDim = x.rank;\n            if (xNDim == null) {\n              const xShape = x.shape;\n              const batchSize = xShape[0];\n              const newShape = xShape.slice(1).concat([batchSize]);\n              let xTransposed = tfc.reshape(\n                  x, [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n              xTransposed = tfc.transpose(xTransposed, [1, 0]);\n              xTransposed = tfc.reshape(xTransposed, newShape);\n              reshapedInputs.push(xTransposed);\n              transposed = true;\n            } else if (xNDim > 1) {\n              const dims = mathUtils.range(1, xNDim).concat([0]);\n              reshapedInputs.push(tfc.transpose(x, dims));\n              transposed = true;\n            } else {\n              // We don't transpose inputs if they are 1D vectors or scalars.\n              reshapedInputs.push(x);\n            }\n          }\n          let y = this.mergeFunction(reshapedInputs);\n          const yNDim = y.rank;\n          if (transposed) {\n            // If inputs have been transposed, we have to transpose the output\n            // too.\n            if (yNDim == null) {\n              const yShape = y.shape;\n              const yNDim = yShape.length;\n              const batchSize = yShape[yNDim - 1];\n              const newShape =\n                  [batchSize].concat(yShape.slice(0, yShape.length - 1));\n              y = tfc.reshape(\n                  tfc.transpose(tfc.reshape(y, [-1, batchSize]), [1, 0]),\n                  newShape);\n            } else if (yNDim > 1) {\n              const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n              y = tfc.transpose(y, dims);\n            }\n          }\n          return y;\n        }\n      } else {\n        return this.mergeFunction(inputs);\n      }\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = inputShape as Shape[];\n    let outputShape: Shape;\n    if (inputShape[0] == null) {\n      outputShape = null;\n    } else {\n      outputShape = inputShape[0].slice(1);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n      const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n      outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n    }\n\n    let batchSizes: number[] = [];\n    for (const shape of inputShape) {\n      if (shape != null && shape[0] !== null) {\n        batchSizes.push(shape[0]);\n      }\n    }\n    batchSizes = generic_utils.unique(batchSizes);\n    if (batchSizes.length === 1) {\n      outputShape = batchSizes.concat(outputShape);\n    } else {\n      outputShape = [null].concat(outputShape);\n    }\n    return outputShape;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    return tfc.tidy(() => {\n      if (mask == null) {\n        return null;\n      }\n      if (!Array.isArray(mask)) {\n        throw new ValueError('`mask` should be an Array');\n      }\n      if (!Array.isArray(inputs)) {\n        throw new ValueError('`inputs` should be an Array');\n      }\n      if (mask.length !== inputs.length) {\n        throw new ValueError(\n            `The Array 'inputs' and 'mask' are expected to have the same ` +\n            `length, but have different lengths ` +\n            `(${inputs.length} vs ${mask.length})`);\n      }\n      if (mask.every(m => m == null)) {\n        return null;\n      }\n      mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n      let output = mask[0];\n      for (let i = 1; i < mask.length - 1; ++i) {\n        output = tfc.logicalAnd(output, mask[i]);\n      }\n      return output;\n    });\n  }\n}\n\nexport class Add extends Merge {\n  /** @nocollapse */\n  static className = 'Add';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Add);\n\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Add({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Add(config);\n  }\n}\n\nexport class Multiply extends Merge {\n  /** @nocollapse */\n  static className = 'Multiply';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.mul(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Multiply);\n\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Multiply({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Multiply(config);\n  }\n}\n\nexport class Average extends Merge {\n  /** @nocollapse */\n  static className = 'Average';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0].clone();\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.add(output, inputs[i]);\n      }\n      return tfc.mul(1 / inputs.length, output);\n    });\n  }\n}\nserialization.registerClass(Average);\n\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Average({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Average(config);\n  }\n}\n\nexport class Maximum extends Merge {\n  /** @nocollapse */\n  static className = 'Maximum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.maximum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Maximum);\n\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Maximum({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Maximum(config);\n  }\n}\n\nexport class Minimum extends Merge {\n  /** @nocollapse */\n  static className = 'Minimum';\n  constructor(args?: LayerArgs) {\n    super(args);\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      let output = inputs[0];\n      for (let i = 1; i < inputs.length; ++i) {\n        output = tfc.minimum(output, inputs[i]);\n      }\n      return output;\n    });\n  }\n}\nserialization.registerClass(Minimum);\n\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config?: SymbolicTensor[]|Tensor[]|LayerArgs): Layer|\n    SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Minimum({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Minimum(config);\n  }\n}\n\nexport declare interface ConcatenateLayerArgs extends LayerArgs {\n  /**\n   * Axis along which to concatenate.\n   */\n  axis?: number;\n}\n\nexport class Concatenate extends Merge {\n  /** @nocollapse */\n  static className = 'Concatenate';\n  readonly DEFAULT_AXIS = -1;\n  private readonly axis: number;\n\n  constructor(args?: ConcatenateLayerArgs) {\n    super(args);\n    if (args == null) {\n      args = {};\n    }\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    // Used purely for shape validation.]\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n        inputShape.length === 1) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of at least 2 ' +\n          'inputs');\n    }\n    inputShape = inputShape as Shape[];\n\n    let allNoneShape = true;\n    for (const shape of inputShape) {\n      if (shape != null) {\n        allNoneShape = false;\n        break;\n      }\n    }\n    if (allNoneShape) {\n      return;\n    }\n\n    const shapeSet: Shape[] = [];\n    for (let i = 0; i < inputShape.length; ++i) {\n      const shapeWithoutConcatAxis = inputShape[i].slice();\n      shapeWithoutConcatAxis.splice(this.axis, 1);\n      let exists = false;\n      for (const shape of shapeSet) {\n        if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n          exists = true;\n          break;\n        }\n      }\n      if (!exists) {\n        shapeSet.push(shapeWithoutConcatAxis);\n      }\n    }\n    if (shapeSet.length > 1) {\n      throw new ValueError(\n          'A `Concatenate` layer requires inputs with matching shapes ' +\n          'except for the concat axis. Got input shapes: ' +\n          JSON.stringify(inputShape));\n    }\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    return tidy(() => {\n      return K.concatenate(inputs, this.axis);\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n      throw new ValueError(\n          'A `Concatenate` layer should be called on a list of inputs.');\n    }\n    const inputShapes = inputShape as Shape[];\n    const outputShape = inputShapes[0].slice();\n    const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n    // Porting Note: the line above is because TypeScript doesn't support\n    //   negative indices.\n    for (const shape of inputShapes.slice(1)) {\n      if (outputShape[axis] == null || shape[axis] == null) {\n        outputShape[axis] = null;\n        break;\n      }\n      outputShape[axis] += shape[axis];\n    }\n    return outputShape;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    if (mask == null) {\n      return null;\n    }\n    if (!Array.isArray(mask)) {\n      throw new ValueError('`mask` should be an array for Concatenate');\n    }\n    if (!Array.isArray(inputs)) {\n      throw new ValueError('`inputs` should be an array for Concatenate');\n    }\n    if (mask.length !== inputs.length) {\n      throw new ValueError(\n          `Mismatch in the length of mask (${mask.length}) ` +\n          `and the legnth of inputs (${inputs.length})`);\n    }\n    return tfc.tidy(() => {\n      let allNullMasks = true;\n      mask.forEach(m => {\n        if (m != null) {\n          allNullMasks = false;\n          return;\n        }\n      });\n      if (allNullMasks) {\n        return null;\n      }\n      const outputMasks: Tensor[] = [];\n      for (let i = 0; i < inputs.length; ++i) {\n        if (mask[i] == null) {\n          // Input is unmasked. Append all 1's to masks.\n          outputMasks.push(tfc.cast(tfc.onesLike(inputs[i]), 'bool'));\n        } else if (mask[i].rank < inputs[i].rank) {\n          // Mask is smaller than the input, expand it.\n          outputMasks.push(tfc.expandDims(mask[i], -1));\n        } else {\n          outputMasks.push(mask[i]);\n        }\n      }\n      const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n      return tfc.all(concatenatedMasks, -1, false);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axis': this.axis,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Concatenate);\n\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config?: SymbolicTensor[]|Tensor[]|\n                            ConcatenateLayerArgs): Layer|SymbolicTensor|Tensor {\n  if (Array.isArray(config)) {\n    const layer = new Concatenate({});\n    return layer.apply(config) as SymbolicTensor | Tensor;\n  } else {\n    return new Concatenate(config);\n  }\n}\n\nexport declare interface DotLayerArgs extends LayerArgs {\n  /**\n   * Axis or axes along which the dot product will be taken.\n   *\n   * Integer or an Array of integers.\n   */\n  axes: number|[number, number];\n\n  /**\n   * Whether to L2-normalize samples along the dot product axis\n   * before taking the dot product.\n   *\n   * If set to `true`, the output of the dot product is the cosine\n   * proximity between the two samples.\n   */\n  normalize?: boolean;\n}\n\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis: number, dim: number): number {\n  while (axis < 0) {\n    axis += dim;\n  }\n  return axis;\n}\n\nfunction batchDot(x: Tensor, y: Tensor, axes: number|[number, number]): Tensor {\n  if (x.shape.length > 3 || y.shape.length > 3) {\n    throw new NotImplementedError(\n        'batchDot is not implemented for tensors of 4D or higher rank yet');\n  }\n  tfc.util.assert(\n      x.shape.length >= 2,\n      () => `batchDot requires the rank of x to be >= 2, ` +\n          `but got ${x.shape.length}`);\n  tfc.util.assert(\n      x.shape.length >= 2,\n      () => `batchDot requires the rank of y to be >= 2, ` +\n          `but got ${y.shape.length}`);\n\n  if (typeof axes === 'number') {\n    axes = [axes, axes];\n  }\n\n  if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n    throw new NotImplementedError(\n        'batchDot is not implemented for complex64-type Tensors yet.');\n  }\n\n  const xNDim = x.shape.length;\n  const yNDim = y.shape.length;\n  if (axes == null) {\n    // Behave like batchMatmul by default.\n    axes = [xNDim - 1, yNDim - 2];\n  }\n  const axesArray = axes as [number, number];\n\n  return tfc.tidy(() => {\n    let diff: number;\n    if (xNDim > yNDim) {\n      diff = xNDim - yNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      y = tfc.reshape(y, y.shape.concat(diffShape));\n    } else if (yNDim > xNDim) {\n      diff = yNDim - xNDim;\n      const diffShape: Shape = [];\n      for (let i = 0; i < diff; ++i) {\n        diffShape.push(1);\n      }\n      x = tfc.reshape(x, x.shape.concat(diffShape));\n    } else {\n      diff = 0;\n    }\n\n    let out: Tensor;\n    if (x.shape.length === 2 && y.shape.length === 2) {\n      if (axesArray[0] === axesArray[1]) {\n        out = tfc.sum(tfc.mul(x, y), axesArray[0]);\n      } else {\n        out = tfc.sum(tfc.mul(tfc.transpose(x, [1, 0]), y), axesArray[1]);\n      }\n    } else {\n      const adjX = axesArray[0] !== x.shape.length - 1;\n      const adjY = axesArray[1] === y.shape.length - 1;\n      out = tfc.matMul(x, y, adjX, adjY);\n    }\n\n    if (diff > 0) {\n      let idx: number;\n      if (xNDim > yNDim) {\n        idx = xNDim + yNDim - 3;\n      } else {\n        idx = xNDim - 1;\n      }\n      const squeezeAxes: number[] = [];\n      for (let i = idx; i < idx + diff; ++i) {\n        squeezeAxes.push(i);\n      }\n      out = tfc.squeeze(out, squeezeAxes);\n    }\n    if (out.shape.length === 1) {\n      out = tfc.expandDims(out, 1);\n    }\n    return out;\n  });\n}\n\nexport class Dot extends Merge {\n  /** @nocollapse */\n  static className = 'Dot';\n\n  private axes: number|[number, number];\n  private normalize: boolean;\n\n  constructor(args: DotLayerArgs) {\n    super(args);\n    this.axes = args.axes;\n    this.normalize = args.normalize == null ? false : args.normalize;\n    this.supportsMasking = true;\n    this.reshapeRequired = false;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = inputShape[0] as Shape;\n    const shape2 = inputShape[1] as Shape;\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    if (shape1[axes[0]] !== shape2[axes[1]]) {\n      throw new ValueError(\n          `Dimension incompatibility: ` +\n          `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n    }\n  }\n\n  protected override mergeFunction(inputs: Tensor[]): Tensor {\n    if (inputs.length !== 2) {\n      throw new ValueError(\n          'A `Dot` layer must be called on exactly 2 inputs, ' +\n          `but received ${inputs.length} input(s).`);\n    }\n\n    let x1 = inputs[0];\n    let x2 = inputs[1];\n    let axes: [number, number];\n    if (!Array.isArray(this.axes)) {\n      axes = [\n        interpretAxis(this.axes, x1.shape.length),\n        interpretAxis(this.axes, x2.shape.length)\n      ];\n    } else {\n      axes = this.axes.map(\n                 (axis, i) => interpretAxis(\n                     axis, inputs[i].shape.length)) as [number, number];\n    }\n    if (this.normalize) {\n      x1 = l2Normalize(x1, axes[0]);\n      x2 = l2Normalize(x2, axes[1]);\n    }\n    return batchDot(x1, x2, axes);\n  }\n\n  private interpretAxes(shape1: Shape, shape2: Shape): number[] {\n    let axes: number[];\n    if (!Array.isArray(this.axes)) {\n      // `this.axes` is a single integer.\n      axes = [\n        interpretAxis(this.axes, shape1.length),\n        interpretAxis(this.axes, shape2.length)\n      ];\n    } else {\n      // `this.axes` is an Array of integers.\n      axes = this.axes;\n    }\n    return axes;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    tfc.util.assert(\n        Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]),\n        () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n    const shape1 = (inputShape[0] as Shape).slice();\n    const shape2 = (inputShape[1] as Shape).slice();\n    if (shape1.length > 3 || shape2.length > 3) {\n      throw new NotImplementedError(\n          'Dot layer does not support tensors of 4D or higher rank yet.');\n    }\n\n    const axes = this.interpretAxes(shape1, shape2);\n    shape1.splice(axes[0], 1);\n    shape2.splice(axes[1], 1);\n    shape2.splice(0, 1);\n    const outputShape = shape1.concat(shape2);\n    if (outputShape.length === 1) {\n      outputShape.push(1);\n    }\n    return outputShape;\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    return null;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'axes': this.axes,\n      'normalize': this.normalize\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dot);\n\n// TODO(cais): Add functional interfaces for the merge layers.\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}