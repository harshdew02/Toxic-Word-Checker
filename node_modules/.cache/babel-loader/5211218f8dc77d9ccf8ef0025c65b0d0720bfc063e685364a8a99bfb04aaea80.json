{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nvar addImplCPU = shared.addImpl,\n  bincountImplCPU = shared.bincountImpl,\n  bincountReduceImplCPU = shared.bincountReduceImpl,\n  castImplCPU = shared.castImpl,\n  ceilImplCPU = shared.ceilImpl,\n  concatImplCPU = shared.concatImpl,\n  equalImplCPU = shared.equalImpl,\n  expImplCPU = shared.expImpl,\n  expm1ImplCPU = shared.expm1Impl,\n  floorImplCPU = shared.floorImpl,\n  gatherNdImplCPU = shared.gatherNdImpl,\n  gatherV2ImplCPU = shared.gatherV2Impl,\n  greaterImplCPU = shared.greaterImpl,\n  greaterEqualImplCPU = shared.greaterEqualImpl,\n  lessImplCPU = shared.lessImpl,\n  lessEqualImplCPU = shared.lessEqualImpl,\n  linSpaceImplCPU = shared.linSpaceImpl,\n  logImplCPU = shared.logImpl,\n  maxImplCPU = shared.maxImpl,\n  maximumImplCPU = shared.maximumImpl,\n  minimumImplCPU = shared.minimumImpl,\n  multiplyImplCPU = shared.multiplyImpl,\n  negImplCPU = shared.negImpl,\n  notEqualImplCPU = shared.notEqualImpl,\n  prodImplCPU = shared.prodImpl,\n  raggedGatherImplCPU = shared.raggedGatherImpl,\n  raggedRangeImplCPU = shared.raggedRangeImpl,\n  raggedTensorToTensorImplCPU = shared.raggedTensorToTensorImpl,\n  rangeImplCPU = shared.rangeImpl,\n  rsqrtImplCPU = shared.rsqrtImpl,\n  scatterImplCPU = shared.scatterImpl,\n  sigmoidImplCPU = shared.sigmoidImpl,\n  simpleAbsImplCPU = shared.simpleAbsImpl,\n  sliceImplCPU = shared.sliceImpl,\n  sparseFillEmptyRowsImplCPU = shared.sparseFillEmptyRowsImpl,\n  sparseReshapeImplCPU = shared.sparseReshapeImpl,\n  sparseSegmentReductionImplCPU = shared.sparseSegmentReductionImpl,\n  sqrtImplCPU = shared.sqrtImpl,\n  stridedSliceImplCPU = shared.stridedSliceImpl,\n  stringNGramsImplCPU = shared.stringNGramsImpl,\n  stringSplitImplCPU = shared.stringSplitImpl,\n  stringToHashBucketFastImplCPU = shared.stringToHashBucketFastImpl,\n  subImplCPU = shared.subImpl,\n  tileImplCPU = shared.tileImpl,\n  topKImplCPU = shared.topKImpl,\n  transposeImplCPU = shared.transposeImpl,\n  uniqueImplCPU = shared.uniqueImpl;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, castImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, raggedGatherImplCPU, raggedRangeImplCPU, raggedTensorToTensorImplCPU, scatterImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU };","map":{"version":3,"mappings":"AACA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA,OAAO,KAAKA,MAAM,MAAM,0CAA0C;AAQlE,IACWC,UAAU,GA+CjBD,MAAM,CA/CRE,OAAO;EACOC,eAAe,GA8C3BH,MAAM,CA9CRI,YAAY;EACQC,qBAAqB,GA6CvCL,MAAM,CA7CRM,kBAAkB;EACRC,WAAW,GA4CnBP,MAAM,CA5CRQ,QAAQ;EACEC,WAAW,GA2CnBT,MAAM,CA3CRU,QAAQ;EACIC,aAAa,GA0CvBX,MAAM,CA1CRY,UAAU;EACCC,YAAY,GAyCrBb,MAAM,CAzCRc,SAAS;EACAC,UAAU,GAwCjBf,MAAM,CAxCRgB,OAAO;EACIC,YAAY,GAuCrBjB,MAAM,CAvCRkB,SAAS;EACEC,YAAY,GAsCrBnB,MAAM,CAtCRoB,SAAS;EACKC,eAAe,GAqC3BrB,MAAM,CArCRsB,YAAY;EACEC,eAAe,GAoC3BvB,MAAM,CApCRwB,YAAY;EACCC,cAAc,GAmCzBzB,MAAM,CAnCR0B,WAAW;EACOC,mBAAmB,GAkCnC3B,MAAM,CAlCR4B,gBAAgB;EACNC,WAAW,GAiCnB7B,MAAM,CAjCR8B,QAAQ;EACOC,gBAAgB,GAgC7B/B,MAAM,CAhCRgC,aAAa;EACCC,eAAe,GA+B3BjC,MAAM,CA/BRkC,YAAY;EACHC,UAAU,GA8BjBnC,MAAM,CA9BRoC,OAAO;EACEC,UAAU,GA6BjBrC,MAAM,CA7BRsC,OAAO;EACMC,cAAc,GA4BzBvC,MAAM,CA5BRwC,WAAW;EACEC,cAAc,GA2BzBzC,MAAM,CA3BR0C,WAAW;EACGC,eAAe,GA0B3B3C,MAAM,CA1BR4C,YAAY;EACHC,UAAU,GAyBjB7C,MAAM,CAzBR8C,OAAO;EACOC,eAAe,GAwB3B/C,MAAM,CAxBRgD,YAAY;EACFC,WAAW,GAuBnBjD,MAAM,CAvBRkD,QAAQ;EACUC,mBAAmB,GAsBnCnD,MAAM,CAtBRoD,gBAAgB;EACCC,kBAAkB,GAqBjCrD,MAAM,CArBRsD,eAAe;EACWC,2BAA2B,GAoBnDvD,MAAM,CApBRwD,wBAAwB;EACbC,YAAY,GAmBrBzD,MAAM,CAnBR0D,SAAS;EACEC,YAAY,GAkBrB3D,MAAM,CAlBR4D,SAAS;EACIC,cAAc,GAiBzB7D,MAAM,CAjBR8D,WAAW;EACEC,cAAc,GAgBzB/D,MAAM,CAhBRgE,WAAW;EACIC,gBAAgB,GAe7BjE,MAAM,CAfRkE,aAAa;EACFC,YAAY,GAcrBnE,MAAM,CAdRoE,SAAS;EACgBC,0BAA0B,GAajDrE,MAAM,CAbRsE,uBAAuB;EACJC,oBAAoB,GAYrCvE,MAAM,CAZRwE,iBAAiB;EACWC,6BAA6B,GAWvDzE,MAAM,CAXR0E,0BAA0B;EAChBC,WAAW,GAUnB3E,MAAM,CAVR4E,QAAQ;EACUC,mBAAmB,GASnC7E,MAAM,CATR8E,gBAAgB;EACEC,mBAAmB,GAQnC/E,MAAM,CARRgF,gBAAgB;EACCC,kBAAkB,GAOjCjF,MAAM,CAPRkF,eAAe;EACaC,6BAA6B,GAMvDnF,MAAM,CANRoF,0BAA0B;EACjBC,UAAU,GAKjBrF,MAAM,CALRsF,OAAO;EACGC,WAAW,GAInBvF,MAAM,CAJRwF,QAAQ;EACEC,WAAW,GAGnBzF,MAAM,CAHR0F,QAAQ;EACOC,gBAAgB,GAE7B3F,MAAM,CAFR4F,aAAa;EACDC,aAAa,GACvB7F,MAAM,CADR8F,UAAU;AAGZ,SACE7F,UAAU,EACVE,eAAe,EACfE,qBAAqB,EACrBE,WAAW,EACXE,WAAW,EACXE,aAAa,EACbE,YAAY,EACZE,UAAU,EACVE,YAAY,EACZE,YAAY,EACZE,eAAe,EACfE,eAAe,EACfI,mBAAmB,EACnBF,cAAc,EACdM,gBAAgB,EAChBF,WAAW,EACXI,eAAe,EACfE,UAAU,EACVE,UAAU,EACVE,cAAc,EACdE,cAAc,EACdE,eAAe,EACfE,UAAU,EACVE,eAAe,EACfE,WAAW,EACXE,mBAAmB,EACnBE,kBAAkB,EAClBE,2BAA2B,EAC3BM,cAAc,EACdE,cAAc,EACdE,gBAAgB,EAChBE,YAAY,EACZE,0BAA0B,EAC1BE,oBAAoB,EACpBE,6BAA6B,EAC7BE,WAAW,EACXE,mBAAmB,EACnBE,mBAAmB,EACnBE,kBAAkB,EAClBE,6BAA6B,EAC7BE,UAAU,EACV5B,YAAY,EACZE,YAAY,EACZ4B,WAAW,EACXE,WAAW,EACXE,gBAAgB,EAChBE,aAAa","names":["shared","addImplCPU","addImpl","bincountImplCPU","bincountImpl","bincountReduceImplCPU","bincountReduceImpl","castImplCPU","castImpl","ceilImplCPU","ceilImpl","concatImplCPU","concatImpl","equalImplCPU","equalImpl","expImplCPU","expImpl","expm1ImplCPU","expm1Impl","floorImplCPU","floorImpl","gatherNdImplCPU","gatherNdImpl","gatherV2ImplCPU","gatherV2Impl","greaterImplCPU","greaterImpl","greaterEqualImplCPU","greaterEqualImpl","lessImplCPU","lessImpl","lessEqualImplCPU","lessEqualImpl","linSpaceImplCPU","linSpaceImpl","logImplCPU","logImpl","maxImplCPU","maxImpl","maximumImplCPU","maximumImpl","minimumImplCPU","minimumImpl","multiplyImplCPU","multiplyImpl","negImplCPU","negImpl","notEqualImplCPU","notEqualImpl","prodImplCPU","prodImpl","raggedGatherImplCPU","raggedGatherImpl","raggedRangeImplCPU","raggedRangeImpl","raggedTensorToTensorImplCPU","raggedTensorToTensorImpl","rangeImplCPU","rangeImpl","rsqrtImplCPU","rsqrtImpl","scatterImplCPU","scatterImpl","sigmoidImplCPU","sigmoidImpl","simpleAbsImplCPU","simpleAbsImpl","sliceImplCPU","sliceImpl","sparseFillEmptyRowsImplCPU","sparseFillEmptyRowsImpl","sparseReshapeImplCPU","sparseReshapeImpl","sparseSegmentReductionImplCPU","sparseSegmentReductionImpl","sqrtImplCPU","sqrtImpl","stridedSliceImplCPU","stridedSliceImpl","stringNGramsImplCPU","stringNGramsImpl","stringSplitImplCPU","stringSplitImpl","stringToHashBucketFastImplCPU","stringToHashBucketFastImpl","subImplCPU","subImpl","tileImplCPU","tileImpl","topKImplCPU","topKImpl","transposeImplCPU","transposeImpl","uniqueImplCPU","uniqueImpl"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernel_utils\\shared.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}