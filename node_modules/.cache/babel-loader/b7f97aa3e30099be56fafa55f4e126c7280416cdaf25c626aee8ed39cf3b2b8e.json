{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport var Im2ColPackedProgram = /*#__PURE__*/_createClass(function Im2ColPackedProgram(outputShape, convInfo) {\n  _classCallCheck(this, Im2ColPackedProgram);\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'inputShape',\n    type: 'ivec4'\n  }, {\n    name: 'pad',\n    type: 'ivec2'\n  }, {\n    name: 'stride',\n    type: 'ivec2'\n  }, {\n    name: 'dilation',\n    type: 'ivec2'\n  }, {\n    name: 'inChannels',\n    type: 'int'\n  }, {\n    name: 'itemsPerBlockRow',\n    type: 'int'\n  }, {\n    name: 'outWidth',\n    type: 'int'\n  }];\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var dataFormat = convInfo.dataFormat;\n  var glsl = getGlslDifferences();\n  var isChannelsLast = dataFormat === 'channelsLast';\n  var rowDim = isChannelsLast ? 1 : 2;\n  var colDim = isChannelsLast ? 2 : 3;\n  var boundsCheckingSnippet = this.enableShapeUniforms ? 'if(blockIndex < outShape[2] && pos < outShape[1]) {' : \"if(blockIndex < \".concat(outputShape[2], \" && pos < \").concat(outputShape[1], \") {\");\n  var unrolled = \"\";\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      unrolled += \"\\n          blockIndex = rc.z + \".concat(col, \";\\n          pos = rc.y + \").concat(row, \";\\n\\n          \").concat(boundsCheckingSnippet, \"\\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\\n\\n            if(d0 < inputShape[\").concat(rowDim, \"] && d0 >= 0) {\\n              // Use custom imod instead mod. On Intel GPU, mod may generate\\n              // unexpected value.\\n              // https://github.com/tensorflow/tfjs/issues/5447\\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\\n                  inChannels);\\n\\n              if(d1 < inputShape[\").concat(colDim, \"] && d1 >= 0) {\\n\\n                ch = imod(pos, inChannels);\\n\\n                if (\").concat(isChannelsLast, \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(rc.x, d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(rc.x, ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");\n    }\n  }\n  this.userCode = \"\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled, \"\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,kBAAkB,QAAO,gBAAgB;AACjD,SAAsBC,gBAAgB,QAAO,cAAc;AAE3D,WAAaC,mBAAmB,6BAiB9B,6BAAYC,WAAqB,EAAEC,QAAiC;EAAA;EAhBpE,kBAAa,GAAG,CAAC,GAAG,CAAC;EACrB,iBAAY,GAAG,IAAI;EACnB,iBAAY,GAAG,IAAI;EAInB,mBAAc,GAAG,CACf;IAACC,IAAI,EAAE,YAAY;IAAEC,IAAI,EAAE;EAAgB,CAAE,EAC7C;IAACD,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAgB,CAAE,EACtC;IAACD,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAgB,CAAE,EACzC;IAACD,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAgB,CAAE,EAC3C;IAACD,IAAI,EAAE,YAAY;IAAEC,IAAI,EAAE;EAAc,CAAE,EAC3C;IAACD,IAAI,EAAE,kBAAkB;IAAEC,IAAI,EAAE;EAAc,CAAE,EACjD;IAACD,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAc,CAAE,CAC1C;EAGC,IAAI,CAACH,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACI,mBAAmB,GAAGN,gBAAgB,CAAC,IAAI,CAACE,WAAW,CAACK,MAAM,CAAC;EACpE,IAAOC,UAAU,GAAIL,QAAQ,CAAtBK,UAAU;EACjB,IAAMC,IAAI,GAAGV,kBAAkB,EAAE;EACjC,IAAMW,cAAc,GAAGF,UAAU,KAAK,cAAc;EACpD,IAAMG,MAAM,GAAGD,cAAc,GAAG,CAAC,GAAG,CAAC;EACrC,IAAME,MAAM,GAAGF,cAAc,GAAG,CAAC,GAAG,CAAC;EAErC,IAAMG,qBAAqB,GAAG,IAAI,CAACP,mBAAmB,GAClD,qDAAqD,6BAClCJ,WAAW,CAAC,CAAC,CAAC,uBAAaA,WAAW,CAAC,CAAC,CAAC,QAAK;EACrE,IAAIY,QAAQ,KAAK;EAEjB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;IACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;MACjCF,QAAQ,8CACgBE,GAAG,uCACVD,GAAG,4BAEhBF,qBAAqB,4LAIAF,MAAM,yaAQJC,MAAM,mGAInBF,cAAc,wFAETK,GAAG,GAAG,CAAC,GAAGC,GAAG,wOAKbD,GAAG,GAAG,CAAC,GAAGC,GAAG,wMAO/B;;;EAIL,IAAI,CAACC,QAAQ,8MASPH,QAAQ,yBAERL,IAAI,CAACS,MAAM,8BAEhB;AACH,CAAC","names":["getGlslDifferences","useShapeUniforms","Im2ColPackedProgram","outputShape","convInfo","name","type","enableShapeUniforms","length","dataFormat","glsl","isChannelsLast","rowDim","colDim","boundsCheckingSnippet","unrolled","row","col","userCode","output"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\im2col_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec4' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n        `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}