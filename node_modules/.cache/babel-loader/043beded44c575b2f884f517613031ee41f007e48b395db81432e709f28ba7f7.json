{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport var RMSPropOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(RMSPropOptimizer, _Optimizer);\n  var _super = _createSuper(RMSPropOptimizer);\n  function RMSPropOptimizer(learningRate) {\n    var _this;\n    var decay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.9;\n    var momentum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var centered = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    _classCallCheck(this, RMSPropOptimizer);\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.decay = decay;\n    _this.momentum = momentum;\n    _this.epsilon = epsilon;\n    _this.accumulatedMeanSquares = [];\n    _this.accumulatedMoments = [];\n    _this.accumulatedMeanGrads = [];\n    _this.centered = centered;\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n    if (learningRate == null) {\n      throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");\n    }\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(RMSPropOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n        var trainable = false;\n        if (_this2.accumulatedMeanSquares[i] == null) {\n          _this2.accumulatedMeanSquares[i] = {\n            originalName: \"\".concat(name, \"/rms\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n        if (_this2.accumulatedMoments[i] == null) {\n          _this2.accumulatedMoments[i] = {\n            originalName: \"\".concat(name, \"/momentum\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n        if (_this2.accumulatedMeanGrads[i] == null && _this2.centered) {\n          _this2.accumulatedMeanGrads[i] = {\n            originalName: \"\".concat(name, \"/mg\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n        var accumulatedMeanSquare = _this2.accumulatedMeanSquares[i].variable;\n        var accumulatedMoments = _this2.accumulatedMoments[i].variable;\n        tidy(function () {\n          var newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, _this2.decay), mul(square(gradient), 1 - _this2.decay));\n          if (_this2.centered) {\n            var accumulatedMeanGrad = _this2.accumulatedMeanGrads[i].variable;\n            // Centered gradient\n            var newAccumulatedMeanGrad = add(mul(accumulatedMeanGrad, _this2.decay), mul(gradient, 1 - _this2.decay));\n            var gradContribution = div(mul(gradient, _this2.learningRate), sqrt(sub(newAccumulatedMeanSquare, add(square(newAccumulatedMeanGrad), _this2.epsilon))));\n            var newAccumulatedMoments = add(mul(accumulatedMoments, _this2.momentum), gradContribution);\n            accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n            accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n            accumulatedMoments.assign(newAccumulatedMoments);\n            var newValue = sub(value, newAccumulatedMoments);\n            value.assign(newValue);\n          } else {\n            // Plain gradient\n            var _newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, _this2.decay), mul(square(gradient), 1 - _this2.decay));\n            var _newAccumulatedMoments = add(mul(accumulatedMoments, _this2.momentum), div(mul(gradient, _this2.learningRate), sqrt(add(_newAccumulatedMeanSquare, _this2.epsilon))));\n            accumulatedMeanSquare.assign(_newAccumulatedMeanSquare);\n            accumulatedMoments.assign(_newAccumulatedMoments);\n            var _newValue = sub(value, _newAccumulatedMoments);\n            value.assign(_newValue);\n          }\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedMeanSquares != null) {\n        _dispose(this.accumulatedMeanSquares.map(function (v) {\n          return v.variable;\n        }));\n      }\n      if (this.accumulatedMeanGrads != null && this.centered) {\n        _dispose(this.accumulatedMeanGrads.map(function (v) {\n          return v.variable;\n        }));\n      }\n      if (this.accumulatedMoments != null) {\n        _dispose(this.accumulatedMoments.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var variables;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Order matters for Python compatibility.\n              variables = [].concat(_toConsumableArray(this.accumulatedMeanSquares), _toConsumableArray(this.accumulatedMoments));\n              if (this.centered) {\n                variables.push.apply(variables, _toConsumableArray(this.accumulatedMeanGrads));\n              }\n              _context.next = 4;\n              return this.saveIterations();\n            case 4:\n              _context.t0 = _context.sent;\n              return _context.abrupt(\"return\", [_context.t0].concat(variables.map(function (v) {\n                return {\n                  name: v.originalName,\n                  tensor: v.variable\n                };\n              })));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(weightValues) {\n        var variableCount, trainable;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.extractIterations(weightValues);\n            case 2:\n              weightValues = _context2.sent;\n              variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n              trainable = false;\n              this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n              this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n              if (this.centered) {\n                this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n              }\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'decay': this.decay,\n        'momentum': this.momentum,\n        'epsilon': this.epsilon,\n        'centered': this.centered\n      };\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"className\",\n    get: function get() {\n      // Name matters for Python compatibility.\n      // This is a getter instead of a property because when it's a property, it\n      // prevents the entire class from being tree-shaken.\n      return 'RMSProp';\n    }\n  }, {\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);\n    }\n  }]);\n  return RMSPropOptimizer;\n}(Optimizer);","map":{"version":3,"mappings":"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","names":["ENGINE","dispose","tidy","add","div","mul","sqrt","square","sub","zerosLike","Optimizer","RMSPropOptimizer","learningRate","decay","momentum","epsilon","centered","backend","Error","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","forEach","i","value","registeredVariables","trainable","accumulatedMeanSquares","originalName","variable","accumulatedMoments","accumulatedMeanGrads","gradient","tensor","accumulatedMeanSquare","newAccumulatedMeanSquare","accumulatedMeanGrad","newAccumulatedMeanGrad","gradContribution","newAccumulatedMoments","assign","newValue","incrementIterations","v","variables","push","saveIterations","concat","weightValues","extractIterations","variableCount","length","slice","cls","config"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\optimizers\\rmsprop_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'RMSProp';\n  }\n  private centered: boolean;\n\n  private accumulatedMeanSquares: OptimizerVariable[] = [];\n  private accumulatedMoments: OptimizerVariable[] = [];\n  private accumulatedMeanGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected decay = 0.9,\n      protected momentum = 0.0, protected epsilon: number = null,\n      centered = false) {\n    super();\n\n    this.centered = centered;\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n    if (learningRate == null) {\n      throw new Error(`learningRate for RMSPropOptimizer must be defined.`);\n    }\n  }\n\n  applyGradients(variableGradients: NamedTensorMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      const trainable = false;\n      if (this.accumulatedMeanSquares[i] == null) {\n        this.accumulatedMeanSquares[i] = {\n          originalName: `${name}/rms`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMoments[i] == null) {\n        this.accumulatedMoments[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      if (this.accumulatedMeanGrads[i] == null && this.centered) {\n        this.accumulatedMeanGrads[i] = {\n          originalName: `${name}/mg`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;\n      const accumulatedMoments = this.accumulatedMoments[i].variable;\n      tidy(() => {\n        const newAccumulatedMeanSquare =\n            add(mul(accumulatedMeanSquare, this.decay),\n                mul(square(gradient), 1 - this.decay));\n\n        if (this.centered) {\n          const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;\n          // Centered gradient\n          const newAccumulatedMeanGrad =\n              add(mul(accumulatedMeanGrad, this.decay),\n                  mul(gradient, 1 - this.decay));\n\n          const gradContribution =\n              div(mul(gradient, this.learningRate),\n                  sqrt(\n                      sub(newAccumulatedMeanSquare,\n                          add(square(newAccumulatedMeanGrad), this.epsilon))));\n          const newAccumulatedMoments =\n              add(mul(accumulatedMoments, this.momentum), gradContribution);\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          // Plain gradient\n          const newAccumulatedMeanSquare =\n              add(mul(accumulatedMeanSquare, this.decay),\n                  mul(square(gradient), 1 - this.decay));\n\n          const newAccumulatedMoments =\n              add(mul(accumulatedMoments, this.momentum),\n                  div(mul(gradient, this.learningRate),\n                      sqrt(add(newAccumulatedMeanSquare, this.epsilon))));\n\n          accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n          accumulatedMoments.assign(newAccumulatedMoments);\n\n          const newValue = sub(value, newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    if (this.accumulatedMeanSquares != null) {\n      dispose(this.accumulatedMeanSquares.map(v => v.variable));\n    }\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      dispose(this.accumulatedMeanGrads.map(v => v.variable));\n    }\n    if (this.accumulatedMoments != null) {\n      dispose(this.accumulatedMoments.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedMeanSquares, ...this.accumulatedMoments];\n    if (this.centered) {\n      variables.push(...this.accumulatedMeanGrads);\n    }\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const variableCount =\n        this.centered ? weightValues.length / 3 : weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedMeanSquares =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedMoments =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n    if (this.centered) {\n      this.accumulatedMeanGrads =\n          weightValues.slice(variableCount * 2, variableCount * 3)\n              .map(v => ({\n                     originalName: v.name,\n                     variable: v.tensor.variable(trainable)\n                   }));\n    }\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'decay': this.decay,\n      'momentum': this.momentum,\n      'epsilon': this.epsilon,\n      'centered': this.centered\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['decay'], config['momentum'],\n        config['epsilon'], config['centered']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}