{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var indices = inputs.indices,\n    updates = inputs.updates;\n  var shape = attrs.shape;\n  var _backend_util$calcula = backend_util.calculateShapes(updates, indices, shape),\n    sliceRank = _backend_util$calcula.sliceRank,\n    numUpdates = _backend_util$calcula.numUpdates,\n    sliceSize = _backend_util$calcula.sliceSize,\n    strides = _backend_util$calcula.strides,\n    outputSize = _backend_util$calcula.outputSize;\n  var flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n  var flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  var flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend: backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  var defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n  var program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  var res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n  var reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n  return reshaped;\n}\nexport var scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA4BC,SAAS,QAAoD,uBAAuB;AAGpI,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,SAAS,CAACC,IAIzB;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,OAAO,GAAaH,MAAM,CAA1BG,OAAO;IAAEC,OAAO,GAAIJ,MAAM,CAAjBI,OAAO;EACvB,IAAOC,KAAK,GAAIH,KAAK,CAAdG,KAAK;EAEZ,4BACIX,YAAY,CAACY,eAAe,CAACF,OAAO,EAAED,OAAO,EAAEE,KAAK,CAAC;IADlDE,SAAS,yBAATA,SAAS;IAAEC,UAAU,yBAAVA,UAAU;IAAEC,SAAS,yBAATA,SAAS;IAAEC,OAAO,yBAAPA,OAAO;IAAEC,UAAU,yBAAVA,UAAU;EAG5D,IAAMC,YAAY,GAAG,CAACD,UAAU,GAAGF,SAAS,EAAEA,SAAS,CAAC;EAExD,IAAIE,UAAU,KAAK,CAAC,EAAE;IACpB,OAAOV,OAAO,CAACY,cAAc,CAACR,KAAK,EAAEF,OAAO,CAACW,KAAK,CAAC;;EAGrD,IAAMC,cAAc,GAAGlB,OAAO,CAC1B;IAACG,MAAM,EAAE;MAACgB,CAAC,EAAEb;IAAO,CAAC;IAAEF,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAAE;MAACG,KAAK,EAAE,CAACG,UAAU,EAAED,SAAS;IAAC;EAAC,CAAC,CAAC;EAC7E,IAAMU,QAAQ,GAAGpB,OAAO,CACpB;IAACG,MAAM,EAAE;MAACgB,CAAC,EAAEZ;IAAO,CAAC;IAAEH,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAAE;MAACG,KAAK,EAAE,CAACG,UAAU,EAAEC,SAAS;IAAC;EAAC,CAAC,CAAC;EAE7E,IAAMS,YAAY,GAAGjB,OAAO,CAACY,cAAc,CACvC,EAAE,EAAE,SAAS,EAAE,IAAIM,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;EAC5C,IAAMC,OAAO,GAAG,IAAIxB,cAAc,CAC9BY,UAAU,EAAED,SAAS,EAAEQ,cAAc,CAACV,KAAK,CAACgB,MAAM,EAAEJ,QAAQ,CAACZ,KAAK,CAACgB,MAAM,EACzEX,OAAO,EAAEE,YAAY,CAAC;EAC1B,IAAMU,GAAG,GAAGrB,OAAO,CAACsB,eAAe,CAC/BH,OAAO,EAAE,CAACH,QAAQ,EAAEF,cAAc,EAAEG,YAAY,CAAC,EAAED,QAAQ,CAACH,KAAK,CAAC;EAEtE,IAAMU,QAAQ,GAAG3B,OAAO,CAAC;IAACG,MAAM,EAAE;MAACgB,CAAC,EAAEM;IAAG,CAAC;IAAErB,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAAE;MAACG,KAAK,EAALA;IAAK;EAAC,CAAC,CAAC;EAErEJ,OAAO,CAACwB,6BAA6B,CAACV,cAAc,CAAC;EACrDd,OAAO,CAACwB,6BAA6B,CAACR,QAAQ,CAAC;EAC/ChB,OAAO,CAACwB,6BAA6B,CAACH,GAAG,CAAC;EAC1CrB,OAAO,CAACwB,6BAA6B,CAACP,YAAY,CAAC;EAEnD,OAAOM,QAAQ;AACjB;AAEA,OAAO,IAAME,eAAe,GAAiB;EAC3CC,UAAU,EAAEhC,SAAS;EACrBiC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE/B;CACb","names":["backend_util","ScatterNd","ScatterProgram","reshape","scatterNd","args","inputs","backend","attrs","indices","updates","shape","calculateShapes","sliceRank","numUpdates","sliceSize","strides","outputSize","flattenShape","makeTensorInfo","dtype","flattenIndices","x","flattenX","defaultValue","Float32Array","program","length","res","runWebGLProgram","reshaped","disposeIntermediateTensorInfo","scatterNdConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\ScatterNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}