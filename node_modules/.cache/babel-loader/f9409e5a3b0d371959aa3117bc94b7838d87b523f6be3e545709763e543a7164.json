{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, SymbolicTensor } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, Initializer, Ones, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes } from '../utils/types_utils';\nimport { batchGetValue, batchSetValue } from '../variables';\nimport { deserialize } from './serialization';\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(inputs, initialState, constants, numConstants) {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError('When inputs is an array, neither initialState or constants ' + 'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n  function toListOrNull(x) {\n    if (x == null || Array.isArray(x)) {\n      return x;\n    } else {\n      return [x];\n    }\n  }\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n  return {\n    inputs: inputs,\n    initialState: initialState,\n    constants: constants\n  };\n}\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(stepFunction, inputs, initialStates) {\n  var goBackwards = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var mask = arguments.length > 4 ? arguments[4] : undefined;\n  var constants = arguments.length > 5 ? arguments[5] : undefined;\n  var unroll = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  var needPerStepOutputs = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  return tfc.tidy(function () {\n    var ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(\"Input should be at least 3D, but is \".concat(ndim, \"D.\"));\n    }\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    var axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n    if (constants != null) {\n      throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' + 'constants yet.');\n    }\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn('Backend rnn(): the unroll = true option is not applicable to the ' + 'imperative deeplearn.js backend.');\n    }\n    if (mask != null) {\n      mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n    var perStepOutputs = [];\n    var lastOutput;\n    var states = initialStates;\n    var timeSteps = inputs.shape[0];\n    var perStepInputs = tfc.unstack(inputs);\n    var perStepMasks;\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n    var _loop = function _loop(t) {\n      var currentInput = perStepInputs[t];\n      var stepOutputs = tfc.tidy(function () {\n        return stepFunction(currentInput, states);\n      });\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        var maskedOutputs = tfc.tidy(function () {\n          var stepMask = perStepMasks[t];\n          var negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          var output = tfc.add(tfc.mul(stepOutputs[0], stepMask), tfc.mul(states[0], negStepMask));\n          var newStates = states.map(function (state, i) {\n            return tfc.add(tfc.mul(stepOutputs[1][i], stepMask), tfc.mul(state, negStepMask));\n          });\n          return {\n            output: output,\n            newStates: newStates\n          };\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    };\n    for (var t = 0; t < timeSteps; ++t) {\n      _loop(t);\n    }\n    var outputs;\n    if (needPerStepOutputs) {\n      var axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states];\n  });\n}\nexport var RNN = /*#__PURE__*/function (_Layer) {\n  _inherits(RNN, _Layer);\n  var _super = _createSuper(RNN);\n  function RNN(args) {\n    var _this;\n    _classCallCheck(this, RNN);\n    _this = _super.call(this, args);\n    var cell;\n    if (args.cell == null) {\n      throw new ValueError('cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({\n        cells: args.cell\n      });\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' + 'integers, one integer per RNN state).');\n    }\n    _this.cell = cell;\n    _this.returnSequences = args.returnSequences == null ? false : args.returnSequences;\n    _this.returnState = args.returnState == null ? false : args.returnState;\n    _this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    _this._stateful = args.stateful == null ? false : args.stateful;\n    _this.unroll = args.unroll == null ? false : args.unroll;\n    _this.supportsMasking = true;\n    _this.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    _this.stateSpec = null;\n    _this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    _this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n    _this.keptStates = [];\n    return _this;\n  }\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  _createClass(RNN, [{\n    key: \"getStates\",\n    value: function getStates() {\n      if (this.states_ == null) {\n        var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n        return math_utils.range(0, numStates).map(function (x) {\n          return null;\n        });\n      } else {\n        return this.states_;\n      }\n    }\n    // Porting Note: This is the equivalent of the `RNN.states` property setter in\n    //   PyKeras.\n  }, {\n    key: \"setStates\",\n    value: function setStates(states) {\n      this.states_ = states;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      if (isArrayOfShapes(inputShape)) {\n        inputShape = inputShape[0];\n      }\n      inputShape = inputShape;\n      // TODO(cais): Remove the casting once stacked RNN cells become supported.\n      var stateSize = this.cell.stateSize;\n      if (!Array.isArray(stateSize)) {\n        stateSize = [stateSize];\n      }\n      var outputDim = stateSize[0];\n      var outputShape;\n      if (this.returnSequences) {\n        outputShape = [inputShape[0], inputShape[1], outputDim];\n      } else {\n        outputShape = [inputShape[0], outputDim];\n      }\n      if (this.returnState) {\n        var stateShape = [];\n        var _iterator = _createForOfIteratorHelper(stateSize),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var dim = _step.value;\n            stateShape.push([inputShape[0], dim]);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return [outputShape].concat(stateShape);\n      } else {\n        return outputShape;\n      }\n    }\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      var _this2 = this;\n      return tfc.tidy(function () {\n        if (Array.isArray(mask)) {\n          mask = mask[0];\n        }\n        var outputMask = _this2.returnSequences ? mask : null;\n        if (_this2.returnState) {\n          var stateMask = _this2.states.map(function (s) {\n            return null;\n          });\n          return [outputMask].concat(stateMask);\n        } else {\n          return outputMask;\n        }\n      });\n    }\n    /**\n     * Get the current state tensors of the RNN.\n     *\n     * If the state hasn't been set, return an array of `null`s of the correct\n     * length.\n     */\n  }, {\n    key: \"states\",\n    get: function get() {\n      if (this.states_ == null) {\n        var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n        var output = [];\n        for (var i = 0; i < numStates; ++i) {\n          output.push(null);\n        }\n        return output;\n      } else {\n        return this.states_;\n      }\n    },\n    set: function set(s) {\n      this.states_ = s;\n    }\n  }, {\n    key: \"build\",\n    value: function build(inputShape) {\n      // Note inputShape will be an Array of Shapes of initial states and\n      // constants if these are passed in apply().\n      var constantShape = null;\n      if (this.numConstants != null) {\n        throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n      }\n      if (isArrayOfShapes(inputShape)) {\n        inputShape = inputShape[0];\n      }\n      inputShape = inputShape;\n      var batchSize = this.stateful ? inputShape[0] : null;\n      var inputDim = inputShape.slice(2);\n      this.inputSpec[0] = new InputSpec({\n        shape: [batchSize, null].concat(_toConsumableArray(inputDim))\n      });\n      // Allow cell (if RNNCell Layer) to build before we set or validate\n      // stateSpec.\n      var stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n      if (constantShape != null) {\n        throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n      } else {\n        this.cell.build(stepInputShape);\n      }\n      // Set or validate stateSpec.\n      var stateSize;\n      if (Array.isArray(this.cell.stateSize)) {\n        stateSize = this.cell.stateSize;\n      } else {\n        stateSize = [this.cell.stateSize];\n      }\n      if (this.stateSpec != null) {\n        if (!util.arraysEqual(this.stateSpec.map(function (spec) {\n          return spec.shape[spec.shape.length - 1];\n        }), stateSize)) {\n          throw new ValueError(\"An initialState was passed that is not compatible with \" + \"cell.stateSize. Received stateSpec=\".concat(this.stateSpec, \"; \") + \"However cell.stateSize is \".concat(this.cell.stateSize));\n        }\n      } else {\n        this.stateSpec = stateSize.map(function (dim) {\n          return new InputSpec({\n            shape: [null, dim]\n          });\n        });\n      }\n      if (this.stateful) {\n        this.resetStates();\n      }\n    }\n    /**\n     * Reset the state tensors of the RNN.\n     *\n     * If the `states` argument is `undefined` or `null`, will set the\n     * state tensor(s) of the RNN to all-zero tensors of the appropriate\n     * shape(s).\n     *\n     * If `states` is provided, will set the state tensors of the RNN to its\n     * value.\n     *\n     * @param states Optional externally-provided initial states.\n     * @param training Whether this call is done during training. For stateful\n     *   RNNs, this affects whether the old states are kept or discarded. In\n     *   particular, if `training` is `true`, the old states will be kept so\n     *   that subsequent backpropgataion through time (BPTT) may work properly.\n     *   Else, the old states will be discarded.\n     */\n  }, {\n    key: \"resetStates\",\n    value: function resetStates(states) {\n      var _this3 = this;\n      var training = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      tidy(function () {\n        if (!_this3.stateful) {\n          throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n        }\n        var batchSize = _this3.inputSpec[0].shape[0];\n        if (batchSize == null) {\n          throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \\n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');\n        }\n        // Initialize state if null.\n        if (_this3.states_ == null) {\n          if (Array.isArray(_this3.cell.stateSize)) {\n            _this3.states_ = _this3.cell.stateSize.map(function (dim) {\n              return tfc.zeros([batchSize, dim]);\n            });\n          } else {\n            _this3.states_ = [tfc.zeros([batchSize, _this3.cell.stateSize])];\n          }\n        } else if (states == null) {\n          // Dispose old state tensors.\n          tfc.dispose(_this3.states_);\n          // For stateful RNNs, fully dispose kept old states.\n          if (_this3.keptStates != null) {\n            tfc.dispose(_this3.keptStates);\n            _this3.keptStates = [];\n          }\n          if (Array.isArray(_this3.cell.stateSize)) {\n            _this3.states_ = _this3.cell.stateSize.map(function (dim) {\n              return tfc.zeros([batchSize, dim]);\n            });\n          } else {\n            _this3.states_[0] = tfc.zeros([batchSize, _this3.cell.stateSize]);\n          }\n        } else {\n          if (!Array.isArray(states)) {\n            states = [states];\n          }\n          if (states.length !== _this3.states_.length) {\n            throw new ValueError(\"Layer \".concat(_this3.name, \" expects \").concat(_this3.states_.length, \" state(s), \") + \"but it received \".concat(states.length, \" state value(s). Input \") + \"received: \".concat(states));\n          }\n          if (training === true) {\n            // Store old state tensors for complete disposal later, i.e., during\n            // the next no-arg call to this method. We do not dispose the old\n            // states immediately because that BPTT (among other things) require\n            // them.\n            _this3.keptStates.push(_this3.states_.slice());\n          } else {\n            tfc.dispose(_this3.states_);\n          }\n          for (var index = 0; index < _this3.states_.length; ++index) {\n            var value = states[index];\n            var dim = Array.isArray(_this3.cell.stateSize) ? _this3.cell.stateSize[index] : _this3.cell.stateSize;\n            var expectedShape = [batchSize, dim];\n            if (!util.arraysEqual(value.shape, expectedShape)) {\n              throw new ValueError(\"State \".concat(index, \" is incompatible with layer \").concat(_this3.name, \": \") + \"expected shape=\".concat(expectedShape, \", received shape=\").concat(value.shape));\n            }\n            _this3.states_[index] = value;\n          }\n        }\n        _this3.states_ = _this3.states_.map(function (state) {\n          return tfc.keep(state.clone());\n        });\n      });\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(inputs, kwargs) {\n      // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n      var initialState = kwargs == null ? null : kwargs['initialState'];\n      var constants = kwargs == null ? null : kwargs['constants'];\n      if (kwargs == null) {\n        kwargs = {};\n      }\n      var standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n      inputs = standardized.inputs;\n      initialState = standardized.initialState;\n      constants = standardized.constants;\n      // If any of `initial_state` or `constants` are specified and are\n      // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n      // the input_spec to include them.\n      var additionalInputs = [];\n      var additionalSpecs = [];\n      if (initialState != null) {\n        kwargs['initialState'] = initialState;\n        additionalInputs = additionalInputs.concat(initialState);\n        this.stateSpec = [];\n        var _iterator2 = _createForOfIteratorHelper(initialState),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var state = _step2.value;\n            this.stateSpec.push(new InputSpec({\n              shape: state.shape\n            }));\n          }\n          // TODO(cais): Use the following instead.\n          // this.stateSpec = initialState.map(state => new InputSpec({shape:\n          // state.shape}));\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        additionalSpecs = additionalSpecs.concat(this.stateSpec);\n      }\n      if (constants != null) {\n        kwargs['constants'] = constants;\n        additionalInputs = additionalInputs.concat(constants);\n        // TODO(cais): Add this.constantsSpec.\n        this.numConstants = constants.length;\n      }\n      var isTensor = additionalInputs[0] instanceof SymbolicTensor;\n      if (isTensor) {\n        // Compute full input spec, including state and constants.\n        var fullInput = [inputs].concat(additionalInputs);\n        var fullInputSpec = this.inputSpec.concat(additionalSpecs);\n        // Perform the call with temporarily replaced inputSpec.\n        var originalInputSpec = this.inputSpec;\n        this.inputSpec = fullInputSpec;\n        var output = _get(_getPrototypeOf(RNN.prototype), \"apply\", this).call(this, fullInput, kwargs);\n        this.inputSpec = originalInputSpec;\n        return output;\n      } else {\n        return _get(_getPrototypeOf(RNN.prototype), \"apply\", this).call(this, inputs, kwargs);\n      }\n    }\n    // tslint:disable-next-line:no-any\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this4 = this;\n      // Input shape: `[samples, time (padded with zeros), input_dim]`.\n      // Note that the .build() method of subclasses **must** define\n      // this.inputSpec and this.stateSpec owith complete input shapes.\n      return tidy(function () {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        inputs = getExactlyOneTensor(inputs);\n        if (initialState == null) {\n          if (_this4.stateful) {\n            initialState = _this4.states_;\n          } else {\n            initialState = _this4.getInitialState(inputs);\n          }\n        }\n        var numStates = Array.isArray(_this4.cell.stateSize) ? _this4.cell.stateSize.length : 1;\n        if (initialState.length !== numStates) {\n          throw new ValueError(\"RNN Layer has \".concat(numStates, \" state(s) but was passed \") + \"\".concat(initialState.length, \" initial state(s).\"));\n        }\n        if (_this4.unroll) {\n          console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n        }\n        var cellCallKwargs = {\n          training: training\n        };\n        // TODO(cais): Add support for constants.\n        var step = function step(inputs, states) {\n          // `inputs` and `states` are concatenated to form a single `Array` of\n          // `tf.Tensor`s as the input to `cell.call()`.\n          var outputs = _this4.cell.call([inputs].concat(states), cellCallKwargs);\n          // Marshall the return value into output and new states.\n          return [outputs[0], outputs.slice(1)];\n        };\n        // TODO(cais): Add support for constants.\n        var rnnOutputs = rnn(step, inputs, initialState, _this4.goBackwards, mask, null, _this4.unroll, _this4.returnSequences);\n        var lastOutput = rnnOutputs[0];\n        var outputs = rnnOutputs[1];\n        var states = rnnOutputs[2];\n        if (_this4.stateful) {\n          _this4.resetStates(states, training);\n        }\n        var output = _this4.returnSequences ? outputs : lastOutput;\n        // TODO(cais): Porperty set learning phase flag.\n        if (_this4.returnState) {\n          return [output].concat(states);\n        } else {\n          return output;\n        }\n      });\n    }\n  }, {\n    key: \"getInitialState\",\n    value: function getInitialState(inputs) {\n      var _this5 = this;\n      return tidy(function () {\n        // Build an all-zero tensor of shape [samples, outputDim].\n        // [Samples, timeSteps, inputDim].\n        var initialState = tfc.zeros(inputs.shape);\n        // [Samples].\n        initialState = tfc.sum(initialState, [1, 2]);\n        initialState = K.expandDims(initialState); // [Samples, 1].\n        if (Array.isArray(_this5.cell.stateSize)) {\n          return _this5.cell.stateSize.map(function (dim) {\n            return dim > 1 ? K.tile(initialState, [1, dim]) : initialState;\n          });\n        } else {\n          return _this5.cell.stateSize > 1 ? [K.tile(initialState, [1, _this5.cell.stateSize])] : [initialState];\n        }\n      });\n    }\n  }, {\n    key: \"trainableWeights\",\n    get: function get() {\n      if (!this.trainable) {\n        return [];\n      }\n      // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n      return this.cell.trainableWeights;\n    }\n  }, {\n    key: \"nonTrainableWeights\",\n    get: function get() {\n      // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n      if (!this.trainable) {\n        return this.cell.weights;\n      }\n      return this.cell.nonTrainableWeights;\n    }\n  }, {\n    key: \"setFastWeightInitDuringBuild\",\n    value: function setFastWeightInitDuringBuild(value) {\n      _get(_getPrototypeOf(RNN.prototype), \"setFastWeightInitDuringBuild\", this).call(this, value);\n      if (this.cell != null) {\n        this.cell.setFastWeightInitDuringBuild(value);\n      }\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(RNN.prototype), \"getConfig\", this).call(this);\n      var config = {\n        returnSequences: this.returnSequences,\n        returnState: this.returnState,\n        goBackwards: this.goBackwards,\n        stateful: this.stateful,\n        unroll: this.unroll\n      };\n      if (this.numConstants != null) {\n        config['numConstants'] = this.numConstants;\n      }\n      var cellConfig = this.cell.getConfig();\n      if (this.getClassName() === RNN.className) {\n        config['cell'] = {\n          'className': this.cell.getClassName(),\n          'config': cellConfig\n        };\n      }\n      // this order is necessary, to prevent cell name from replacing layer name\n      return Object.assign(Object.assign(Object.assign({}, cellConfig), baseConfig), config);\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      var customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var cellConfig = config['cell'];\n      var cell = deserialize(cellConfig, customObjects);\n      return new cls(Object.assign(config, {\n        cell: cell\n      }));\n    }\n  }]);\n  return RNN;\n}(Layer);\n/** @nocollapse */\nRNN.className = 'RNN';\nserialization.registerClass(RNN);\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport var RNNCell = /*#__PURE__*/function (_Layer2) {\n  _inherits(RNNCell, _Layer2);\n  var _super2 = _createSuper(RNNCell);\n  function RNNCell() {\n    _classCallCheck(this, RNNCell);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(RNNCell);\n}(Layer);\nexport var SimpleRNNCell = /*#__PURE__*/function (_RNNCell) {\n  _inherits(SimpleRNNCell, _RNNCell);\n  var _super3 = _createSuper(SimpleRNNCell);\n  function SimpleRNNCell(args) {\n    var _this6;\n    _classCallCheck(this, SimpleRNNCell);\n    _this6 = _super3.call(this, args);\n    _this6.DEFAULT_ACTIVATION = 'tanh';\n    _this6.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    _this6.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    _this6.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    _this6.units = args.units;\n    assertPositiveInteger(_this6.units, \"units\");\n    _this6.activation = getActivation(args.activation == null ? _this6.DEFAULT_ACTIVATION : args.activation);\n    _this6.useBias = args.useBias == null ? true : args.useBias;\n    _this6.kernelInitializer = getInitializer(args.kernelInitializer || _this6.DEFAULT_KERNEL_INITIALIZER);\n    _this6.recurrentInitializer = getInitializer(args.recurrentInitializer || _this6.DEFAULT_RECURRENT_INITIALIZER);\n    _this6.biasInitializer = getInitializer(args.biasInitializer || _this6.DEFAULT_BIAS_INITIALIZER);\n    _this6.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    _this6.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    _this6.biasRegularizer = getRegularizer(args.biasRegularizer);\n    _this6.kernelConstraint = getConstraint(args.kernelConstraint);\n    _this6.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    _this6.biasConstraint = getConstraint(args.biasConstraint);\n    _this6.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    _this6.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    _this6.dropoutFunc = args.dropoutFunc;\n    _this6.stateSize = _this6.units;\n    _this6.dropoutMask = null;\n    _this6.recurrentDropoutMask = null;\n    return _this6;\n  }\n  _createClass(SimpleRNNCell, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      // TODO(cais): Use regularizer.\n      this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n      this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      } else {\n        this.bias = null;\n      }\n      this.built = true;\n    }\n    // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n    //   `inputs` and `states`. Here, the two tensors are combined into an\n    //   `Tensor[]` Array as the first input argument.\n    //   Similarly, PyKeras' equivalent of this method returns two values:\n    //    `output` and `[output]`. Here the two are combined into one length-2\n    //    `Tensor[]`, consisting of `output` repeated.\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this7 = this;\n      return tidy(function () {\n        inputs = inputs;\n        if (inputs.length !== 2) {\n          throw new ValueError(\"SimpleRNNCell expects 2 input Tensors, got \".concat(inputs.length, \".\"));\n        }\n        var prevOutput = inputs[1];\n        inputs = inputs[0];\n        var training = kwargs['training'] == null ? false : kwargs['training'];\n        if (0 < _this7.dropout && _this7.dropout < 1 && _this7.dropoutMask == null) {\n          _this7.dropoutMask = generateDropoutMask({\n            ones: function ones() {\n              return tfc.onesLike(inputs);\n            },\n            rate: _this7.dropout,\n            training: training,\n            dropoutFunc: _this7.dropoutFunc\n          });\n        }\n        if (0 < _this7.recurrentDropout && _this7.recurrentDropout < 1 && _this7.recurrentDropoutMask == null) {\n          _this7.recurrentDropoutMask = generateDropoutMask({\n            ones: function ones() {\n              return tfc.onesLike(prevOutput);\n            },\n            rate: _this7.recurrentDropout,\n            training: training,\n            dropoutFunc: _this7.dropoutFunc\n          });\n        }\n        var h;\n        var dpMask = _this7.dropoutMask;\n        var recDpMask = _this7.recurrentDropoutMask;\n        if (dpMask != null) {\n          h = K.dot(tfc.mul(inputs, dpMask), _this7.kernel.read());\n        } else {\n          h = K.dot(inputs, _this7.kernel.read());\n        }\n        if (_this7.bias != null) {\n          h = K.biasAdd(h, _this7.bias.read());\n        }\n        if (recDpMask != null) {\n          prevOutput = tfc.mul(prevOutput, recDpMask);\n        }\n        var output = tfc.add(h, K.dot(prevOutput, _this7.recurrentKernel.read()));\n        if (_this7.activation != null) {\n          output = _this7.activation.apply(output);\n        }\n        // TODO(cais): Properly set learning phase on output tensor?\n        return [output, output];\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(SimpleRNNCell.prototype), \"getConfig\", this).call(this);\n      var config = {\n        units: this.units,\n        activation: serializeActivation(this.activation),\n        useBias: this.useBias,\n        kernelInitializer: serializeInitializer(this.kernelInitializer),\n        recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n        biasInitializer: serializeInitializer(this.biasInitializer),\n        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n        biasRegularizer: serializeRegularizer(this.biasRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        kernelConstraint: serializeConstraint(this.kernelConstraint),\n        recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n        biasConstraint: serializeConstraint(this.biasConstraint),\n        dropout: this.dropout,\n        recurrentDropout: this.recurrentDropout\n      };\n      return Object.assign(Object.assign({}, baseConfig), config);\n    }\n  }]);\n  return SimpleRNNCell;\n}(RNNCell);\n/** @nocollapse */\nSimpleRNNCell.className = 'SimpleRNNCell';\nserialization.registerClass(SimpleRNNCell);\nexport var SimpleRNN = /*#__PURE__*/function (_RNN) {\n  _inherits(SimpleRNN, _RNN);\n  var _super4 = _createSuper(SimpleRNN);\n  function SimpleRNN(args) {\n    _classCallCheck(this, SimpleRNN);\n    args.cell = new SimpleRNNCell(args);\n    return _super4.call(this, args); // TODO(cais): Add activityRegularizer.\n  }\n  _createClass(SimpleRNN, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this8 = this;\n      return tidy(function () {\n        if (_this8.cell.dropoutMask != null) {\n          tfc.dispose(_this8.cell.dropoutMask);\n          _this8.cell.dropoutMask = null;\n        }\n        if (_this8.cell.recurrentDropoutMask != null) {\n          tfc.dispose(_this8.cell.recurrentDropoutMask);\n          _this8.cell.recurrentDropoutMask = null;\n        }\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _get(_getPrototypeOf(SimpleRNN.prototype), \"call\", _this8).call(_this8, inputs, {\n          mask: mask,\n          training: training,\n          initialState: initialState\n        });\n      });\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config);\n    }\n  }]);\n  return SimpleRNN;\n}(RNN);\n/** @nocollapse */\nSimpleRNN.className = 'SimpleRNN';\nserialization.registerClass(SimpleRNN);\nexport var GRUCell = /*#__PURE__*/function (_RNNCell2) {\n  _inherits(GRUCell, _RNNCell2);\n  var _super5 = _createSuper(GRUCell);\n  function GRUCell(args) {\n    var _this9;\n    _classCallCheck(this, GRUCell);\n    _this9 = _super5.call(this, args);\n    _this9.DEFAULT_ACTIVATION = 'tanh';\n    _this9.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    _this9.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    _this9.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    _this9.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    if (args.resetAfter) {\n      throw new ValueError(\"GRUCell does not support reset_after parameter set to true.\");\n    }\n    _this9.units = args.units;\n    assertPositiveInteger(_this9.units, 'units');\n    _this9.activation = getActivation(args.activation === undefined ? _this9.DEFAULT_ACTIVATION : args.activation);\n    _this9.recurrentActivation = getActivation(args.recurrentActivation === undefined ? _this9.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    _this9.useBias = args.useBias == null ? true : args.useBias;\n    _this9.kernelInitializer = getInitializer(args.kernelInitializer || _this9.DEFAULT_KERNEL_INITIALIZER);\n    _this9.recurrentInitializer = getInitializer(args.recurrentInitializer || _this9.DEFAULT_RECURRENT_INITIALIZER);\n    _this9.biasInitializer = getInitializer(args.biasInitializer || _this9.DEFAULT_BIAS_INITIALIZER);\n    _this9.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    _this9.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    _this9.biasRegularizer = getRegularizer(args.biasRegularizer);\n    _this9.kernelConstraint = getConstraint(args.kernelConstraint);\n    _this9.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    _this9.biasConstraint = getConstraint(args.biasConstraint);\n    _this9.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    _this9.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    _this9.dropoutFunc = args.dropoutFunc;\n    _this9.implementation = args.implementation;\n    _this9.stateSize = _this9.units;\n    _this9.dropoutMask = null;\n    _this9.recurrentDropoutMask = null;\n    return _this9;\n  }\n  _createClass(GRUCell, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var inputDim = inputShape[inputShape.length - 1];\n      this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n      this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      } else {\n        this.bias = null;\n      }\n      // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n      //   of the weights and bias in the call() method, at execution time.\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this10 = this;\n      return tidy(function () {\n        inputs = inputs;\n        if (inputs.length !== 2) {\n          throw new ValueError(\"GRUCell expects 2 input Tensors (inputs, h, c), got \" + \"\".concat(inputs.length, \".\"));\n        }\n        var training = kwargs['training'] == null ? false : kwargs['training'];\n        var hTMinus1 = inputs[1]; // Previous memory state.\n        inputs = inputs[0];\n        // Note: For superior performance, TensorFlow.js always uses\n        // implementation 2, regardless of the actual value of\n        // config.implementation.\n        if (0 < _this10.dropout && _this10.dropout < 1 && _this10.dropoutMask == null) {\n          _this10.dropoutMask = generateDropoutMask({\n            ones: function ones() {\n              return tfc.onesLike(inputs);\n            },\n            rate: _this10.dropout,\n            training: training,\n            count: 3,\n            dropoutFunc: _this10.dropoutFunc\n          });\n        }\n        if (0 < _this10.recurrentDropout && _this10.recurrentDropout < 1 && _this10.recurrentDropoutMask == null) {\n          _this10.recurrentDropoutMask = generateDropoutMask({\n            ones: function ones() {\n              return tfc.onesLike(hTMinus1);\n            },\n            rate: _this10.recurrentDropout,\n            training: training,\n            count: 3,\n            dropoutFunc: _this10.dropoutFunc\n          });\n        }\n        var dpMask = _this10.dropoutMask;\n        var recDpMask = _this10.recurrentDropoutMask;\n        var z;\n        var r;\n        var hh;\n        if (0 < _this10.dropout && _this10.dropout < 1) {\n          inputs = tfc.mul(inputs, dpMask[0]);\n        }\n        var matrixX = K.dot(inputs, _this10.kernel.read());\n        if (_this10.useBias) {\n          matrixX = K.biasAdd(matrixX, _this10.bias.read());\n        }\n        if (0 < _this10.recurrentDropout && _this10.recurrentDropout < 1) {\n          hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n        }\n        var recurrentKernelValue = _this10.recurrentKernel.read();\n        var _tfc$split = tfc.split(recurrentKernelValue, [2 * _this10.units, _this10.units], recurrentKernelValue.rank - 1),\n          _tfc$split2 = _slicedToArray(_tfc$split, 2),\n          rk1 = _tfc$split2[0],\n          rk2 = _tfc$split2[1];\n        var matrixInner = K.dot(hTMinus1, rk1);\n        var _tfc$split3 = tfc.split(matrixX, 3, matrixX.rank - 1),\n          _tfc$split4 = _slicedToArray(_tfc$split3, 3),\n          xZ = _tfc$split4[0],\n          xR = _tfc$split4[1],\n          xH = _tfc$split4[2];\n        var _tfc$split5 = tfc.split(matrixInner, 2, matrixInner.rank - 1),\n          _tfc$split6 = _slicedToArray(_tfc$split5, 2),\n          recurrentZ = _tfc$split6[0],\n          recurrentR = _tfc$split6[1];\n        z = _this10.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n        r = _this10.recurrentActivation.apply(tfc.add(xR, recurrentR));\n        var recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n        hh = _this10.activation.apply(tfc.add(xH, recurrentH));\n        var h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n        // TODO(cais): Add use_learning_phase flag properly.\n        return [h, h];\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(GRUCell.prototype), \"getConfig\", this).call(this);\n      var config = {\n        units: this.units,\n        activation: serializeActivation(this.activation),\n        recurrentActivation: serializeActivation(this.recurrentActivation),\n        useBias: this.useBias,\n        kernelInitializer: serializeInitializer(this.kernelInitializer),\n        recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n        biasInitializer: serializeInitializer(this.biasInitializer),\n        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n        biasRegularizer: serializeRegularizer(this.biasRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        kernelConstraint: serializeConstraint(this.kernelConstraint),\n        recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n        biasConstraint: serializeConstraint(this.biasConstraint),\n        dropout: this.dropout,\n        recurrentDropout: this.recurrentDropout,\n        implementation: this.implementation,\n        resetAfter: false\n      };\n      return Object.assign(Object.assign({}, baseConfig), config);\n    }\n  }]);\n  return GRUCell;\n}(RNNCell);\n/** @nocollapse */\nGRUCell.className = 'GRUCell';\nserialization.registerClass(GRUCell);\nexport var GRU = /*#__PURE__*/function (_RNN2) {\n  _inherits(GRU, _RNN2);\n  var _super6 = _createSuper(GRU);\n  function GRU(args) {\n    _classCallCheck(this, GRU);\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    return _super6.call(this, args); // TODO(cais): Add activityRegularizer.\n  }\n  _createClass(GRU, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this11 = this;\n      return tidy(function () {\n        if (_this11.cell.dropoutMask != null) {\n          tfc.dispose(_this11.cell.dropoutMask);\n          _this11.cell.dropoutMask = null;\n        }\n        if (_this11.cell.recurrentDropoutMask != null) {\n          tfc.dispose(_this11.cell.recurrentDropoutMask);\n          _this11.cell.recurrentDropoutMask = null;\n        }\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _get(_getPrototypeOf(GRU.prototype), \"call\", _this11).call(_this11, inputs, {\n          mask: mask,\n          training: training,\n          initialState: initialState\n        });\n      });\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      if (config['implmentation'] === 0) {\n        config['implementation'] = 1;\n      }\n      return new cls(config);\n    }\n  }]);\n  return GRU;\n}(RNN);\n/** @nocollapse */\nGRU.className = 'GRU';\nserialization.registerClass(GRU);\nexport var LSTMCell = /*#__PURE__*/function (_RNNCell3) {\n  _inherits(LSTMCell, _RNNCell3);\n  var _super7 = _createSuper(LSTMCell);\n  function LSTMCell(args) {\n    var _this12;\n    _classCallCheck(this, LSTMCell);\n    _this12 = _super7.call(this, args);\n    _this12.DEFAULT_ACTIVATION = 'tanh';\n    _this12.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    _this12.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    _this12.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    _this12.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    _this12.units = args.units;\n    assertPositiveInteger(_this12.units, 'units');\n    _this12.activation = getActivation(args.activation === undefined ? _this12.DEFAULT_ACTIVATION : args.activation);\n    _this12.recurrentActivation = getActivation(args.recurrentActivation === undefined ? _this12.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    _this12.useBias = args.useBias == null ? true : args.useBias;\n    _this12.kernelInitializer = getInitializer(args.kernelInitializer || _this12.DEFAULT_KERNEL_INITIALIZER);\n    _this12.recurrentInitializer = getInitializer(args.recurrentInitializer || _this12.DEFAULT_RECURRENT_INITIALIZER);\n    _this12.biasInitializer = getInitializer(args.biasInitializer || _this12.DEFAULT_BIAS_INITIALIZER);\n    _this12.unitForgetBias = args.unitForgetBias;\n    _this12.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    _this12.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    _this12.biasRegularizer = getRegularizer(args.biasRegularizer);\n    _this12.kernelConstraint = getConstraint(args.kernelConstraint);\n    _this12.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    _this12.biasConstraint = getConstraint(args.biasConstraint);\n    _this12.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    _this12.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    _this12.dropoutFunc = args.dropoutFunc;\n    _this12.implementation = args.implementation;\n    _this12.stateSize = [_this12.units, _this12.units];\n    _this12.dropoutMask = null;\n    _this12.recurrentDropoutMask = null;\n    return _this12;\n  }\n  _createClass(LSTMCell, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      var _a;\n      inputShape = getExactlyOneShape(inputShape);\n      var inputDim = inputShape[inputShape.length - 1];\n      this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n      this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n      var biasInitializer;\n      if (this.useBias) {\n        if (this.unitForgetBias) {\n          var capturedBiasInit = this.biasInitializer;\n          var capturedUnits = this.units;\n          biasInitializer = new (_a = /*#__PURE__*/function (_Initializer) {\n            _inherits(CustomInit, _Initializer);\n            var _super8 = _createSuper(CustomInit);\n            function CustomInit() {\n              _classCallCheck(this, CustomInit);\n              return _super8.apply(this, arguments);\n            }\n            _createClass(CustomInit, [{\n              key: \"apply\",\n              value: function apply(shape, dtype) {\n                // TODO(cais): More informative variable names?\n                var bI = capturedBiasInit.apply([capturedUnits]);\n                var bF = new Ones().apply([capturedUnits]);\n                var bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n                return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n              }\n            }]);\n            return CustomInit;\n          }(Initializer), /** @nocollapse */\n          _a.className = 'CustomInit', _a)();\n        } else {\n          biasInitializer = this.biasInitializer;\n        }\n        this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      } else {\n        this.bias = null;\n      }\n      // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n      //   of the weights and bias in the call() method, at execution time.\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this13 = this;\n      return tidy(function () {\n        var training = kwargs['training'] == null ? false : kwargs['training'];\n        inputs = inputs;\n        if (inputs.length !== 3) {\n          throw new ValueError(\"LSTMCell expects 3 input Tensors (inputs, h, c), got \" + \"\".concat(inputs.length, \".\"));\n        }\n        var hTMinus1 = inputs[1]; // Previous memory state.\n        var cTMinus1 = inputs[2]; // Previous carry state.\n        inputs = inputs[0];\n        if (0 < _this13.dropout && _this13.dropout < 1 && _this13.dropoutMask == null) {\n          _this13.dropoutMask = generateDropoutMask({\n            ones: function ones() {\n              return tfc.onesLike(inputs);\n            },\n            rate: _this13.dropout,\n            training: training,\n            count: 4,\n            dropoutFunc: _this13.dropoutFunc\n          });\n        }\n        if (0 < _this13.recurrentDropout && _this13.recurrentDropout < 1 && _this13.recurrentDropoutMask == null) {\n          _this13.recurrentDropoutMask = generateDropoutMask({\n            ones: function ones() {\n              return tfc.onesLike(hTMinus1);\n            },\n            rate: _this13.recurrentDropout,\n            training: training,\n            count: 4,\n            dropoutFunc: _this13.dropoutFunc\n          });\n        }\n        var dpMask = _this13.dropoutMask;\n        var recDpMask = _this13.recurrentDropoutMask;\n        // Note: For superior performance, TensorFlow.js always uses\n        // implementation 2 regardless of the actual value of\n        // config.implementation.\n        var i;\n        var f;\n        var c;\n        var o;\n        if (0 < _this13.dropout && _this13.dropout < 1) {\n          inputs = tfc.mul(inputs, dpMask[0]);\n        }\n        var z = K.dot(inputs, _this13.kernel.read());\n        if (0 < _this13.recurrentDropout && _this13.recurrentDropout < 1) {\n          hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n        }\n        z = tfc.add(z, K.dot(hTMinus1, _this13.recurrentKernel.read()));\n        if (_this13.useBias) {\n          z = K.biasAdd(z, _this13.bias.read());\n        }\n        var _tfc$split7 = tfc.split(z, 4, z.rank - 1),\n          _tfc$split8 = _slicedToArray(_tfc$split7, 4),\n          z0 = _tfc$split8[0],\n          z1 = _tfc$split8[1],\n          z2 = _tfc$split8[2],\n          z3 = _tfc$split8[3];\n        i = _this13.recurrentActivation.apply(z0);\n        f = _this13.recurrentActivation.apply(z1);\n        c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, _this13.activation.apply(z2)));\n        o = _this13.recurrentActivation.apply(z3);\n        var h = tfc.mul(o, _this13.activation.apply(c));\n        // TODO(cais): Add use_learning_phase flag properly.\n        return [h, h, c];\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(LSTMCell.prototype), \"getConfig\", this).call(this);\n      var config = {\n        units: this.units,\n        activation: serializeActivation(this.activation),\n        recurrentActivation: serializeActivation(this.recurrentActivation),\n        useBias: this.useBias,\n        kernelInitializer: serializeInitializer(this.kernelInitializer),\n        recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n        biasInitializer: serializeInitializer(this.biasInitializer),\n        unitForgetBias: this.unitForgetBias,\n        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n        biasRegularizer: serializeRegularizer(this.biasRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        kernelConstraint: serializeConstraint(this.kernelConstraint),\n        recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n        biasConstraint: serializeConstraint(this.biasConstraint),\n        dropout: this.dropout,\n        recurrentDropout: this.recurrentDropout,\n        implementation: this.implementation\n      };\n      return Object.assign(Object.assign({}, baseConfig), config);\n    }\n  }]);\n  return LSTMCell;\n}(RNNCell);\n/** @nocollapse */\nLSTMCell.className = 'LSTMCell';\nserialization.registerClass(LSTMCell);\nexport var LSTM = /*#__PURE__*/function (_RNN3) {\n  _inherits(LSTM, _RNN3);\n  var _super9 = _createSuper(LSTM);\n  function LSTM(args) {\n    _classCallCheck(this, LSTM);\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    return _super9.call(this, args); // TODO(cais): Add activityRegularizer.\n  }\n  _createClass(LSTM, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this14 = this;\n      return tidy(function () {\n        if (_this14.cell.dropoutMask != null) {\n          tfc.dispose(_this14.cell.dropoutMask);\n          _this14.cell.dropoutMask = null;\n        }\n        if (_this14.cell.recurrentDropoutMask != null) {\n          tfc.dispose(_this14.cell.recurrentDropoutMask);\n          _this14.cell.recurrentDropoutMask = null;\n        }\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _get(_getPrototypeOf(LSTM.prototype), \"call\", _this14).call(_this14, inputs, {\n          mask: mask,\n          training: training,\n          initialState: initialState\n        });\n      });\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      if (config['implmentation'] === 0) {\n        config['implementation'] = 1;\n      }\n      return new cls(config);\n    }\n  }]);\n  return LSTM;\n}(RNN);\n/** @nocollapse */\nLSTM.className = 'LSTM';\nserialization.registerClass(LSTM);\nexport var StackedRNNCells = /*#__PURE__*/function (_RNNCell4) {\n  _inherits(StackedRNNCells, _RNNCell4);\n  var _super10 = _createSuper(StackedRNNCells);\n  function StackedRNNCells(args) {\n    var _this15;\n    _classCallCheck(this, StackedRNNCells);\n    _this15 = _super10.call(this, args);\n    _this15.cells = args.cells;\n    return _this15;\n  }\n  _createClass(StackedRNNCells, [{\n    key: \"stateSize\",\n    get: function get() {\n      // States are a flat list in reverse order of the cell stack.\n      // This allows perserving the requirement `stack.statesize[0] ===\n      // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n      // assuming one LSTM has states `[h, c]`.\n      var stateSize = [];\n      var _iterator3 = _createForOfIteratorHelper(this.cells.slice().reverse()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var cell = _step3.value;\n          if (Array.isArray(cell.stateSize)) {\n            stateSize.push.apply(stateSize, _toConsumableArray(cell.stateSize));\n          } else {\n            stateSize.push(cell.stateSize);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return stateSize;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this16 = this;\n      return tidy(function () {\n        inputs = inputs;\n        var states = inputs.slice(1);\n        // Recover per-cell states.\n        var nestedStates = [];\n        var _iterator4 = _createForOfIteratorHelper(_this16.cells.slice().reverse()),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _cell = _step4.value;\n            if (Array.isArray(_cell.stateSize)) {\n              nestedStates.push(states.splice(0, _cell.stateSize.length));\n            } else {\n              nestedStates.push(states.splice(0, 1));\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        nestedStates.reverse();\n        // Call the cells in order and store the returned states.\n        var newNestedStates = [];\n        var callInputs;\n        for (var i = 0; i < _this16.cells.length; ++i) {\n          var cell = _this16.cells[i];\n          states = nestedStates[i];\n          // TODO(cais): Take care of constants.\n          if (i === 0) {\n            callInputs = [inputs[0]].concat(states);\n          } else {\n            callInputs = [callInputs[0]].concat(states);\n          }\n          callInputs = cell.call(callInputs, kwargs);\n          newNestedStates.push(callInputs.slice(1));\n        }\n        // Format the new states as a flat list in reverse cell order.\n        states = [];\n        var _iterator5 = _createForOfIteratorHelper(newNestedStates.slice().reverse()),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _states;\n            var cellStates = _step5.value;\n            (_states = states).push.apply(_states, _toConsumableArray(cellStates));\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        return [callInputs[0]].concat(states);\n      });\n    }\n  }, {\n    key: \"build\",\n    value: function build(inputShape) {\n      if (isArrayOfShapes(inputShape)) {\n        // TODO(cais): Take care of input constants.\n        // const constantShape = inputShape.slice(1);\n        inputShape = inputShape[0];\n      }\n      inputShape = inputShape;\n      var outputDim;\n      this.cells.forEach(function (cell, i) {\n        nameScope(\"RNNCell_\".concat(i), function () {\n          // TODO(cais): Take care of input constants.\n          cell.build(inputShape);\n          if (Array.isArray(cell.stateSize)) {\n            outputDim = cell.stateSize[0];\n          } else {\n            outputDim = cell.stateSize;\n          }\n          inputShape = [inputShape[0], outputDim];\n        });\n      });\n      this.built = true;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(StackedRNNCells.prototype), \"getConfig\", this).call(this);\n      var getCellConfig = function getCellConfig(cell) {\n        return {\n          'className': cell.getClassName(),\n          'config': cell.getConfig()\n        };\n      };\n      var cellConfigs = this.cells.map(getCellConfig);\n      var config = {\n        'cells': cellConfigs\n      };\n      return Object.assign(Object.assign({}, baseConfig), config);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"trainableWeights\",\n    get: function get() {\n      if (!this.trainable) {\n        return [];\n      }\n      var weights = [];\n      var _iterator6 = _createForOfIteratorHelper(this.cells),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var cell = _step6.value;\n          weights.push.apply(weights, _toConsumableArray(cell.trainableWeights));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return weights;\n    }\n  }, {\n    key: \"nonTrainableWeights\",\n    get: function get() {\n      var weights = [];\n      var _iterator7 = _createForOfIteratorHelper(this.cells),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _cell2 = _step7.value;\n          weights.push.apply(weights, _toConsumableArray(_cell2.nonTrainableWeights));\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      if (!this.trainable) {\n        var trainableWeights = [];\n        var _iterator8 = _createForOfIteratorHelper(this.cells),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var cell = _step8.value;\n            trainableWeights.push.apply(trainableWeights, _toConsumableArray(cell.trainableWeights));\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        return trainableWeights.concat(weights);\n      }\n      return weights;\n    }\n    /**\n     * Retrieve the weights of a the model.\n     *\n     * @returns A flat `Array` of `tf.Tensor`s.\n     */\n  }, {\n    key: \"getWeights\",\n    value: function getWeights() {\n      var weights = [];\n      var _iterator9 = _createForOfIteratorHelper(this.cells),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var cell = _step9.value;\n          weights.push.apply(weights, _toConsumableArray(cell.weights));\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return batchGetValue(weights);\n    }\n    /**\n     * Set the weights of the model.\n     *\n     * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n     *     the output of `getWeights()`.\n     */\n  }, {\n    key: \"setWeights\",\n    value: function setWeights(weights) {\n      var tuples = [];\n      var _iterator10 = _createForOfIteratorHelper(this.cells),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var cell = _step10.value;\n          var numParams = cell.weights.length;\n          var inputWeights = weights.splice(numParams);\n          for (var i = 0; i < cell.weights.length; ++i) {\n            tuples.push([cell.weights[i], inputWeights[i]]);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      batchSetValue(tuples);\n    }\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      var customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var cells = [];\n      var _iterator11 = _createForOfIteratorHelper(config['cells']),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var cellConfig = _step11.value;\n          cells.push(deserialize(cellConfig, customObjects));\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return new cls({\n        cells: cells\n      });\n    }\n  }]);\n  return StackedRNNCells;\n}(RNNCell);\n/** @nocollapse */\nStackedRNNCells.className = 'StackedRNNCells';\nserialization.registerClass(StackedRNNCells);\nexport function generateDropoutMask(args) {\n  var ones = args.ones,\n    rate = args.rate,\n    _args$training = args.training,\n    training = _args$training === void 0 ? false : _args$training,\n    _args$count = args.count,\n    count = _args$count === void 0 ? 1 : _args$count,\n    dropoutFunc = args.dropoutFunc;\n  var droppedInputs = function droppedInputs() {\n    return dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n  };\n  var createMask = function createMask() {\n    return K.inTrainPhase(droppedInputs, ones, training);\n  };\n  // just in case count is provided with null or undefined\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n  var masks = Array(count).fill(undefined).map(createMask);\n  return masks.map(function (m) {\n    return tfc.keep(m.clone());\n  });\n}","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","util","getActivation","serializeActivation","K","nameScope","getConstraint","serializeConstraint","InputSpec","SymbolicTensor","Layer","AttributeError","NotImplementedError","ValueError","getInitializer","Initializer","Ones","serializeInitializer","getRegularizer","serializeRegularizer","assertPositiveInteger","math_utils","getExactlyOneShape","getExactlyOneTensor","isArrayOfShapes","batchGetValue","batchSetValue","deserialize","standardizeArgs","inputs","initialState","constants","numConstants","Array","isArray","slice","length","toListOrNull","x","rnn","stepFunction","initialStates","goBackwards","mask","unroll","needPerStepOutputs","ndim","shape","axes","concat","range","transpose","console","warn","cast","rank","expandDims","reverse","perStepOutputs","lastOutput","states","timeSteps","perStepInputs","unstack","perStepMasks","currentInput","t","stepOutputs","maskedOutputs","stepMask","negStepMask","sub","onesLike","output","add","mul","newStates","map","state","i","push","outputs","axis","stack","RNN","args","cell","StackedRNNCells","cells","stateSize","returnSequences","returnState","_stateful","stateful","supportsMasking","inputSpec","stateSpec","states_","keptStates","numStates","inputShape","outputDim","outputShape","stateShape","dim","outputMask","stateMask","s","constantShape","batchSize","inputDim","stepInputShape","build","arraysEqual","spec","resetStates","training","zeros","dispose","name","index","value","expectedShape","keep","clone","kwargs","standardized","additionalInputs","additionalSpecs","isTensor","fullInput","fullInputSpec","originalInputSpec","getInitialState","cellCallKwargs","step","call","rnnOutputs","sum","tile","trainable","trainableWeights","weights","nonTrainableWeights","setFastWeightInitDuringBuild","baseConfig","config","cellConfig","getConfig","getClassName","className","cls","customObjects","Object","assign","registerClass","RNNCell","SimpleRNNCell","units","activation","DEFAULT_ACTIVATION","useBias","kernelInitializer","DEFAULT_KERNEL_INITIALIZER","recurrentInitializer","DEFAULT_RECURRENT_INITIALIZER","biasInitializer","DEFAULT_BIAS_INITIALIZER","kernelRegularizer","recurrentRegularizer","biasRegularizer","kernelConstraint","recurrentConstraint","biasConstraint","dropout","min","max","recurrentDropout","dropoutFunc","dropoutMask","recurrentDropoutMask","kernel","addWeight","recurrentKernel","bias","built","prevOutput","generateDropoutMask","ones","rate","h","dpMask","recDpMask","dot","read","biasAdd","apply","activityRegularizer","SimpleRNN","GRUCell","resetAfter","undefined","recurrentActivation","DEFAULT_RECURRENT_ACTIVATION","implementation","hTMinus1","count","z","r","hh","matrixX","recurrentKernelValue","split","rk1","rk2","matrixInner","xZ","xR","xH","recurrentZ","recurrentR","recurrentH","neg","GRU","LSTMCell","unitForgetBias","capturedBiasInit","capturedUnits","_a","dtype","bI","bF","bCAndH","concatAlongFirstAxis","cTMinus1","f","c","o","z0","z1","z2","z3","LSTM","nestedStates","splice","newNestedStates","callInputs","cellStates","forEach","getCellConfig","cellConfigs","tuples","numParams","inputWeights","droppedInputs","createMask","inTrainPhase","masks","fill","m"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\recurrent.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, SymbolicTensor} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, Ones, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, RnnStepFunction} from '../types';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes} from '../utils/types_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\nimport {deserialize} from './serialization';\n\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(\n    inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    initialState: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    constants: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    numConstants?: number): {\n  inputs: Tensor|SymbolicTensor,\n  initialState: Tensor[]|SymbolicTensor[],\n  constants: Tensor[]|SymbolicTensor[]\n} {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError(\n          'When inputs is an array, neither initialState or constants ' +\n          'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x: Tensor|Tensor[]|SymbolicTensor|\n                        SymbolicTensor[]): Tensor[]|SymbolicTensor[] {\n    if (x == null || Array.isArray(x)) {\n      return x as Tensor[] | SymbolicTensor[];\n    } else {\n      return [x] as Tensor[] | SymbolicTensor[];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n\n  return {inputs, initialState, constants};\n}\n\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(\n    stepFunction: RnnStepFunction, inputs: Tensor, initialStates: Tensor[],\n    goBackwards = false, mask?: Tensor, constants?: Tensor[], unroll = false,\n    needPerStepOutputs = false): [Tensor, Tensor, Tensor[]] {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError(\n          'The rnn() functoin of the deeplearn.js backend does not support ' +\n          'constants yet.');\n    }\n\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn(\n          'Backend rnn(): the unroll = true option is not applicable to the ' +\n          'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n    const perStepOutputs: Tensor[] = [];\n    let lastOutput: Tensor;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks: Tensor[];\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          const output = tfc.add(\n              tfc.mul(stepOutputs[0], stepMask),\n              tfc.mul(states[0], negStepMask));\n          const newStates = states.map((state, i) => {\n            return tfc.add(\n                tfc.mul(stepOutputs[1][i], stepMask),\n                tfc.mul(state, negStepMask));\n          });\n          return {output, newStates};\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs: Tensor;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states] as [Tensor, Tensor, Tensor[]];\n  });\n}\n\nexport declare interface BaseRNNLayerArgs extends LayerArgs {\n  /**\n   * A RNN cell instance. A RNN cell is a class that has:\n   *   - a `call()` method, which takes `[Tensor, Tensor]` as the\n   *     first input argument. The first item is the input at time t, and\n   *     second item is the cell state at time t.\n   *     The `call()` method returns `[outputAtT, statesAtTPlus1]`.\n   *     The `call()` method of the cell can also take the argument `constants`,\n   *     see section \"Note on passing external constants\" below.\n   *     Porting Node: PyKeras overrides the `call()` signature of RNN cells,\n   *       which are Layer subtypes, to accept two arguments. tfjs-layers does\n   *       not do such overriding. Instead we preseve the `call()` signature,\n   *       which due to its `Tensor|Tensor[]` argument and return value is\n   *       flexible enough to handle the inputs and states.\n   *   - a `stateSize` attribute. This can be a single integer (single state)\n   *     in which case it is the size of the recurrent state (which should be\n   *     the same as the size of the cell output). This can also be an Array of\n   *     integers (one size per state). In this case, the first entry\n   *     (`stateSize[0]`) should be the same as the size of the cell output.\n   * It is also possible for `cell` to be a list of RNN cell instances, in which\n   * case the cells get stacked on after the other in the RNN, implementing an\n   * efficient stacked RNN.\n   */\n  cell?: RNNCell|RNNCell[];\n\n  /**\n   * Whether to return the last output in the output sequence, or the full\n   * sequence.\n   */\n  returnSequences?: boolean;\n\n  /**\n   * Whether to return the last state in addition to the output.\n   */\n  returnState?: boolean;\n\n  /**\n   * If `true`, process the input sequence backwards and return the reversed\n   * sequence (default: `false`).\n   */\n  goBackwards?: boolean;\n\n  /**\n   * If `true`, the last state for each sample at index i in a batch will be\n   * used as initial state of the sample of index i in the following batch\n   * (default: `false`).\n   *\n   * You can set RNN layers to be \"stateful\", which means that the states\n   * computed for the samples in one batch will be reused as initial states\n   * for the samples in the next batch. This assumes a one-to-one mapping\n   * between samples in different successive batches.\n   *\n   * To enable \"statefulness\":\n   *   - specify `stateful: true` in the layer constructor.\n   *   - specify a fixed batch size for your model, by passing\n   *     - if sequential model:\n   *       `batchInputShape: [...]` to the first layer in your model.\n   *     - else for functional model with 1 or more Input layers:\n   *       `batchShape: [...]` to all the first layers in your model.\n   *     This is the expected shape of your inputs\n   *     *including the batch size*.\n   *     It should be a tuple of integers, e.g., `[32, 10, 100]`.\n   *   - specify `shuffle: false` when calling `LayersModel.fit()`.\n   *\n   * To reset the state of your model, call `resetStates()` on either the\n   * specific layer or on the entire model.\n   */\n  stateful?: boolean;\n  // TODO(cais): Explore whether we can warn users when they fail to set\n  //   `shuffle: false` when training a model consisting of stateful RNNs\n  //   and any stateful Layers in general.\n\n  /**\n   * If `true`, the network will be unrolled, else a symbolic loop will be\n   * used. Unrolling can speed up a RNN, although it tends to be more\n   * memory-intensive. Unrolling is only suitable for short sequences (default:\n   * `false`).\n   * Porting Note: tfjs-layers has an imperative backend. RNNs are executed with\n   *   normal TypeScript control flow. Hence this property is inapplicable and\n   *   ignored in tfjs-layers.\n   */\n  unroll?: boolean;\n\n  /**\n   * Dimensionality of the input (integer).\n   *   This option (or alternatively, the option `inputShape`) is required when\n   *   this layer is used as the first layer in a model.\n   */\n  inputDim?: number;\n\n  /**\n   * Length of the input sequences, to be specified when it is constant.\n   * This argument is required if you are going to connect `Flatten` then\n   * `Dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed). Note that if the recurrent layer is not the first layer in\n   * your model, you would need to specify the input length at the level of the\n   * first layer (e.g., via the `inputShape` option).\n   */\n  inputLength?: number;\n}\n\nexport class RNN extends Layer {\n  /** @nocollapse */\n  static className = 'RNN';\n  public readonly cell: RNNCell;\n  public readonly returnSequences: boolean;\n  public readonly returnState: boolean;\n  public readonly goBackwards: boolean;\n  public readonly unroll: boolean;\n\n  public stateSpec: InputSpec[];\n  protected states_: Tensor[];\n\n  // NOTE(cais): For stateful RNNs, the old states cannot be disposed right\n  // away when new states are set, because the old states may need to be used\n  // later for backpropagation through time (BPTT) and other purposes. So we\n  // keep them here for final disposal when the state is reset completely\n  // (i.e., through no-arg call to `resetStates()`).\n  protected keptStates: Tensor[][];\n\n  private numConstants: number;\n\n  constructor(args: RNNLayerArgs) {\n    super(args);\n    let cell: RNNCell;\n    if (args.cell == null) {\n      throw new ValueError(\n          'cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({cells: args.cell});\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError(\n          'The RNN cell should have an attribute `stateSize` (tuple of ' +\n          'integers, one integer per RNN state).');\n    }\n    this.cell = cell;\n    this.returnSequences =\n        args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({ndim: 3})];\n    this.stateSpec = null;\n    this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  }\n\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  getStates(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  }\n\n  // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n  setStates(states: Tensor[]): void {\n    this.states_ = states;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    // TODO(cais): Remove the casting once stacked RNN cells become supported.\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape: Shape|Shape[];\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape: Shape[] = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n  get states(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output: Tensor[] = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s: Tensor[]) {\n    this.states_ = s;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape: Shape[] = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    const batchSize: number = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({shape: [batchSize, null, ...inputDim]});\n\n    // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    }\n\n    // Set or validate stateSpec.\n    let stateSize: number[];\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(\n              this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]),\n              stateSize)) {\n        throw new ValueError(\n            `An initialState was passed that is not compatible with ` +\n            `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n            `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec =\n          stateSize.map(dim => new InputSpec({shape: [null, dim]}));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n  override resetStates(states?: Tensor|Tensor[], training = false): void {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n      // Initialize state if null.\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ?\n              this.cell.stateSize[index] :\n              this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  override apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    let additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({shape: state.shape}));\n      }\n      // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      // TODO(cais): Add this.constantsSpec.\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput =\n          [inputs].concat(additionalInputs) as Tensor[] | SymbolicTensor[];\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call with temporarily replaced inputSpec.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'] as Tensor;\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(\n            `RNN Layer has ${numStates} state(s) but was passed ` +\n            `${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn(\n            'Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs: Kwargs = {training};\n\n      // TODO(cais): Add support for constants.\n      const step = (inputs: Tensor, states: Tensor[]) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs =\n            this.cell.call([inputs].concat(states), cellCallKwargs) as Tensor[];\n        // Marshall the return value into output and new states.\n        return [outputs[0], outputs.slice(1)] as [Tensor, Tensor[]];\n      };\n\n      // TODO(cais): Add support for constants.\n\n      const rnnOutputs =\n          rnn(step, inputs, initialState, this.goBackwards, mask, null,\n              this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput;\n\n      // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs: Tensor): Tensor[] {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape);\n      // [Samples].\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState);  // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(\n            dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ?\n            [K.tile(initialState, [1, this.cell.stateSize])] :\n            [initialState];\n      }\n    });\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    return this.cell.trainableWeights;\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n\n  override setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll,\n    };\n\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n\n    const cellConfig = this.cell.getConfig();\n\n    if (this.getClassName() === RNN.className) {\n      config['cell'] = {\n        'className': this.cell.getClassName(),\n        'config': cellConfig,\n      } as serialization.ConfigDictValue;\n    }\n\n    // this order is necessary, to prevent cell name from replacing layer name\n    return {...cellConfig, ...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cellConfig = config['cell'] as serialization.ConfigDict;\n    const cell = deserialize(cellConfig, customObjects) as RNNCell;\n    return new cls(Object.assign(config, {cell}));\n  }\n}\nserialization.registerClass(RNN);\n\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport abstract class RNNCell extends Layer {\n  /**\n   * Size(s) of the states.\n   * For RNN cells with only a single state, this is a single integer.\n   */\n  // See\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#properties-overriding-accessors-and-vice-versa-is-an-error\n  public abstract stateSize: number|number[];\n  public dropoutMask: Tensor|Tensor[];\n  public recurrentDropoutMask: Tensor|Tensor[];\n}\n\nexport declare interface SimpleRNNCellLayerArgs extends LayerArgs {\n  /**\n   * units: Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   * Default: hyperbolic tangent ('tanh').\n   * If you pass `null`,  'linear' activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the `kernel` weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the `recurrent_kernel` weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the `kernel` weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the `recurrentKernel` weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\nexport class SimpleRNNCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'SimpleRNNCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args: SimpleRNNCellLayerArgs) {\n    super(args);\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(\n        args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    // TODO(cais): Use regularizer.\n    this.kernel = this.addWeight(\n        'kernel', [inputShape[inputShape.length - 1], this.units], null,\n        this.kernelInitializer, this.kernelRegularizer, true,\n        this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor;\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(prevOutput),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor;\n      }\n      let h: Tensor;\n      const dpMask: Tensor = this.dropoutMask as Tensor;\n      const recDpMask: Tensor = this.recurrentDropoutMask as Tensor;\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      // TODO(cais): Properly set learning phase on output tensor?\n      return [output, output];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(SimpleRNNCell);\n\nexport declare interface SimpleRNNLayerArgs extends BaseRNNLayerArgs {\n  /**\n   * Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   *\n   * Defaults to  hyperbolic tangent (`tanh`)\n   *\n   * If you pass `null`, no activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the recurrentKernel weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the kernel weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the recurrentKernel weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\n/**\n * RNNLayerConfig is identical to BaseRNNLayerConfig, except it makes the\n * `cell` property required. This interface is to be used with constructors\n * of concrete RNN layer subtypes.\n */\nexport declare interface RNNLayerArgs extends BaseRNNLayerArgs {\n  cell: RNNCell|RNNCell[];\n}\n\nexport class SimpleRNN extends RNN {\n  /** @nocollapse */\n  static override className = 'SimpleRNN';\n  constructor(args: SimpleRNNLayerArgs) {\n    args.cell = new SimpleRNNCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\nserialization.registerClass(SimpleRNN);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface GRUCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n\n  /**\n   * GRU convention (whether to apply reset gate after or before matrix\n   * multiplication). false = \"before\", true = \"after\" (only false is\n   * supported).\n   */\n  resetAfter?: boolean;\n}\n\nexport class GRUCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'GRUCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION: ActivationIdentifier = 'hardSigmoid';\n\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: GRUCellLayerArgs) {\n    super(args);\n    if (args.resetAfter) {\n      throw new ValueError(\n          `GRUCell does not support reset_after parameter set to true.`);\n    }\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 3], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 3], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units * 3], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1];  // Previous memory state.\n      inputs = inputs[0];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 3,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 3,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor];\n      const recDpMask = this.recurrentDropoutMask as [Tensor, Tensor, Tensor];\n      let z: Tensor;\n      let r: Tensor;\n      let hh: Tensor;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let matrixX = K.dot(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(\n          recurrentKernelValue, [2 * this.units, this.units],\n          recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] =\n          tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n\n      const h =\n          tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(GRUCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface GRULayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   * smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class GRU extends RNN {\n  /** @nocollapse */\n  static override className = 'GRU';\n  constructor(args: GRULayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(GRU);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface LSTMCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class LSTMCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'LSTMCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n  readonly unitForgetBias: boolean;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number[];\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n\n  readonly DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: LSTMCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 4], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 4], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    let biasInitializer: Initializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): Tensor {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = (new Ones()).apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(\n                K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\n          'bias', [this.units * 4], null, biasInitializer, this.biasRegularizer,\n          true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1];    // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 4,\n                             dropoutFunc: this.dropoutFunc\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 4,\n                                      dropoutFunc: this.dropoutFunc\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor, Tensor];\n      const recDpMask =\n          this.recurrentDropoutMask as [Tensor, Tensor, Tensor, Tensor];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n      let i: Tensor;\n      let f: Tensor;\n      let c: Tensor;\n      let o: Tensor;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let z = K.dot(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n\n      const h = tfc.mul(o, this.activation.apply(c));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h, c];\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(LSTMCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface LSTMLayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *   Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions, whereas mode 2 will\n   *   batch them into fewer, larger operations. These modes will\n   *   have different performance profiles on different hardware and\n   *   for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this config field.\n   */\n  implementation?: number;\n}\n\nexport class LSTM extends RNN {\n  /** @nocollapse */\n  static override className = 'LSTM';\n  constructor(args: LSTMLayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(LSTM);\n\nexport declare interface StackedRNNCellsArgs extends LayerArgs {\n  /**\n   * An `Array` of `RNNCell` instances.\n   */\n  cells: RNNCell[];\n}\n\nexport class StackedRNNCells extends RNNCell {\n  /** @nocollapse */\n  static className = 'StackedRNNCells';\n  protected cells: RNNCell[];\n\n  constructor(args: StackedRNNCellsArgs) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize(): number[] {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize: number[] = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      let states = inputs.slice(1);\n\n      // Recover per-cell states.\n      const nestedStates: Tensor[][] = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n\n      // Call the cells in order and store the returned states.\n      const newNestedStates: Tensor[][] = [];\n      let callInputs: Tensor[];\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        // TODO(cais): Take care of constants.\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs) as Tensor[];\n        newNestedStates.push(callInputs.slice(1));\n      }\n\n      // Format the new states as a flat list in reverse cell order.\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n    let outputDim: number;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n\n        cell.build(inputShape);\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n        inputShape = [inputShape[0], outputDim] as Shape;\n      });\n    });\n    this.built = true;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const getCellConfig = (cell: RNNCell) => {\n      return {\n        'className': cell.getClassName(),\n        'config': cell.getConfig(),\n      };\n    };\n\n    const cellConfigs = this.cells.map(getCellConfig);\n\n    const config = {'cells': cellConfigs};\n\n    return {...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cells: RNNCell[] = [];\n    for (const cellConfig of (config['cells'] as serialization.ConfigDict[])) {\n      cells.push(deserialize(cellConfig, customObjects) as RNNCell);\n    }\n    return new cls({cells});\n  }\n\n  override get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n\n  override get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n  override getWeights(): Tensor[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n  override setWeights(weights: Tensor[]): void {\n    const tuples: Array<[LayerVariable, Tensor]> = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n\n  // TODO(cais): Maybe implemnt `losses` and `getLossesFor`.\n}\nserialization.registerClass(StackedRNNCells);\n\nexport function generateDropoutMask(args: {\n  ones: () => tfc.Tensor,\n  rate: number,\n  training?: boolean,\n  count?: number,\n  dropoutFunc?: Function,\n}): tfc.Tensor|tfc.Tensor[] {\n  const {ones, rate, training = false, count = 1, dropoutFunc} = args;\n\n  const droppedInputs = () =>\n      dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n\n  const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n\n  // just in case count is provided with null or undefined\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n\n  const masks = Array(count).fill(undefined).map(createMask);\n\n  return masks.map(m => tfc.keep(m.clone()));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}