{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assertNonNegativeIntegerDimensions } from '../util_base';\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { RandGamma } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomGamma_(shape, alpha) {\n  var beta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var dtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'float32';\n  var seed = arguments.length > 4 ? arguments[4] : undefined;\n  assertNonNegativeIntegerDimensions(shape);\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(\"Unsupported data type \".concat(dtype));\n  }\n  var rgamma = new RandGamma(alpha, beta, dtype, seed);\n  var res = buffer(shape, dtype);\n  for (var i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\nexport var randomGamma = /* @__PURE__ */op({\n  randomGamma_: randomGamma_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQA,kCAAkC,QAAO,cAAc;AAE/D,SAAQC,MAAM,QAAO,UAAU;AAC/B,SAAQC,EAAE,QAAO,aAAa;AAC9B,SAAQC,SAAS,QAAO,aAAa;AAErC;;;;;;;;;;;;;;;;AAgBA,SAASC,YAAY,CACjBC,KAAkB,EAAEC,KAAa,EACkB;EAAA,IADhBC,IAAI,uEAAG,CAAC;EAAA,IAC3CC,4EAA2B,SAAS;EAAA,IAAEC,IAAa;EACrDT,kCAAkC,CAACK,KAAK,CAAC;EACzC,IAAIE,IAAI,IAAI,IAAI,EAAE;IAChBA,IAAI,GAAG,CAAC;;EAEV,IAAIC,KAAK,IAAI,IAAI,EAAE;IACjBA,KAAK,GAAG,SAAS;;EAEnB,IAAIA,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,OAAO,EAAE;IAC5C,MAAM,IAAIE,KAAK,iCAA0BF,KAAK,EAAG;;EAEnD,IAAMG,MAAM,GAAG,IAAIR,SAAS,CAACG,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEC,IAAI,CAAC;EACtD,IAAMG,GAAG,GAAGX,MAAM,CAACI,KAAK,EAAEG,KAAK,CAAC;EAChC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC1CD,GAAG,CAACE,MAAM,CAACD,CAAC,CAAC,GAAGF,MAAM,CAACK,SAAS,EAAE;;EAEpC,OAAOJ,GAAG,CAACK,QAAQ,EAAE;AACvB;AAEA,OAAO,IAAMC,WAAW,GAAG,eAAgBhB,EAAE,CAAC;EAACE,YAAY,EAAZA;AAAY,CAAC,CAAC","names":["assertNonNegativeIntegerDimensions","buffer","op","RandGamma","randomGamma_","shape","alpha","beta","dtype","seed","Error","rgamma","res","i","values","length","nextValue","toTensor","randomGamma"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\random_gamma.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\nimport {assertNonNegativeIntegerDimensions} from '../util_base';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {RandGamma} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomGamma_<R extends Rank>(\n    shape: ShapeMap[R], alpha: number, beta = 1,\n    dtype: 'float32'|'int32' = 'float32', seed?: number): Tensor<R> {\n  assertNonNegativeIntegerDimensions(shape);\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomGamma = /* @__PURE__ */ op({randomGamma_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}