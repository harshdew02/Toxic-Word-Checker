{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nvar NEG = CHECK_NAN_SNIPPET + \"\\n  return -x;\\n\";\nvar NEG_PACKED = \"\\n  vec4 result = -x;\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\";\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var x = inputs.x;\n  if (backend.shouldExecuteOnCPU([x])) {\n    var xData = backend.texData.get(x.dataId);\n    var _negImplCPU = negImplCPU(xData.values, x.shape, x.dtype),\n      _negImplCPU2 = _slicedToArray(_negImplCPU, 2),\n      outValues = _negImplCPU2[0],\n      newShape = _negImplCPU2[1];\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  var program;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport var negConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAG,EAA4BC,GAAG,QAA0C,uBAAuB;AAG3G,SAAQC,UAAU,QAAO,wBAAwB;AACjD,SAAQC,iBAAiB,EAAEC,cAAc,QAAO,gBAAgB;AAChE,SAAQC,oBAAoB,QAAO,uBAAuB;AAE1D,IAAMC,GAAG,GAAGH,iBAAiB,qBAE5B;AAED,IAAMI,UAAU,6OAUf;AAED;AACA;AACA,OAAM,SAAUC,GAAG,CAACC,IAAoD;EAEtE,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,CAAC,GAAIF,MAAM,CAAXE,CAAC;EAER,IAAID,OAAO,CAACE,kBAAkB,CAAC,CAACD,CAAC,CAAC,CAAC,EAAE;IACnC,IAAME,KAAK,GAAGH,OAAO,CAACI,OAAO,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC;IAC3C,kBACIf,UAAU,CAACY,KAAK,CAACI,MAAoB,EAAEN,CAAC,CAACO,KAAK,EAAEP,CAAC,CAACQ,KAAK,CAAC;MAAA;MADrDC,SAAS;MAAEC,QAAQ;IAE1B,OAAOX,OAAO,CAACY,cAAc,CAACD,QAAQ,EAAEV,CAAC,CAACQ,KAAK,EAAEC,SAAS,CAAC;;EAG7D,IAAIG,OAA4C;EAChD,IAAIxB,GAAG,EAAE,CAACyB,OAAO,CAAC,6BAA6B,CAAC,EAAE;IAChDD,OAAO,GAAG,IAAInB,oBAAoB,CAACO,CAAC,CAACO,KAAK,EAAEZ,UAAU,CAAC;GACxD,MAAM;IACLiB,OAAO,GAAG,IAAIpB,cAAc,CAACQ,CAAC,CAACO,KAAK,EAAEb,GAAG,CAAC;;EAG5C,OAAOK,OAAO,CAACe,eAAe,CAACF,OAAO,EAAE,CAACZ,CAAC,CAAC,EAAEA,CAAC,CAACQ,KAAK,CAAC;AACvD;AAEA,OAAO,IAAMO,SAAS,GAAiB;EACrCC,UAAU,EAAE3B,GAAG;EACf4B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEtB;CACb","names":["env","Neg","negImplCPU","CHECK_NAN_SNIPPET","UnaryOpProgram","UnaryOpPackedProgram","NEG","NEG_PACKED","neg","args","inputs","backend","x","shouldExecuteOnCPU","xData","texData","get","dataId","values","shape","dtype","outValues","newShape","makeTensorInfo","program","getBool","runWebGLProgram","negConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Neg.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}