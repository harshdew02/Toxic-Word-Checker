{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var dy = inputs.dy,\n    input = inputs.input;\n  var filterSize = attrs.filterSize,\n    strides = attrs.strides,\n    pad = attrs.pad,\n    dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n  var convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  var inputBuf = backend.bufferSync(input);\n  var maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var dx = buffer(input.shape, 'float32');\n  var dyBuf = backend.bufferSync(dy);\n  for (var batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (var channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (var dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (var dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (var dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            var dyDepthCorner = dxDepth - padFront;\n            var dyRowCorner = dxRow - padTop;\n            var dyColCorner = dxCol - padLeft;\n            var dotProd = 0;\n            for (var wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n              var dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (var wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                var dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (var wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                  var dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n                  var maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  var curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;\n                  var mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n                  var pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"mappings":"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","names":["backend_util","buffer","MaxPool3DGrad","assertNotComplex","maxPool3dPositions","maxPool3DGrad","args","inputs","backend","attrs","dy","input","filterSize","strides","pad","dimRoundingMode","convInfo","computePool3DInfo","shape","inputBuf","bufferSync","maxPosBuf","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","padFront","padInfo","front","padLeft","left","padTop","top","dx","dyBuf","batch","batchSize","channel","inChannels","dxDepth","inDepth","dxRow","inHeight","dxCol","inWidth","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","outDepth","Math","floor","wRow","dyRow","outHeight","wCol","dyCol","outWidth","maxPos","get","curPos","mask","pixel","set","makeTensorInfo","dtype","values","maxPool3DGradConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\MaxPool3DGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}