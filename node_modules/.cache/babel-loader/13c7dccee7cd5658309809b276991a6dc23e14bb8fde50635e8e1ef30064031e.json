{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var real = inputs.real,\n    imag = inputs.imag;\n  var complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  var complex = backend.texData.get(complexInfo.dataId);\n  var realTensorInfo = identity({\n    inputs: {\n      x: real\n    },\n    backend: backend\n  });\n  var imagTensorInfo = identity({\n    inputs: {\n      x: imag\n    },\n    backend: backend\n  });\n  complex.complexTensorInfos = {\n    real: realTensorInfo,\n    imag: imagTensorInfo\n  };\n  return complexInfo;\n}\nexport var complexConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,OAAO,QAA4D,uBAAuB;AAGlG,SAAQC,QAAQ,QAAO,YAAY;AAEnC;;;;;;;;;AASA,OAAM,SAAUC,OAAO,CACnBC,IAAwD;EAC1D,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,IAAI,GAAUF,MAAM,CAApBE,IAAI;IAAEC,IAAI,GAAIH,MAAM,CAAdG,IAAI;EAEjB,IAAMC,WAAW,GAAGH,OAAO,CAACI,cAAc,CAACH,IAAI,CAACI,KAAK,EAAE,WAAW,CAAC;EACnE,IAAMR,OAAO,GAAGG,OAAO,CAACM,OAAO,CAACC,GAAG,CAACJ,WAAW,CAACK,MAAM,CAAC;EAEvD,IAAMC,cAAc,GAAGb,QAAQ,CAAC;IAACG,MAAM,EAAE;MAACW,CAAC,EAAET;IAAI,CAAC;IAAED,OAAO,EAAPA;EAAO,CAAC,CAAC;EAE7D,IAAMW,cAAc,GAAGf,QAAQ,CAAC;IAACG,MAAM,EAAE;MAACW,CAAC,EAAER;IAAI,CAAC;IAAEF,OAAO,EAAPA;EAAO,CAAC,CAAC;EAE7DH,OAAO,CAACe,kBAAkB,GAAG;IAACX,IAAI,EAAEQ,cAAc;IAAEP,IAAI,EAAES;EAAc,CAAC;EAEzE,OAAOR,WAAW;AACpB;AAEA,OAAO,IAAMU,aAAa,GAAiB;EACzCC,UAAU,EAAEnB,OAAO;EACnBoB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEnB;CACb","names":["Complex","identity","complex","args","inputs","backend","real","imag","complexInfo","makeTensorInfo","shape","texData","get","dataId","realTensorInfo","x","imagTensorInfo","complexTensorInfos","complexConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Complex.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}