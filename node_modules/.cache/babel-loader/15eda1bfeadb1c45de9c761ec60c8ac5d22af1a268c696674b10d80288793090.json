{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Conv2D } from '../kernel_names';\nimport { conv2DBackpropFilter } from '../ops/conv2d_backprop_filter';\nimport { conv2DBackpropInput } from '../ops/conv2d_backprop_input';\nimport * as conv_util from '../ops/conv_util';\nimport * as util from '../util';\nexport var conv2DGradConfig = {\n  kernelName: Conv2D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var _saved = _slicedToArray(saved, 2),\n      x4D = _saved[0],\n      $filter = _saved[1];\n    var dilations = attrs.dilations,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat;\n    util.assert(conv_util.tupleValuesAreOne(dilations), function () {\n      return 'Error in gradient of conv2D: dilation rates greater than 1 ' + \"are not yet supported in gradients. Got dilations '\".concat(dilations, \"'\");\n    });\n    return {\n      x: function x() {\n        return conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad, dataFormat);\n      },\n      filter: function filter() {\n        return conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad, dataFormat);\n      }\n    };\n  }\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAoB,iBAAiB;AAEnD,SAAQC,oBAAoB,QAAO,+BAA+B;AAClE,SAAQC,mBAAmB,QAAO,8BAA8B;AAChE,OAAO,KAAKC,SAAS,MAAM,kBAAkB;AAE7C,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,OAAO,IAAMC,gBAAgB,GAAe;EAC1CC,UAAU,EAAEN,MAAM;EAClBO,YAAY,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC;EAC7BC,QAAQ,EAAE,kBAACC,EAAY,EAAEC,KAAe,EAAEC,KAAmB,EAAI;IAC/D,4BAAuBD,KAA6B;MAA7CE,GAAG;MAAEC,OAAO;IACnB,IAAOC,SAAS,GACZH,KAA+B,CAD5BG,SAAS;MAAEC,OAAO,GACrBJ,KAA+B,CADjBI,OAAO;MAAEC,GAAG,GAC1BL,KAA+B,CADRK,GAAG;MAAEC,UAAU,GACtCN,KAA+B,CADHM,UAAU;IAG1Cb,IAAI,CAACc,MAAM,CACPf,SAAS,CAACgB,iBAAiB,CAACL,SAAS,CAAC,EACtC;MAAA,OAAM,6DAA6D,gEACTA,SAAS,MAAG;IAAA,EAAC;IAE3E,OAAO;MACLM,CAAC,EAAE;QAAA,OACClB,mBAAmB,CAACU,GAAG,CAACS,KAAK,EAAEZ,EAAE,EAAEI,OAAO,EAAEE,OAAO,EAAEC,GAAG,EAAEC,UAAU,CAAC;MAAA;MACzEK,MAAM,EAAE;QAAA,OACJrB,oBAAoB,CAACW,GAAG,EAAEH,EAAE,EAAEI,OAAO,CAACQ,KAAK,EAAEN,OAAO,EAAEC,GAAG,EAAEC,UAAU,CAAC;MAAA;KAC3E;EACH;CACD","names":["Conv2D","conv2DBackpropFilter","conv2DBackpropInput","conv_util","util","conv2DGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x4D","$filter","dilations","strides","pad","dataFormat","assert","tupleValuesAreOne","x","shape","filter"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\gradients\\Conv2D_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Conv2D, Conv2DAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {conv2DBackpropFilter} from '../ops/conv2d_backprop_filter';\nimport {conv2DBackpropInput} from '../ops/conv2d_backprop_input';\nimport * as conv_util from '../ops/conv_util';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const conv2DGradConfig: GradConfig = {\n  kernelName: Conv2D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x4D, $filter] = saved as [Tensor4D, Tensor4D];\n    const {dilations, strides, pad, dataFormat} =\n        attrs as unknown as Conv2DAttrs;\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    return {\n      x: () =>\n          conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad, dataFormat),\n      filter: () =>\n          conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad, dataFormat)\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}