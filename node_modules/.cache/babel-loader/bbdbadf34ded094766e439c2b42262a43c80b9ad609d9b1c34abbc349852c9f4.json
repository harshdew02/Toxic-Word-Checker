{"ast":null,"code":"import _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, ZipMismatchMode } from './iterators/lazy_iterator';\nimport { canTensorify, deepMapAndAwaitAll, isIterable } from './util/deep_map';\n// TODO(soergel): consider vectorized operations within the pipeline.\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples -- i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport var Dataset = /*#__PURE__*/function () {\n  function Dataset() {\n    _classCallCheck(this, Dataset);\n    this.size = null;\n  }\n  // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n  /**\n   * Groups elements into batches.\n   *\n   * It is assumed that each of the incoming dataset elements has the same\n   * structure -- i.e. the same set of keys at each location in an object\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\n   * element collecting all of the incoming values for that key.\n   *\n   *  * Incoming primitives are grouped into a 1-D Tensor.\n   *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is\n   *    the batch dimension.\n   *  * Incoming arrays are converted to Tensor and then batched.\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\n   *    has n+1 dimensions.\n   *  * An array that cannot be converted to Tensor produces an error.\n   *\n   * If an array should not be batched as a unit, it should first be converted\n   * to an object with integer keys.\n   *\n   * Here are a few examples:\n   *\n   * Batch a dataset of numbers:\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n   * await a.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of arrays:\n   * ```js\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n   * await b.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of objects:\n   * ```js\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n   *   {a: 8, b: 18}]).batch(4);\n   * await c.forEachAsync(e => {\n   *   console.log('{');\n   *   for(var key in e) {\n   *     console.log(key+':');\n   *     e[key].print();\n   *   }\n   *   console.log('}');\n   * })\n   * ```\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  _createClass(Dataset, [{\n    key: \"batch\",\n    value: function batch(batchSize) {\n      var smallLastBatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var base = this;\n      tf.util.assert(batchSize > 0, function () {\n        return \"batchSize needs to be positive, but it is\\n      \".concat(batchSize);\n      });\n      var size;\n      if (this.size === Infinity || this.size == null) {\n        // If the size of this dataset is infinity or null, the new size keeps the\n        // same.\n        size = this.size;\n      } else if (smallLastBatch) {\n        // If the size of this dataset is known and include small last batch, the\n        // new size is full batch count plus last batch.\n        size = Math.ceil(this.size / batchSize);\n      } else {\n        // If the size of this dataset is known and not include small last batch,\n        // the new size is full batch count.\n        size = Math.floor(this.size / batchSize);\n      }\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return base.iterator();\n            case 2:\n              return _context.abrupt(\"return\", _context.sent.columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })), size);\n    }\n    /**\n     * Concatenates this `Dataset` with another.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * const b = tf.data.array([4, 5, 6]);\n     * const c = a.concatenate(b);\n     * await c.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param dataset A `Dataset` to be concatenated onto this one.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"concatenate\",\n    value: function concatenate(dataset) {\n      var base = this;\n      var size;\n      if (this.size === Infinity || dataset.size === Infinity) {\n        // If the size of any of these two dataset is infinity, new size is\n        // infinity.\n        size = Infinity;\n      } else if (this.size != null && dataset.size != null) {\n        // If the size of both datasets are known and not infinity, new size is\n        // sum the size of these two datasets.\n        size = this.size + dataset.size;\n      } else {\n        // If neither of these two datasets has infinite size and any of these two\n        // datasets' size is null, the new size is null.\n        size = null;\n      }\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return base.iterator();\n            case 2:\n              _context2.t0 = _context2.sent;\n              _context2.next = 5;\n              return dataset.iterator();\n            case 5:\n              _context2.t1 = _context2.sent;\n              return _context2.abrupt(\"return\", _context2.t0.concatenate.call(_context2.t0, _context2.t1));\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      })), size);\n    }\n    /**\n     * Filters this dataset according to `predicate`.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n     *   .filter(x => x%2 === 0);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param predicate A function mapping a dataset element to a boolean or a\n     * `Promise` for one.\n     *\n     * @returns A `Dataset` of elements for which the predicate was true.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      var base = this;\n      var size;\n      if (this.size === Infinity) {\n        // If the size of this dataset is infinity, new size is infinity\n        size = Infinity;\n      } else {\n        // If this dataset has limited elements, new size is null because it might\n        // exhausted randomly.\n        size = null;\n      }\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return base.iterator();\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent.filter(function (x) {\n                return tf.tidy(function () {\n                  return predicate(x);\n                });\n              }));\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      })), size);\n    }\n    /**\n     * Apply a function to every element of the dataset.\n     *\n     * After the function is applied to a dataset element, any Tensors contained\n     * within that element are disposed.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param f A function to apply to each dataset element.\n     * @returns A `Promise` that resolves after all elements have been processed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"forEachAsync\",\n    value: function () {\n      var _forEachAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(f) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.iterator();\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent.forEachAsync(f));\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function forEachAsync(_x) {\n        return _forEachAsync.apply(this, arguments);\n      }\n      return forEachAsync;\n    }()\n    /**\n     * Maps this dataset through a 1-to-1 transform.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a transformed\n     *   dataset element.\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"map\",\n    value: function map(transform) {\n      var base = this;\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return base.iterator();\n            case 2:\n              return _context5.abrupt(\"return\", _context5.sent.map(function (x) {\n                return tf.tidy(function () {\n                  return transform(x);\n                });\n              }));\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      })), this.size);\n    }\n    /**\n     * Maps this dataset through an async 1-to-1 transform.\n     *\n     * ```js\n     * const a =\n     *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n     *    setTimeout(() => {\n     *      resolve(x * x);\n     *    }, Math.random()*1000 + 500);\n     *  }));\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @param transform A function mapping a dataset element to a `Promise` for a\n     *   transformed dataset element.  This transform is responsible for disposing\n     *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n     *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n     *   `map()` case).\n     *\n     * @returns A `Dataset` of transformed elements.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"mapAsync\",\n    value: function mapAsync(transform) {\n      var base = this;\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return base.iterator();\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent.mapAsync(transform));\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      })), this.size);\n    }\n    /**\n     *  Creates a `Dataset` that prefetches elements from this dataset.\n     *\n     * @param bufferSize: An integer specifying the number of elements to be\n     *   prefetched.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"prefetch\",\n    value: function prefetch(bufferSize) {\n      if (bufferSize == null) {\n        throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');\n      }\n      var base = this;\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return base.iterator();\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent.prefetch(bufferSize));\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      })), this.size);\n    }\n    /**\n     * Repeats this dataset `count` times.\n     *\n     * NOTE: If this dataset is a function of global state (e.g. a random number\n     * generator), then different repetitions may produce different elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3]).repeat(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: (Optional) An integer, representing the number of times\n     *   the dataset should be repeated. The default behavior (if `count` is\n     *   `undefined` or negative) is for the dataset be repeated indefinitely.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"repeat\",\n    value: function repeat(count) {\n      var base = this;\n      var size;\n      if (this.size != null && count > 0) {\n        // If this dataset has size and count is positive, new size is current\n        // size multiply count. This also covers the case that current size is\n        // infinity.\n        size = this.size * count;\n      } else if (count === 0) {\n        // If count is 0, new size is 0.\n        size = 0;\n      } else if (this.size != null && (count === undefined || count < 0)) {\n        // If this dataset has size and count is undefined or negative, the\n        // dataset will be repeated indefinitely and new size is infinity.\n        size = Infinity;\n      } else {\n        // If the size of this dataset is null, the new dataset's size is null.\n        size = null;\n      }\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var iteratorIterator;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              iteratorIterator = iteratorFromFunction( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n                return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) switch (_context8.prev = _context8.next) {\n                    case 0:\n                      _context8.next = 2;\n                      return base.iterator();\n                    case 2:\n                      _context8.t0 = _context8.sent;\n                      return _context8.abrupt(\"return\", {\n                        value: _context8.t0,\n                        done: false\n                      });\n                    case 4:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }, _callee8);\n              })));\n              return _context9.abrupt(\"return\", iteratorFromConcatenated(iteratorIterator.take(count)));\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      })), size);\n    }\n    /**\n     * Creates a `Dataset` that skips `count` initial elements from this dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be skipped\n     *   to form the new dataset.  If `count` is greater than the size of this\n     *   dataset, the new dataset will contain no elements.  If `count`\n     *   is `undefined` or negative, skips the entire dataset.\n     *\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"skip\",\n    value: function skip(count) {\n      var base = this;\n      var size;\n      if (this.size != null && count >= 0 && this.size >= count) {\n        // If the size of this dataset is greater than count, the new dataset's\n        // size is current size minus skipped size.This also covers the case that\n        // current size is infinity.\n        size = this.size - count;\n      } else if (this.size != null && (this.size < count || count === undefined || count < 0)) {\n        // If the size of this dataset is smaller than count, or count is\n        // undefined or negative, skips the entire dataset and the new size is 0.\n        size = 0;\n      } else {\n        // If the size of this dataset is null, the new dataset's size is null.\n        size = null;\n      }\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return base.iterator();\n            case 2:\n              return _context10.abrupt(\"return\", _context10.sent.skip(count));\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      })), size);\n    }\n    /**\n     * Pseudorandomly shuffles the elements of this dataset. This is done in a\n     * streaming manner, by sampling from a given number of prefetched elements.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param bufferSize: An integer specifying the number of elements from this\n     *   dataset from which the new dataset will sample.\n     * @param seed: (Optional) An integer specifying the random seed that will\n     *   be used to create the distribution.\n     * @param reshuffleEachIteration: (Optional) A boolean, which if true\n     *   indicates that the dataset should be pseudorandomly reshuffled each time\n     *   it is iterated over. If false, elements will be returned in the same\n     *   shuffled order on each iteration. (Defaults to `true`.)\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"shuffle\",\n    value: function shuffle(bufferSize, seed) {\n      var reshuffleEachIteration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (bufferSize == null || bufferSize < 0) {\n        if (this.size == null) {\n          throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');\n        } else {\n          throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  ' + 'If your data fits in main memory (for regular JS objects), ' + 'and/or GPU memory (for `tf.Tensor`s), consider setting ' + \"bufferSize to the dataset size (\".concat(this.size, \" elements)\"));\n        }\n      }\n      var base = this;\n      var random = seedrandom.alea(seed || tf.util.now().toString());\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var seed2;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              seed2 = random.int32();\n              if (reshuffleEachIteration) {\n                seed2 += random.int32();\n              }\n              _context11.next = 4;\n              return base.iterator();\n            case 4:\n              return _context11.abrupt(\"return\", _context11.sent.shuffle(bufferSize, seed2.toString()));\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      })), this.size);\n    }\n    /**\n     * Creates a `Dataset` with at most `count` initial elements from this\n     * dataset.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n     * await a.forEachAsync(e => console.log(e));\n     * ```\n     *\n     * @param count: The number of elements of this dataset that should be taken\n     *   to form the new dataset.  If `count` is `undefined` or negative, or if\n     *   `count` is greater than the size of this dataset, the new dataset will\n     *   contain all elements of this dataset.\n     * @returns A `Dataset`.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"take\",\n    value: function take(count) {\n      var base = this;\n      var size;\n      if (this.size != null && this.size > count) {\n        // If the size of this dataset is greater than count, the new dataset's\n        // size is count.\n        size = count;\n      } else if (this.size != null && this.size <= count) {\n        // If the size of this dataset is equal or smaller than count, the new\n        // dataset's size is the size of this dataset.\n        size = this.size;\n      } else {\n        // If the size of this dataset is null, the new dataset's size is null.\n        size = null;\n      }\n      return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return base.iterator();\n            case 2:\n              return _context12.abrupt(\"return\", _context12.sent.take(count));\n            case 3:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12);\n      })), size);\n    }\n    /**\n     * Collect all elements of this dataset into an array.\n     *\n     * Obviously this will succeed only for small datasets that fit in memory.\n     * Useful for testing and generally should be avoided if possible.\n     *\n     * ```js\n     * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n     * console.log(await a.toArray());\n     * ```\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     *\n     * @doc {heading: 'Data', subheading: 'Classes'}\n     */\n  }, {\n    key: \"toArray\",\n    value: function () {\n      var _toArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!(this.size === Infinity)) {\n                _context13.next = 2;\n                break;\n              }\n              throw new Error('Can not convert infinite data stream to array.');\n            case 2:\n              _context13.next = 4;\n              return this.iterator();\n            case 4:\n              return _context13.abrupt(\"return\", _context13.sent.toArray());\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function toArray() {\n        return _toArray.apply(this, arguments);\n      }\n      return toArray;\n    }()\n    /**\n     * Collect all elements of this dataset into an array with prefetching 100\n     * elements. This is useful for testing, because the prefetch changes the\n     * order in which the Promises are resolved along the processing pipeline.\n     * This may help expose bugs where results are dependent on the order of\n     * Promise resolution rather than on the logical order of the stream (i.e.,\n     * due to hidden mutable state).\n     *\n     * @returns A Promise for an array of elements, which will resolve\n     *   when a new stream has been obtained and fully consumed.\n     */\n  }, {\n    key: \"toArrayForTest\",\n    value: function () {\n      var _toArrayForTest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(this.size === Infinity)) {\n                _context14.next = 2;\n                break;\n              }\n              throw new Error('Can not convert infinite data stream to array.');\n            case 2:\n              _context14.next = 4;\n              return this.iterator();\n            case 4:\n              return _context14.abrupt(\"return\", _context14.sent.toArrayForTest());\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function toArrayForTest() {\n        return _toArrayForTest.apply(this, arguments);\n      }\n      return toArrayForTest;\n    }()\n  }]);\n  return Dataset;\n}();\n// TODO(soergel): deep sharded shuffle, where supported\nDataset.MAX_BUFFER_SIZE = 10000;\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\nexport function datasetFromIteratorFn(iteratorFn) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new ( /*#__PURE__*/function (_Dataset) {\n    _inherits(_class, _Dataset);\n    var _super = _createSuper(_class);\n    function _class() {\n      var _this;\n      _classCallCheck(this, _class);\n      _this = _super.apply(this, arguments);\n      _this.size = size;\n      return _this;\n    }\n    /*\n     * Provide a new stream of elements.  Note this will also start new streams\n     * from any underlying `Dataset`s.\n     */\n    _createClass(_class, [{\n      key: \"iterator\",\n      value: function () {\n        var _iterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n          return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", iteratorFn());\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }, _callee15);\n        }));\n        function iterator() {\n          return _iterator.apply(this, arguments);\n        }\n        return iterator;\n      }()\n    }]);\n    return _class;\n  }(Dataset))();\n}\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\nexport function array(items) {\n  return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n    return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          return _context16.abrupt(\"return\", iteratorFromItems(items));\n        case 1:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee16);\n  })), items.length);\n}\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\nexport function zip(datasets) {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n  var size;\n  if (Array.isArray(datasets)) {\n    for (var i = 0; i < datasets.length; i++) {\n      size = size == null ? datasets[i].size : Math.min(size, datasets[i].size);\n    }\n  } else if (datasets instanceof Object) {\n    for (var ds in datasets) {\n      size = size == null ? datasets[ds].size : Math.min(size, datasets[ds].size);\n    }\n  }\n  return datasetFromIteratorFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n    var streams;\n    return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return deepMapAndAwaitAll(datasets, function (d) {\n            if (d instanceof Dataset) {\n              return {\n                value: d.iterator(),\n                recurse: false\n              };\n            } else if (isIterable(d)) {\n              return {\n                value: null,\n                recurse: true\n              };\n            } else {\n              throw new Error('Leaves of the structure passed to zip() must be Datasets, ' + 'not primitives.');\n            }\n          });\n        case 2:\n          streams = _context17.sent;\n          return _context17.abrupt(\"return\", iteratorFromZipped(streams, ZipMismatchMode.SHORTEST));\n        case 4:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee17);\n  })), size);\n}\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows) {\n  if (rows === null) {\n    return null;\n  }\n  // use the first item to decide whether to recurse or batch here.\n  var exampleRow = rows[0];\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    var value = batchConcat(rows);\n    return {\n      value: value,\n      recurse: false\n    };\n  }\n  // the example row is an object, so recurse into it.\n  return {\n    value: null,\n    recurse: true\n  };\n}\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\nfunction batchConcat(arrays) {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays);\n  }\n}","map":{"version":3,"mappings":"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","names":["tf","seedrandom","iteratorFromConcatenated","iteratorFromFunction","iteratorFromItems","iteratorFromZipped","ZipMismatchMode","canTensorify","deepMapAndAwaitAll","isIterable","Dataset","batchSize","smallLastBatch","base","util","assert","size","Infinity","Math","ceil","floor","datasetFromIteratorFn","iterator","columnMajorBatch","deepBatchConcat","dataset","concatenate","predicate","filter","tidy","x","f","forEachAsync","transform","map","mapAsync","bufferSize","RangeError","prefetch","count","undefined","iteratorIterator","value","done","take","skip","seed","reshuffleEachIteration","random","alea","now","toString","seed2","int32","shuffle","Error","toArray","toArrayForTest","iteratorFn","array","items","length","zip","datasets","Array","isArray","i","min","Object","ds","d","recurse","streams","SHORTEST","rows","exampleRow","batchConcat","arrays","Tensor","stack","tensor"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-data\\src\\dataset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {TensorContainer, TensorLike} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, LazyIterator, ZipMismatchMode} from './iterators/lazy_iterator';\nimport {Container} from './types';\nimport {canTensorify, deepMapAndAwaitAll, DeepMapResult, isIterable} from './util/deep_map';\n\n/**\n * A nested structure of Datasets, used as the input to zip().\n */\nexport type DatasetContainer = Container<Dataset<TensorContainer>>;\n\n// TODO(soergel): consider vectorized operations within the pipeline.\n\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples -- i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport abstract class Dataset<T extends tf.TensorContainer> {\n  /*\n   * Provide a new stream of elements.  Note this will also start new streams\n   * from any underlying `Dataset`s.\n   *\n   * CAUTION: Any Tensors contained within the elements returned from\n   * this stream *must* be manually disposed to avoid a GPU memory leak.\n   * The tf.tidy() approach cannot be used in an asynchronous context.\n   */\n  abstract iterator(): Promise<LazyIterator<T>>;\n\n  readonly size: number = null;\n\n  // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n\n  /**\n   * Groups elements into batches.\n   *\n   * It is assumed that each of the incoming dataset elements has the same\n   * structure -- i.e. the same set of keys at each location in an object\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\n   * element collecting all of the incoming values for that key.\n   *\n   *  * Incoming primitives are grouped into a 1-D Tensor.\n   *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is\n   *    the batch dimension.\n   *  * Incoming arrays are converted to Tensor and then batched.\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\n   *    has n+1 dimensions.\n   *  * An array that cannot be converted to Tensor produces an error.\n   *\n   * If an array should not be batched as a unit, it should first be converted\n   * to an object with integer keys.\n   *\n   * Here are a few examples:\n   *\n   * Batch a dataset of numbers:\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n   * await a.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of arrays:\n   * ```js\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n   * await b.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of objects:\n   * ```js\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n   *   {a: 8, b: 18}]).batch(4);\n   * await c.forEachAsync(e => {\n   *   console.log('{');\n   *   for(var key in e) {\n   *     console.log(key+':');\n   *     e[key].print();\n   *   }\n   *   console.log('}');\n   * })\n   * ```\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  batch(batchSize: number, smallLastBatch = true): Dataset<tf.TensorContainer> {\n    const base = this;\n    tf.util.assert(\n        batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n    let size;\n    if (this.size === Infinity || this.size == null) {\n      // If the size of this dataset is infinity or null, the new size keeps the\n      // same.\n      size = this.size;\n    } else if (smallLastBatch) {\n      // If the size of this dataset is known and include small last batch, the\n      // new size is full batch count plus last batch.\n      size = Math.ceil(this.size / batchSize);\n    } else {\n      // If the size of this dataset is known and not include small last batch,\n      // the new size is full batch count.\n      size = Math.floor(this.size / batchSize);\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator())\n          .columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n    }, size);\n  }\n\n  /**\n   * Concatenates this `Dataset` with another.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * const b = tf.data.array([4, 5, 6]);\n   * const c = a.concatenate(b);\n   * await c.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param dataset A `Dataset` to be concatenated onto this one.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  concatenate(dataset: Dataset<T>): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity || dataset.size === Infinity) {\n      // If the size of any of these two dataset is infinity, new size is\n      // infinity.\n      size = Infinity;\n    } else if (this.size != null && dataset.size != null) {\n      // If the size of both datasets are known and not infinity, new size is\n      // sum the size of these two datasets.\n      size = this.size + dataset.size;\n    } else {\n      // If neither of these two datasets has infinite size and any of these two\n      // datasets' size is null, the new size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () =>\n            (await base.iterator()).concatenate(await dataset.iterator()),\n        size);\n  }\n\n  /**\n   * Filters this dataset according to `predicate`.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n   *   .filter(x => x%2 === 0);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param predicate A function mapping a dataset element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `Dataset` of elements for which the predicate was true.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  filter(predicate: (value: T) => boolean): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity) {\n      // If the size of this dataset is infinity, new size is infinity\n      size = Infinity;\n    } else {\n      // If this dataset has limited elements, new size is null because it might\n      // exhausted randomly.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n    }, size);\n  }\n\n  /**\n   * Apply a function to every element of the dataset.\n   *\n   * After the function is applied to a dataset element, any Tensors contained\n   * within that element are disposed.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param f A function to apply to each dataset element.\n   * @returns A `Promise` that resolves after all elements have been processed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async forEachAsync(f: (input: T) => void): Promise<void> {\n    return (await this.iterator()).forEachAsync(f);\n  }\n\n  /**\n   * Maps this dataset through a 1-to-1 transform.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a transformed\n   *   dataset element.\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  map<O extends tf.TensorContainer>(transform: (value: T) => O): Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n    }, this.size);\n  }\n\n  /**\n   * Maps this dataset through an async 1-to-1 transform.\n   *\n   * ```js\n   * const a =\n   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n   *    setTimeout(() => {\n   *      resolve(x * x);\n   *    }, Math.random()*1000 + 500);\n   *  }));\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a `Promise` for a\n   *   transformed dataset element.  This transform is responsible for disposing\n   *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n   *   `map()` case).\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  mapAsync<O extends tf.TensorContainer>(transform: (value: T) => Promise<O>):\n      Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).mapAsync(transform);\n    }, this.size);\n  }\n\n  /**\n   *  Creates a `Dataset` that prefetches elements from this dataset.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  prefetch(bufferSize: number): Dataset<T> {\n    if (bufferSize == null) {\n      throw new RangeError(\n          '`Dataset.prefetch()` requires bufferSize to be specified.');\n    }\n\n    const base = this;\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).prefetch(bufferSize), this.size);\n  }\n\n  /**\n   * Repeats this dataset `count` times.\n   *\n   * NOTE: If this dataset is a function of global state (e.g. a random number\n   * generator), then different repetitions may produce different elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).repeat(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: (Optional) An integer, representing the number of times\n   *   the dataset should be repeated. The default behavior (if `count` is\n   *   `undefined` or negative) is for the dataset be repeated indefinitely.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  repeat(count?: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count > 0) {\n      // If this dataset has size and count is positive, new size is current\n      // size multiply count. This also covers the case that current size is\n      // infinity.\n      size = this.size * count;\n    } else if (count === 0) {\n      // If count is 0, new size is 0.\n      size = 0;\n    } else if (this.size != null && (count === undefined || count < 0)) {\n      // If this dataset has size and count is undefined or negative, the\n      // dataset will be repeated indefinitely and new size is infinity.\n      size = Infinity;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      const iteratorIterator = iteratorFromFunction(\n          async () => ({value: await base.iterator(), done: false}));\n      return iteratorFromConcatenated(iteratorIterator.take(count));\n    }, size);\n  }\n\n  /**\n   * Creates a `Dataset` that skips `count` initial elements from this dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be skipped\n   *   to form the new dataset.  If `count` is greater than the size of this\n   *   dataset, the new dataset will contain no elements.  If `count`\n   *   is `undefined` or negative, skips the entire dataset.\n   *\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  skip(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count >= 0 && this.size >= count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is current size minus skipped size.This also covers the case that\n      // current size is infinity.\n      size = this.size - count;\n    } else if (\n        this.size != null &&\n        (this.size < count || count === undefined || count < 0)) {\n      // If the size of this dataset is smaller than count, or count is\n      // undefined or negative, skips the entire dataset and the new size is 0.\n      size = 0;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).skip(count), size);\n  }\n\n  // TODO(soergel): deep sharded shuffle, where supported\n\n  static readonly MAX_BUFFER_SIZE = 10000;\n\n  /**\n   * Pseudorandomly shuffles the elements of this dataset. This is done in a\n   * streaming manner, by sampling from a given number of prefetched elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param bufferSize: An integer specifying the number of elements from this\n   *   dataset from which the new dataset will sample.\n   * @param seed: (Optional) An integer specifying the random seed that will\n   *   be used to create the distribution.\n   * @param reshuffleEachIteration: (Optional) A boolean, which if true\n   *   indicates that the dataset should be pseudorandomly reshuffled each time\n   *   it is iterated over. If false, elements will be returned in the same\n   *   shuffled order on each iteration. (Defaults to `true`.)\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  shuffle(bufferSize: number, seed?: string, reshuffleEachIteration = true):\n      Dataset<T> {\n    if (bufferSize == null || bufferSize < 0) {\n      if (this.size == null) {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.');\n      } else {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.  ' +\n            'If your data fits in main memory (for regular JS objects), ' +\n            'and/or GPU memory (for `tf.Tensor`s), consider setting ' +\n            `bufferSize to the dataset size (${this.size} elements)`);\n      }\n    }\n    const base = this;\n    const random = seedrandom.alea(seed || tf.util.now().toString());\n    return datasetFromIteratorFn(async () => {\n      let seed2 = random.int32();\n      if (reshuffleEachIteration) {\n        seed2 += random.int32();\n      }\n      return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n    }, this.size);\n  }\n\n  /**\n   * Creates a `Dataset` with at most `count` initial elements from this\n   * dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be taken\n   *   to form the new dataset.  If `count` is `undefined` or negative, or if\n   *   `count` is greater than the size of this dataset, the new dataset will\n   *   contain all elements of this dataset.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  take(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && this.size > count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is count.\n      size = count;\n    } else if (this.size != null && this.size <= count) {\n      // If the size of this dataset is equal or smaller than count, the new\n      // dataset's size is the size of this dataset.\n      size = this.size;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).take(count), size);\n  }\n\n  /**\n   * Collect all elements of this dataset into an array.\n   *\n   * Obviously this will succeed only for small datasets that fit in memory.\n   * Useful for testing and generally should be avoided if possible.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async toArray() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArray();\n  }\n\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   */\n  async toArrayForTest() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArrayForTest();\n  }\n}\n\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\nexport function datasetFromIteratorFn<T extends tf.TensorContainer>(\n    iteratorFn: () => Promise<LazyIterator<T>>,\n    size: number = null): Dataset<T> {\n  return new class extends Dataset<T> {\n    override size = size;\n\n    /*\n     * Provide a new stream of elements.  Note this will also start new streams\n     * from any underlying `Dataset`s.\n     */\n    async iterator(): Promise<LazyIterator<T>> {\n      return iteratorFn();\n    }\n  }\n  ();\n}\n\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\nexport function array<T extends tf.TensorContainer>(items: T[]): Dataset<T> {\n  return datasetFromIteratorFn(\n      async () => iteratorFromItems(items), items.length);\n}\n\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\nexport function zip<O extends tf.TensorContainer>(datasets: DatasetContainer):\n    Dataset<O> {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n  let size;\n  if (Array.isArray(datasets)) {\n    for (let i = 0; i < datasets.length; i++) {\n      size = size == null ? (datasets[i] as Dataset<O>).size :\n                            Math.min(size, (datasets[i] as Dataset<O>).size);\n    }\n  } else if (datasets instanceof Object) {\n    for (const ds in datasets) {\n      size = size == null ? (datasets[ds] as Dataset<O>).size :\n                            Math.min(size, (datasets[ds] as Dataset<O>).size);\n    }\n  }\n  return datasetFromIteratorFn<O>(async () => {\n    const streams = await deepMapAndAwaitAll(datasets, d => {\n      if (d instanceof Dataset) {\n        return {value: d.iterator(), recurse: false};\n      } else if (isIterable(d)) {\n        return {value: null, recurse: true};\n      } else {\n        throw new Error(\n            'Leaves of the structure passed to zip() must be Datasets, ' +\n            'not primitives.');\n      }\n    });\n    return iteratorFromZipped<O>(streams, ZipMismatchMode.SHORTEST);\n  }, size);\n}\n\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows: any[]): DeepMapResult {\n  if (rows === null) {\n    return null;\n  }\n\n  // use the first item to decide whether to recurse or batch here.\n  const exampleRow = rows[0];\n\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    const value = batchConcat(rows);\n    return {value, recurse: false};\n  }\n\n  // the example row is an object, so recurse into it.\n  return {value: null, recurse: true};\n}\n\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\nfunction batchConcat<T extends(TensorLike | tf.Tensor)>(arrays: T[]):\n    tf.Tensor {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays as tf.Tensor[]);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays as TensorLike);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}