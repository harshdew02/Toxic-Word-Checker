{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var value = inputs.value;\n  var axis = attrs.axis;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  var x = value;\n  var xRank = x.shape.length;\n  var num = value.shape[axis];\n  var outShape = new Array(xRank - 1);\n  var outIndex = 0;\n  for (var i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n  var toDispose = [];\n  var begin = new Array(xRank).fill(0);\n  var size = x.shape.slice();\n  size[axis] = 1;\n  var res = new Array(num);\n  for (var _i = 0; _i < res.length; _i++) {\n    begin[axis] = _i;\n    var sliced = slice({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        begin: begin,\n        size: size\n      }\n    });\n    var reshaped = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend: backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    res[_i] = reshaped;\n    toDispose.push(sliced);\n  }\n  toDispose.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return res;\n}\nexport var unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,MAAM,QAAkC,uBAAuB;AAI7G,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,KAAK,QAAO,SAAS;AAE7B,OAAM,SAAUC,MAAM,CAClBC,IACyE;EAE3E,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,KAAK,GAAIH,MAAM,CAAfG,KAAK;EACZ,IAAKC,IAAI,GAAIF,KAAK,CAAbE,IAAI;EAET,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,IAAID,KAAK,CAACE,KAAK,CAACC,MAAM;;EAG5B,IAAMC,CAAC,GAAGJ,KAAK;EACf,IAAMK,KAAK,GAAGD,CAAC,CAACF,KAAK,CAACC,MAAM;EAE5B,IAAMG,GAAG,GAAGN,KAAK,CAACE,KAAK,CAACD,IAAI,CAAC;EAC7B,IAAMM,QAAQ,GAAa,IAAIC,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC;EAC/C,IAAII,QAAQ,GAAG,CAAC;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,EAAEK,CAAC,EAAE,EAAE;IAC9B,IAAIA,CAAC,KAAKT,IAAI,EAAE;MACdM,QAAQ,CAACE,QAAQ,EAAE,CAAC,GAAGL,CAAC,CAACF,KAAK,CAACQ,CAAC,CAAC;;;EAIrC,IAAMC,SAAS,GAAG,EAAE;EAEpB,IAAMC,KAAK,GAAG,IAAIJ,KAAK,CAACH,KAAK,CAAC,CAACQ,IAAI,CAAC,CAAC,CAAC;EACtC,IAAMC,IAAI,GAAGV,CAAC,CAACF,KAAK,CAACR,KAAK,EAAE;EAC5BoB,IAAI,CAACb,IAAI,CAAC,GAAG,CAAC;EACd,IAAMc,GAAG,GAAiB,IAAIP,KAAK,CAACF,GAAG,CAAC;EACxC,KAAK,IAAII,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGK,GAAG,CAACZ,MAAM,EAAEO,EAAC,EAAE,EAAE;IACnCE,KAAK,CAACX,IAAI,CAAC,GAAGS,EAAC;IACf,IAAMM,MAAM,GAAGtB,KAAK,CAAC;MAACG,MAAM,EAAE;QAACO,CAAC,EAADA;MAAC,CAAC;MAAEN,OAAO,EAAPA,OAAO;MAAEC,KAAK,EAAE;QAACa,KAAK,EAALA,KAAK;QAAEE,IAAI,EAAJA;MAAI;IAAC,CAAC,CAAC;IAClE,IAAMG,QAAQ,GACVxB,OAAO,CAAC;MAACI,MAAM,EAAE;QAACO,CAAC,EAAEY;MAAM,CAAC;MAAElB,OAAO,EAAPA,OAAO;MAAEC,KAAK,EAAE;QAACG,KAAK,EAAEK;MAAQ;IAAC,CAAC,CAAC;IACrEQ,GAAG,CAACL,EAAC,CAAC,GAAGO,QAAQ;IAEjBN,SAAS,CAACO,IAAI,CAACF,MAAM,CAAC;;EAGxBL,SAAS,CAACQ,OAAO,CAAC,WAAC;IAAA,OAAIrB,OAAO,CAACsB,6BAA6B,CAACC,CAAC,CAAC;EAAA,EAAC;EAChE,OAAON,GAAG;AACZ;AAEA,OAAO,IAAMO,YAAY,GAAiB;EACxCC,UAAU,EAAE/B,MAAM;EAClBgC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE9B;CACb","names":["Unpack","reshape","slice","unpack","args","inputs","backend","attrs","value","axis","shape","length","x","xRank","num","outShape","Array","outIndex","i","toDispose","begin","fill","size","res","sliced","reshaped","push","forEach","disposeIntermediateTensorInfo","t","unpackConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Unpack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}