{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture } from './gpgpu_util';\nimport { getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureUsage } from './tex_util';\nexport var TextureManager = /*#__PURE__*/function () {\n  function TextureManager(gpgpu) {\n    _classCallCheck(this, TextureManager);\n    this.gpgpu = gpgpu;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0; // How many bytes that have been allocated\n    // are available for reuse.\n    this.freeTextures = {};\n    this.logEnabled = false;\n    this.usedTextures = {};\n  }\n  _createClass(TextureManager, [{\n    key: \"acquireTexture\",\n    value: function acquireTexture(shapeRC, usage, isPacked) {\n      var physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n      var shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n      if (!(shapeKey in this.freeTextures)) {\n        this.freeTextures[shapeKey] = [];\n      }\n      if (!(shapeKey in this.usedTextures)) {\n        this.usedTextures[shapeKey] = [];\n      }\n      var texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n      if (this.freeTextures[shapeKey].length > 0) {\n        this.numFreeTextures--;\n        this.numUsedTextures++;\n        this._numBytesFree -= texBytes;\n        this.log();\n        var _newTexture = this.freeTextures[shapeKey].shift();\n        this.usedTextures[shapeKey].push(_newTexture);\n        return _newTexture;\n      }\n      var newTexture;\n      if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n        newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n      } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n        newTexture = this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n      } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n        newTexture = this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n      } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n        newTexture = this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n      } else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n        newTexture = this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n      }\n      this.usedTextures[shapeKey].push(newTexture);\n      this.numUsedTextures++;\n      this._numBytesAllocated += texBytes;\n      this.log();\n      return newTexture;\n    }\n  }, {\n    key: \"releaseTexture\",\n    value: function releaseTexture(texture, shape, logicalTexType, isPacked) {\n      if (this.freeTextures == null) {\n        // Already disposed.\n        return;\n      }\n      var physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n      var shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n      if (!(shapeKey in this.freeTextures)) {\n        this.freeTextures[shapeKey] = [];\n      }\n      var texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n      var deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n      if (deleteTexThreshold !== -1 && this._numBytesAllocated > deleteTexThreshold) {\n        this.gpgpu.deleteMatrixTexture(texture.texture);\n        this._numBytesAllocated -= texBytes;\n      } else {\n        this.freeTextures[shapeKey].push(texture);\n        this.numFreeTextures++;\n        this._numBytesFree += texBytes;\n      }\n      this.numUsedTextures--;\n      var texList = this.usedTextures[shapeKey];\n      var texIndex = texList.indexOf(texture);\n      if (texIndex < 0) {\n        throw new Error('Cannot release a texture that was never provided by this ' + 'texture manager');\n      }\n      texList.splice(texIndex, 1);\n      this.log();\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      if (!this.logEnabled) {\n        return;\n      }\n      var total = this.numFreeTextures + this.numUsedTextures;\n      console.log('Free/Used', \"\".concat(this.numFreeTextures, \" / \").concat(this.numUsedTextures), \"(\".concat(total, \")\"));\n      var freeRatio = this._numBytesFree / this._numBytesAllocated;\n      console.log(\"Bytes allocated: \".concat(this._numBytesAllocated));\n      console.log(\"Bytes unused: \".concat(this._numBytesFree, \" (\").concat(Math.round(100 * freeRatio), \"%)\"));\n    }\n  }, {\n    key: \"numBytesAllocated\",\n    get: function get() {\n      return this._numBytesAllocated;\n    }\n  }, {\n    key: \"numBytesFree\",\n    get: function get() {\n      return this._numBytesFree;\n    }\n  }, {\n    key: \"getNumUsedTextures\",\n    value: function getNumUsedTextures() {\n      return this.numUsedTextures;\n    }\n  }, {\n    key: \"getNumFreeTextures\",\n    value: function getNumFreeTextures() {\n      return this.numFreeTextures;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this = this;\n      if (this.freeTextures == null) {\n        // Already disposed.\n        return;\n      }\n      for (var texShape in this.freeTextures) {\n        this.freeTextures[texShape].forEach(function (tex) {\n          _this.gpgpu.deleteMatrixTexture(tex.texture);\n        });\n      }\n      for (var _texShape in this.usedTextures) {\n        this.usedTextures[_texShape].forEach(function (tex) {\n          _this.gpgpu.deleteMatrixTexture(tex.texture);\n        });\n      }\n      this.freeTextures = null;\n      this.usedTextures = null;\n      this.numUsedTextures = 0;\n      this.numFreeTextures = 0;\n      this._numBytesAllocated = 0;\n      this._numBytesFree = 0;\n    }\n  }]);\n  return TextureManager;\n}();\nfunction numBytesForInternalFormat(gl, internalFormat) {\n  // tslint:disable-next-line:no-any\n  var glany = gl;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(\"Unknown internal format \".concat(internalFormat));\n}\nexport function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  var internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n  var numElements;\n  if (isPacked) {\n    var _getPackedMatrixTextu = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]),\n      _getPackedMatrixTextu2 = _slicedToArray(_getPackedMatrixTextu, 2),\n      packedWidth = _getPackedMatrixTextu2[0],\n      packedHeight = _getPackedMatrixTextu2[1];\n    numElements = packedWidth * packedHeight;\n  } else {\n    var _getUnpackedMatrixTex = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]),\n      _getUnpackedMatrixTex2 = _slicedToArray(_getUnpackedMatrixTex, 2),\n      width = _getUnpackedMatrixTex2[0],\n      height = _getUnpackedMatrixTex2[1];\n    numElements = width * height;\n  }\n  var bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(\"Unknown physical texture type \".concat(physicalTexType));\n  }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (logicalTexType === TextureUsage.DOWNLOAD || logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(\"Unknown logical texture type \".concat(logicalTexType));\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n  return \"\".concat(shapeRowsCol[0], \"_\").concat(shapeRowsCol[1], \"_\").concat(physicalTexType, \"_\").concat(isPacked);\n}","map":{"version":3,"mappings":"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","names":["env","getInternalFormatForFloat16MatrixTexture","getInternalFormatForFloat16PackedMatrixTexture","getInternalFormatForFloat32MatrixTexture","getInternalFormatForPackedMatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","getPackedMatrixTextureShapeWidthHeight","getUnpackedMatrixTextureShapeWidthHeight","PhysicalTextureType","TextureUsage","TextureManager","gpgpu","shapeRC","usage","isPacked","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","gl","textureConfig","length","numFreeTextures","numUsedTextures","_numBytesFree","log","newTexture","shift","push","PACKED_2X2_FLOAT32","createPackedMatrixTexture","PACKED_2X2_FLOAT16","createFloat16PackedMatrixTexture","UNPACKED_FLOAT32","createFloat32MatrixTexture","UNPACKED_FLOAT16","createFloat16MatrixTexture","PACKED_4X1_UNSIGNED_BYTE","createUnsignedBytesMatrixTexture","_numBytesAllocated","texture","shape","logicalTexType","deleteTexThreshold","get","deleteMatrixTexture","texList","texIndex","indexOf","Error","splice","logEnabled","total","console","freeRatio","Math","round","texShape","forEach","tex","numBytesForInternalFormat","internalFormat","glany","R32F","R16F","RGBA32F","RGBA","RGBA16F","RGBA8","internalFormatForPhysicalTexType","numElements","packedWidth","packedHeight","width","height","bytesPerElement","getPhysicalTextureForRendering","getBool","UPLOAD","RENDER","DOWNLOAD","PIXELS","shapeRowsCol"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\texture_manager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: Texture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: Texture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}