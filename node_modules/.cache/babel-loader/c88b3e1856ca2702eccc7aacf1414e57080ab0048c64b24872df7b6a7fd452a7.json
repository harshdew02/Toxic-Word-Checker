{"ast":null,"code":"import _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport var TensorBuffer = /*#__PURE__*/function () {\n  function TensorBuffer(shape, dtype, values) {\n    var _this = this;\n    _classCallCheck(this, TensorBuffer);\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = util.sizeFromShape(shape);\n    if (values != null) {\n      var n = values.length;\n      util.assert(n === this.size, function () {\n        return \"Length of values '\".concat(n, \"' does not match the size \") + \"inferred by the shape '\".concat(_this.size, \"'.\");\n      });\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create \" + \"a TensorBuffer for the real and imaginary parts separately and \" + \"call tf.complex(real, imag).\");\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  _createClass(TensorBuffer, [{\n    key: \"set\",\n    value: function set(value) {\n      var _this2 = this;\n      for (var _len = arguments.length, locs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        locs[_key - 1] = arguments[_key];\n      }\n      if (locs.length === 0) {\n        locs = [0];\n      }\n      util.assert(locs.length === this.rank, function () {\n        return \"The number of provided coordinates (\".concat(locs.length, \") must \") + \"match the rank (\".concat(_this2.rank, \")\");\n      });\n      var index = this.locToIndex(locs);\n      this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n  }, {\n    key: \"get\",\n    value: function get() {\n      for (var _len2 = arguments.length, locs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        locs[_key2] = arguments[_key2];\n      }\n      if (locs.length === 0) {\n        locs = [0];\n      }\n      var i = 0;\n      for (var _i = 0, _locs = locs; _i < _locs.length; _i++) {\n        var loc = _locs[_i];\n        if (loc < 0 || loc >= this.shape[i]) {\n          var msg = \"Requested out of range element at \".concat(locs, \". \") + \"  Buffer shape=\".concat(this.shape);\n          throw new Error(msg);\n        }\n        i++;\n      }\n      var index = locs[locs.length - 1];\n      for (var _i2 = 0; _i2 < locs.length - 1; ++_i2) {\n        index += this.strides[_i2] * locs[_i2];\n      }\n      return this.values[index];\n    }\n  }, {\n    key: \"locToIndex\",\n    value: function locToIndex(locs) {\n      if (this.rank === 0) {\n        return 0;\n      } else if (this.rank === 1) {\n        return locs[0];\n      }\n      var index = locs[locs.length - 1];\n      for (var i = 0; i < locs.length - 1; ++i) {\n        index += this.strides[i] * locs[i];\n      }\n      return index;\n    }\n  }, {\n    key: \"indexToLoc\",\n    value: function indexToLoc(index) {\n      if (this.rank === 0) {\n        return [];\n      } else if (this.rank === 1) {\n        return [index];\n      }\n      var locs = new Array(this.shape.length);\n      for (var i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / this.strides[i]);\n        index -= locs[i] * this.strides[i];\n      }\n      locs[locs.length - 1] = index;\n      return locs;\n    }\n  }, {\n    key: \"rank\",\n    get: function get() {\n      return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n  }, {\n    key: \"toTensor\",\n    value: function toTensor() {\n      return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n  }]);\n  return TensorBuffer;\n}();\n// For tracking tensor creation and disposal.\nvar trackerFn = null;\n// Used by chaining methods to call into ops.\nvar opHandler = null;\n// Used to warn about deprecated methods.\nvar deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n  trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n  opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport var Tensor = /*#__PURE__*/function () {\n  function Tensor(shape, dtype, dataId, id) {\n    _classCallCheck(this, Tensor);\n    /** Whether this tensor has been globally kept. */\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n  }\n  _createClass(Tensor, [{\n    key: \"rank\",\n    get: function get() {\n      return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"buffer\",\n    value: function () {\n      var _buffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var vals;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.data();\n            case 2:\n              vals = _context.sent;\n              return _context.abrupt(\"return\", opHandler.buffer(this.shape, this.dtype, vals));\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function buffer() {\n        return _buffer.apply(this, arguments);\n      }\n      return buffer;\n    }()\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"bufferSync\",\n    value: function bufferSync() {\n      return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"array\",\n    value: function () {\n      var _array = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var vals;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.data();\n            case 2:\n              vals = _context2.sent;\n              return _context2.abrupt(\"return\", toNestedArray(this.shape, vals, this.dtype === 'complex64'));\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function array() {\n        return _array.apply(this, arguments);\n      }\n      return array;\n    }()\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"arraySync\",\n    value: function arraySync() {\n      return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"data\",\n    value: function () {\n      var _data = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var data, bytes;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.throwIfDisposed();\n              data = trackerFn().read(this.dataId);\n              if (!(this.dtype === 'string')) {\n                _context3.next = 13;\n                break;\n              }\n              _context3.next = 5;\n              return data;\n            case 5:\n              bytes = _context3.sent;\n              _context3.prev = 6;\n              return _context3.abrupt(\"return\", bytes.map(function (b) {\n                return util.decodeString(b);\n              }));\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](6);\n              throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n            case 13:\n              return _context3.abrupt(\"return\", data);\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[6, 10]]);\n      }));\n      function data() {\n        return _data.apply(this, arguments);\n      }\n      return data;\n    }()\n    /**\n     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n     * and `data()`, this method prevents data from being downloaded to CPU.\n     *\n     * For WebGL backend, the data will be stored on a densely packed texture.\n     * This means that the texture will use the RGBA channels to store value.\n     *\n     * For WebGPU backend, the data will be stored on a buffer. There is no\n     * parameter, so can not use a user-defined size to create the buffer.\n     *\n     * @param options:\n     *     For WebGL,\n     *         - customTexShape: Optional. If set, will use the user defined\n     *     texture shape to create the texture.\n     *\n     * @returns For WebGL backend, a GPUData contains the new texture and\n     *     its information.\n     *     {\n     *        tensorRef: The tensor that is associated with this texture,\n     *        texture: WebGLTexture,\n     *        texShape: [number, number] // [height, width]\n     *     }\n     *\n     *     For WebGPU backend, a GPUData contains the new buffer and\n     *     its information.\n     *     {\n     *        tensorRef: The tensor that is associated with this buffer,\n     *        buffer: GPUBuffer,\n     *        bufSize: number\n     *     }\n     *\n     *     Remember to dispose the GPUData after it is used by\n     *     `res.tensorRef.dispose()`.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"dataToGPU\",\n    value: function dataToGPU(options) {\n      this.throwIfDisposed();\n      return trackerFn().readToGPU(this.dataId, options);\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"dataSync\",\n    value: function dataSync() {\n      this.throwIfDisposed();\n      var data = trackerFn().readSync(this.dataId);\n      if (this.dtype === 'string') {\n        try {\n          return data.map(function (b) {\n            return util.decodeString(b);\n          });\n        } catch (_a) {\n          throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n        }\n      }\n      return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n  }, {\n    key: \"bytes\",\n    value: function () {\n      var _bytes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this.throwIfDisposed();\n              _context4.next = 3;\n              return trackerFn().read(this.dataId);\n            case 3:\n              data = _context4.sent;\n              if (!(this.dtype === 'string')) {\n                _context4.next = 8;\n                break;\n              }\n              return _context4.abrupt(\"return\", data);\n            case 8:\n              return _context4.abrupt(\"return\", new Uint8Array(data.buffer));\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function bytes() {\n        return _bytes.apply(this, arguments);\n      }\n      return bytes;\n    }()\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.isDisposed) {\n        return;\n      }\n      trackerFn().disposeTensor(this);\n      this.isDisposedInternal = true;\n    }\n  }, {\n    key: \"isDisposed\",\n    get: function get() {\n      return this.isDisposedInternal;\n    }\n  }, {\n    key: \"throwIfDisposed\",\n    value: function throwIfDisposed() {\n      if (this.isDisposed) {\n        throw new Error(\"Tensor is disposed.\");\n      }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"print\",\n    value: function print() {\n      var verbose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      this.throwIfDisposed();\n      return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var verbose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vals = this.dataSync();\n      return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n  }, {\n    key: \"cast\",\n    value: function cast(dtype) {\n      this.throwIfDisposed();\n      return opHandler.cast(this, dtype);\n    }\n  }, {\n    key: \"variable\",\n    value: function variable() {\n      var trainable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var name = arguments.length > 1 ? arguments[1] : undefined;\n      var dtype = arguments.length > 2 ? arguments[2] : undefined;\n      this.throwIfDisposed();\n      return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n  }]);\n  return Tensor;\n}();\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: function value(instance) {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;\n  }\n});\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', function () {\n    return Tensor;\n  });\n}\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport var Variable = /*#__PURE__*/function (_Tensor) {\n  _inherits(Variable, _Tensor);\n  var _super = _createSuper(Variable);\n  function Variable(initialValue, trainable, name, tensorId) {\n    var _this3;\n    _classCallCheck(this, Variable);\n    _this3 = _super.call(this, initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    _this3.trainable = trainable;\n    _this3.name = name;\n    return _this3;\n  }\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  _createClass(Variable, [{\n    key: \"assign\",\n    value: function assign(newValue) {\n      if (newValue.dtype !== this.dtype) {\n        throw new Error(\"dtype of the new value (\".concat(newValue.dtype, \") and \") + \"previous value (\".concat(this.dtype, \") must match\"));\n      }\n      if (!util.arraysEqual(newValue.shape, this.shape)) {\n        throw new Error(\"shape of the new value (\".concat(newValue.shape, \") and \") + \"previous value (\".concat(this.shape, \") must match\"));\n      }\n      trackerFn().disposeTensor(this);\n      this.dataId = newValue.dataId;\n      trackerFn().incRef(this, null /* backend */);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      trackerFn().disposeVariable(this);\n      this.isDisposedInternal = true;\n    }\n  }]);\n  return Variable;\n}(Tensor);\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: function value(instance) {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});","map":{"version":3,"mappings":"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","names":["getGlobal","tensorToString","util","computeStrides","toNestedArray","TensorBuffer","shape","dtype","values","slice","size","sizeFromShape","n","length","assert","Error","getArrayFromDType","strides","value","locs","rank","index","locToIndex","i","loc","msg","Array","Math","floor","trackerFn","makeTensor","opHandler","deprecationWarningFn","setTensorTracker","fn","setOpHandler","handler","setDeprecationWarningFn","Tensor","dataId","id","rankType","toString","data","vals","buffer","dataSync","throwIfDisposed","read","bytes","map","decodeString","b","options","readToGPU","readSync","Uint8Array","isDisposed","disposeTensor","isDisposedInternal","verbose","print","clone","cast","trainable","name","makeVariable","Object","defineProperty","Symbol","hasInstance","instance","getGlobalTensorClass","Variable","initialValue","tensorId","newValue","arraysEqual","incRef","disposeVariable","assign","Function"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\tensor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\n\nimport {getGlobal} from './global_util';\nimport {TensorInfo, DataId} from './tensor_info';\nimport {tensorToString} from './tensor_format';\nimport {ArrayMap, BackendValues, DataType, DataTypeMap, DataValues, NumericDataType, Rank, ShapeMap, SingleValueMap, TypedArray} from './types';\nimport * as util from './util';\nimport {computeStrides, toNestedArray} from './util';\n\nexport interface TensorData<D extends DataType> {\n  dataId?: DataId;\n  values?: DataTypeMap[D];\n}\n\n// This interface mimics KernelBackend (in backend.ts), which would create a\n// circular dependency if imported.\nexport interface Backend {}\n\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer<R extends Rank, D extends DataType = 'float32'> {\n  size: number;\n  shape: ShapeMap[R];\n  strides: number[];\n  values: DataTypeMap[D];\n\n  constructor(shape: ShapeMap[R], public dtype: D, values?: DataTypeMap[D]) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.size = util.sizeFromShape(shape);\n\n    if (values != null) {\n      const n = values.length;\n      util.assert(\n          n === this.size,\n          () => `Length of values '${n}' does not match the size ` +\n              `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `complex64 dtype TensorBuffers are not supported. Please create ` +\n          `a TensorBuffer for the real and imaginary parts separately and ` +\n          `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n\n  /**\n   * Sets a value in the buffer at a given location.\n   *\n   * @param value The value to set.\n   * @param locs  The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  set(value: SingleValueMap[D], ...locs: number[]): void {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(\n        locs.length === this.rank,\n        () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n\n    const index = this.locToIndex(locs);\n    this.values[index] = value as number;\n  }\n\n  /**\n   * Returns the value in the buffer at the provided location.\n   *\n   * @param locs The location indices.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  get(...locs: number[]): SingleValueMap[D] {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` +\n            `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index] as SingleValueMap[D];\n  }\n\n  locToIndex(locs: number[]): number {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n\n  indexToLoc(index: number): number[] {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs: number[] = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n\n  get rank() {\n    return this.shape.length;\n  }\n\n  /**\n   * Creates an immutable `tf.Tensor` object from the buffer.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\n   */\n  toTensor(): Tensor<R> {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype) as\n        Tensor<R>;\n  }\n}\n\nexport interface DataToGPUWebGLOption {\n  customTexShape?: [number, number];\n}\n\nexport type DataToGPUOptions = DataToGPUWebGLOption;\n\nexport interface GPUData {\n  tensorRef: Tensor;\n  texture?: WebGLTexture;\n  buffer?: GPUBuffer;\n  texShape?: [number, number];\n  bufSize?: number;\n}\n\nexport interface TensorTracker {\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: Backend): Tensor;\n  makeVariable(\n      initialValue: Tensor, trainable?: boolean, name?: string,\n      dtype?: DataType): Variable;\n  incRef(a: Tensor, backend: Backend): void;\n  disposeTensor(t: Tensor): void;\n  disposeVariable(v: Variable): void;\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData;\n}\n\n/**\n * The Tensor class calls into this handler to delegate chaining operations.\n */\nexport interface OpHandler {\n  cast<T extends Tensor>(x: T, dtype: DataType): T;\n  buffer<R extends Rank, D extends DataType>(\n      shape: ShapeMap[R], dtype: D,\n      values?: DataTypeMap[D]): TensorBuffer<R, D>;\n  print<T extends Tensor>(x: T, verbose: boolean): void;\n  clone<T extends Tensor>(x: T): T;\n  // TODO(yassogba) bring reshape back?\n}\n\n// For tracking tensor creation and disposal.\nlet trackerFn: () => TensorTracker = null;\n// Used by chaining methods to call into ops.\nlet opHandler: OpHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn: (msg: string) => void = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn: () => TensorTracker) {\n  trackerFn = fn;\n}\n\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler: OpHandler) {\n  opHandler = handler;\n}\n\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn: (msg: string) => void) {\n  deprecationWarningFn = fn;\n}\n\n// Declare this namespace to make Tensor class augmentation work in google3.\nexport declare namespace Tensor {}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor<R extends Rank = Rank> implements TensorInfo {\n  /** Unique id of this tensor. */\n  readonly id: number;\n  /**\n   * Id of the bucket holding the data for this tensor. Multiple arrays can\n   * point to the same bucket (e.g. when calling array.reshape()).\n   */\n  dataId: DataId;\n  /** The shape of the tensor. */\n  readonly shape: ShapeMap[R];\n  /** Number of elements in the tensor. */\n  readonly size: number;\n  /** The data type for the array. */\n  readonly dtype: DataType;\n  /** The rank type for the array (see `Rank` enum). */\n  readonly rankType: R;\n\n  /** Whether this tensor has been globally kept. */\n  kept = false;\n  /** The id of the scope this tensor is being tracked in. */\n  scopeId: number;\n\n  /**\n   * Number of elements to skip in each dimension when indexing. See\n   * https://docs.scipy.org/doc/numpy/reference/generated/\\\n   * numpy.ndarray.strides.html\n   */\n  readonly strides: number[];\n\n  constructor(shape: ShapeMap[R], dtype: DataType, dataId: DataId, id: number) {\n    this.shape = shape.slice() as ShapeMap[R];\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher') as R;\n  }\n\n  get rank(): number {\n    return this.shape.length;\n  }\n\n  /**\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async buffer<D extends DataType = 'float32'>(): Promise<TensorBuffer<R, D>> {\n    const vals = await this.data<D>();\n    return opHandler.buffer(this.shape, this.dtype as D, vals);\n  }\n\n  /**\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  bufferSync<D extends DataType = 'float32'>(): TensorBuffer<R, D> {\n    return opHandler.buffer(this.shape, this.dtype as D, this.dataSync());\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * asynchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async array(): Promise<ArrayMap[R]> {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals, this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Returns the tensor data as a nested array. The transfer of data is done\n   * synchronously.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  arraySync(): ArrayMap[R] {\n    return toNestedArray(\n               this.shape, this.dataSync(), this.dtype === 'complex64') as\n        ArrayMap[R];\n  }\n\n  /**\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n   * promise of `TypedArray` that resolves when the computation has finished.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  async data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]> {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data as Uint8Array[];\n      try {\n        return bytes.map(b => util.decodeString(b)) as DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as Promise<DataTypeMap[D]>;\n  }\n\n  /**\n   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n   * and `data()`, this method prevents data from being downloaded to CPU.\n   *\n   * For WebGL backend, the data will be stored on a densely packed texture.\n   * This means that the texture will use the RGBA channels to store value.\n   *\n   * For WebGPU backend, the data will be stored on a buffer. There is no\n   * parameter, so can not use a user-defined size to create the buffer.\n   *\n   * @param options:\n   *     For WebGL,\n   *         - customTexShape: Optional. If set, will use the user defined\n   *     texture shape to create the texture.\n   *\n   * @returns For WebGL backend, a GPUData contains the new texture and\n   *     its information.\n   *     {\n   *        tensorRef: The tensor that is associated with this texture,\n   *        texture: WebGLTexture,\n   *        texShape: [number, number] // [height, width]\n   *     }\n   *\n   *     For WebGPU backend, a GPUData contains the new buffer and\n   *     its information.\n   *     {\n   *        tensorRef: The tensor that is associated with this buffer,\n   *        buffer: GPUBuffer,\n   *        bufSize: number\n   *     }\n   *\n   *     Remember to dispose the GPUData after it is used by\n   *     `res.tensorRef.dispose()`.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataToGPU(options?: DataToGPUOptions): GPUData {\n    this.throwIfDisposed();\n    return trackerFn().readToGPU(this.dataId, options);\n  }\n\n  /**\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n   * UI thread until the values are ready, which can cause performance issues.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D] {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return (data as Uint8Array[]).map(b => util.decodeString(b)) as\n            DataTypeMap[D];\n      } catch {\n        throw new Error(\n            'Failed to decode the string bytes into utf-8. ' +\n            'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data as DataTypeMap[D];\n  }\n\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes(): Promise<Uint8Array[]|Uint8Array> {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data as Uint8Array[];\n    } else {\n      return new Uint8Array((data as TypedArray).buffer);\n    }\n  }\n\n  /**\n   * Disposes `tf.Tensor` from memory.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n\n  protected isDisposedInternal = false;\n  get isDisposed(): boolean {\n    return this.isDisposedInternal;\n  }\n\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n\n  /**\n   * Prints the `tf.Tensor`. See `tf.print` for details.\n   *\n   * @param verbose Whether to print verbose information about the tensor,\n   *    including dtype and size.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  print(verbose = false): void {\n    return opHandler.print(this, verbose);\n  }\n\n  /**\n   * Returns a copy of the tensor. See `tf.clone` for details.\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  clone<T extends Tensor>(this: T): T {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n\n  /**\n   * Returns a human-readable description of the tensor. Useful for logging.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  toString(verbose = false): string {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n\n  cast<T extends this>(dtype: DataType): T {\n    this.throwIfDisposed();\n    return opHandler.cast(this as T, dtype);\n  }\n  variable(trainable = true, name?: string, dtype?: DataType): Variable<R> {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype) as\n        Variable<R>;\n  }\n}\n\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: (instance: Tensor) => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null &&\n        instance.throwIfDisposed != null;\n  }\n});\n\nexport function getGlobalTensorClass() {\n  // Use getGlobal so that we can augment the Tensor class across package\n  // boundaries becase the node resolution alg may result in different modules\n  // being returned for this file depending on the path they are loaded from.\n  return getGlobal('Tensor', () => {\n    return Tensor;\n  });\n}\n\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n\nexport interface NumericTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: NumericDataType;\n  dataSync<D extends DataType = NumericDataType>(): DataTypeMap[D];\n  data<D extends DataType = NumericDataType>(): Promise<DataTypeMap[D]>;\n  dataToGPU(options?: DataToGPUOptions): GPUData;\n}\n\nexport interface StringTensor<R extends Rank = Rank> extends Tensor<R> {\n  dtype: 'string';\n  dataSync<D extends DataType = 'string'>(): DataTypeMap[D];\n  data<D extends DataType = 'string'>(): Promise<DataTypeMap[D]>;\n}\n\n/** @doclink Tensor */\nexport type Scalar = Tensor<Rank.R0>;\n/** @doclink Tensor */\nexport type Tensor1D = Tensor<Rank.R1>;\n/** @doclink Tensor */\nexport type Tensor2D = Tensor<Rank.R2>;\n/** @doclink Tensor */\nexport type Tensor3D = Tensor<Rank.R3>;\n/** @doclink Tensor */\nexport type Tensor4D = Tensor<Rank.R4>;\n/** @doclink Tensor */\nexport type Tensor5D = Tensor<Rank.R5>;\n/** @doclink Tensor */\nexport type Tensor6D = Tensor<Rank.R6>;\n\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable<R extends Rank = Rank> extends Tensor<R> {\n  name: string;\n\n  constructor(\n      initialValue: Tensor<R>, public trainable: boolean, name: string,\n      tensorId: number) {\n    super(\n        initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.name = name;\n  }\n\n  /**\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n   * the same shape and dtype as the old `tf.Tensor`.\n   *\n   * @param newValue New tensor to be assigned to this variable.\n   *\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\n   */\n  assign(newValue: Tensor<R>): void {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(\n          `dtype of the new value (${newValue.dtype}) and ` +\n          `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(\n          `shape of the new value (${newValue.shape}) and ` +\n          `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null /* backend */);\n  }\n\n  override dispose(): void {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\n\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: (instance: Variable) => {\n    return instance instanceof Tensor && instance.assign != null &&\n        instance.assign instanceof Function;\n  }\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}