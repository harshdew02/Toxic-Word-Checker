{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNative(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x,\n    filter = inputs.filter;\n  var strides = attrs.strides,\n    pad = attrs.pad,\n    dilations = attrs.dilations,\n    dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n  var xStrides = util.computeStrides(x.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n    return 'Error in depthwiseConv2d: Either strides or dilations must be ' + \"1. Got strides \".concat(strides, \" and dilations '\").concat($dilations, \"'\");\n  });\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  var filterHeight = convInfo.filterHeight,\n    filterWidth = convInfo.filterWidth,\n    dilationHeight = convInfo.dilationHeight,\n    dilationWidth = convInfo.dilationWidth,\n    padInfo = convInfo.padInfo;\n  var padLeft = padInfo.left;\n  var padTop = padInfo.top;\n  var chMul = convInfo.outChannels / convInfo.inChannels;\n  var y = new TensorBuffer(convInfo.outShape, x.dtype);\n  var xVals = backend.data.get(x.dataId).values;\n  var wVals = backend.data.get(filter.dataId).values;\n  var yVals = y.values;\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    var xOffset1 = b * xStrides[0];\n    var yOffset1 = b * y.strides[0];\n    for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n      var yOffset2 = yOffset1 + yR * y.strides[1];\n      var xRCorner = yR * convInfo.strideHeight - padTop;\n      for (var wR = 0; wR < filterHeight; ++wR) {\n        var xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        var wOffset1 = wR * filterStrides[0];\n        var xOffset2 = xOffset1 + xR * xStrides[1];\n        for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n          var yOffset3 = yOffset2 + yC * y.strides[2];\n          var xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (var wC = 0; wC < filterWidth; ++wC) {\n            var xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            var wOffset2 = wOffset1 + wC * filterStrides[1];\n            var xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            var yOffset4 = yOffset3;\n            var wOffset3 = wOffset2;\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              var xVal = xVals[xOffset3 + d1];\n              for (var q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport var depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"mappings":"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","names":["backend_util","DepthwiseConv2dNative","TensorBuffer","util","assertNotComplex","depthwiseConv2dNative","args","inputs","backend","attrs","x","filter","strides","pad","dilations","dimRoundingMode","xStrides","computeStrides","shape","filterStrides","$dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","filterHeight","filterWidth","dilationHeight","dilationWidth","padInfo","padLeft","left","padTop","top","chMul","outChannels","inChannels","y","outShape","dtype","xVals","data","get","dataId","values","wVals","yVals","b","batchSize","xOffset1","yOffset1","yR","outHeight","yOffset2","xRCorner","strideHeight","wR","xR","inHeight","wOffset1","xOffset2","yC","outWidth","yOffset3","xCCorner","strideWidth","wC","xC","inWidth","wOffset2","xOffset3","yOffset4","wOffset3","d1","xVal","q","makeTensorInfo","depthwiseConv2dNativeConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\DepthwiseConv2dNative.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}