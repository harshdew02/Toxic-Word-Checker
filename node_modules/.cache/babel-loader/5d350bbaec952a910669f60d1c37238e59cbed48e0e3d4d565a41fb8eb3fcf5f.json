{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedTensorToTensor } from '@tensorflow/tfjs-core';\nimport { raggedTensorToTensorImplCPU } from '../kernel_utils/shared';\nexport function raggedTensorToTensor(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var shape = inputs.shape,\n    values = inputs.values,\n    defaultValue = inputs.defaultValue,\n    rowPartitionTensors = inputs.rowPartitionTensors;\n  var rowPartitionTypes = attrs.rowPartitionTypes;\n  var $shape = backend.readSync(shape.dataId);\n  var $values = backend.readSync(values.dataId);\n  var $defaultValue = backend.readSync(defaultValue.dataId);\n  var $rowPartitionValues = rowPartitionTensors.map(function (t) {\n    return backend.readSync(t.dataId);\n  });\n  var rowPartitionValuesShapes = rowPartitionTensors.map(function (t) {\n    return t.shape;\n  });\n  var _raggedTensorToTensor = raggedTensorToTensorImplCPU($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes),\n    _raggedTensorToTensor2 = _slicedToArray(_raggedTensorToTensor, 2),\n    outputShape = _raggedTensorToTensor2[0],\n    output = _raggedTensorToTensor2[1];\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\nexport var raggedTensorToTensorConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,oBAAoB,QAAsF,uBAAuB;AAGnK,SAAQC,2BAA2B,QAAO,wBAAwB;AAElE,OAAM,SAAUC,oBAAoB,CAACC,IAIpC;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,KAAK,GAA+CH,MAAM,CAA1DG,KAAK;IAAEC,MAAM,GAAuCJ,MAAM,CAAnDI,MAAM;IAAEC,YAAY,GAAyBL,MAAM,CAA3CK,YAAY;IAAEC,mBAAmB,GAAIN,MAAM,CAA7BM,mBAAmB;EACvD,IAAOC,iBAAiB,GAAIL,KAAK,CAA1BK,iBAAiB;EAExB,IAAMC,MAAM,GAAGP,OAAO,CAACQ,QAAQ,CAACN,KAAK,CAACO,MAAM,CAAe;EAC3D,IAAMC,OAAO,GAAGV,OAAO,CAACQ,QAAQ,CAACL,MAAM,CAACM,MAAM,CAAe;EAC7D,IAAME,aAAa,GAAGX,OAAO,CAACQ,QAAQ,CAACJ,YAAY,CAACK,MAAM,CAAe;EACzE,IAAMG,mBAAmB,GACrBP,mBAAmB,CAACQ,GAAG,CAAC,WAAC;IAAA,OAAIb,OAAO,CAACQ,QAAQ,CAACM,CAAC,CAACL,MAAM,CAAe;EAAA,EAAC;EAC1E,IAAMM,wBAAwB,GAAGV,mBAAmB,CAACQ,GAAG,CAAC,WAAC;IAAA,OAAIC,CAAC,CAACZ,KAAK;EAAA,EAAC;EAEtE,4BAA8BN,2BAA2B,CACrDW,MAAM,EAAEL,KAAK,CAACA,KAAK,EAAEQ,OAAO,EAAEP,MAAM,CAACD,KAAK,EAAEC,MAAM,CAACa,KAAK,EAAEL,aAAa,EACvEP,YAAY,CAACF,KAAK,EAAEU,mBAAmB,EAAEG,wBAAwB,EACjET,iBAAiB,CAAC;IAAA;IAHfW,WAAW;IAAEC,MAAM;EAI1B,OAAOlB,OAAO,CAACmB,cAAc,CAACF,WAAW,EAAEd,MAAM,CAACa,KAAK,EAAEE,MAAM,CAAC;AAClE;AAEA,OAAO,IAAME,0BAA0B,GAAiB;EACtDC,UAAU,EAAE1B,oBAAoB;EAChC2B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb","names":["RaggedTensorToTensor","raggedTensorToTensorImplCPU","raggedTensorToTensor","args","inputs","backend","attrs","shape","values","defaultValue","rowPartitionTensors","rowPartitionTypes","$shape","readSync","dataId","$values","$defaultValue","$rowPartitionValues","map","t","rowPartitionValuesShapes","dtype","outputShape","output","makeTensorInfo","raggedTensorToTensorConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\RaggedTensorToTensor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedTensorToTensorImplCPU} from '../kernel_utils/shared';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.readSync(shape.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $defaultValue = backend.readSync(defaultValue.dataId) as TypedArray;\n  const $rowPartitionValues =\n      rowPartitionTensors.map(t => backend.readSync(t.dataId) as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImplCPU(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}