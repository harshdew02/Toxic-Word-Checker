{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { topKImpl } from './TopK_impl';\nexport function topK(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var k = attrs.k,\n    sorted = attrs.sorted;\n  assertNotComplex(x, 'topk');\n  var xVals = backend.data.get(x.dataId).values;\n  var _topKImpl = topKImpl(xVals, x.shape, x.dtype, k, sorted),\n    _topKImpl2 = _slicedToArray(_topKImpl, 2),\n    allTopKVals = _topKImpl2[0],\n    allTopKIndices = _topKImpl2[1];\n  return [backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values), backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)];\n}\nexport var topKConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAA+DA,IAAI,QAA0C,uBAAuB;AAGpI,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,QAAQ,QAAO,aAAa;AAEpC,OAAM,SAAUC,IAAI,CAChBC,IAAqE;EAEvE,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,CAAC,GAAIH,MAAM,CAAXG,CAAC;EACR,IAAOC,CAAC,GAAYF,KAAK,CAAlBE,CAAC;IAAEC,MAAM,GAAIH,KAAK,CAAfG,MAAM;EAEhBT,gBAAgB,CAACO,CAAC,EAAE,MAAM,CAAC;EAE3B,IAAMG,KAAK,GAAGL,OAAO,CAACM,IAAI,CAACC,GAAG,CAACL,CAAC,CAACM,MAAM,CAAC,CAACC,MAAoB;EAC7D,gBACIb,QAAQ,CAACS,KAAK,EAAEH,CAAC,CAACQ,KAAK,EAAER,CAAC,CAACS,KAAwB,EAAER,CAAC,EAAEC,MAAM,CAAC;IAAA;IAD5DQ,WAAW;IAAEC,cAAc;EAGlC,OAAO,CACLb,OAAO,CAACc,cAAc,CAClBF,WAAW,CAACF,KAAK,EAAEE,WAAW,CAACD,KAAK,EAAEC,WAAW,CAACH,MAAM,CAAC,EAC7DT,OAAO,CAACc,cAAc,CAClBD,cAAc,CAACH,KAAK,EAAEG,cAAc,CAACF,KAAK,EAAEE,cAAc,CAACJ,MAAM,CAAC,CACvE;AACH;AAEA,OAAO,IAAMM,UAAU,GAAiB;EACtCC,UAAU,EAAEtB,IAAI;EAChBuB,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAErB;CACb","names":["TopK","assertNotComplex","topKImpl","topK","args","inputs","backend","attrs","x","k","sorted","xVals","data","get","dataId","values","shape","dtype","allTopKVals","allTopKIndices","makeTensorInfo","topKConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\TopK.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}