{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nvar DATABASE_NAME = 'tensorflowjs';\nvar DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nvar MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nvar INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport function deleteDatabase() {\n  return _deleteDatabase.apply(this, arguments);\n}\nfunction _deleteDatabase() {\n  _deleteDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    var idbFactory;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          idbFactory = getIndexedDBFactory();\n          return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n            deleteRequest.onsuccess = function () {\n              return resolve();\n            };\n            deleteRequest.onerror = function (error) {\n              return reject(error);\n            };\n          }));\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _deleteDatabase.apply(this, arguments);\n}\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  var theWindow = typeof window === 'undefined' ? self : window;\n  var factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\nfunction setUpDatabase(openRequest) {\n  var db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport var BrowserIndexedDB = /*#__PURE__*/function () {\n  function BrowserIndexedDB(modelPath) {\n    _classCallCheck(this, BrowserIndexedDB);\n    this.indexedDB = getIndexedDBFactory();\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n  _createClass(BrowserIndexedDB, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(modelArtifacts) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n            case 2:\n              return _context.abrupt(\"return\", this.databaseAction(this.modelPath, modelArtifacts));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.databaseAction(this.modelPath));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function load() {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n    /**\n     * Perform database action to put model artifacts into or read model artifacts\n     * from IndexedDB object store.\n     *\n     * Whether the action is put or get depends on whether `modelArtifacts` is\n     * specified. If it is specified, the action will be put; otherwise the action\n     * will be get.\n     *\n     * @param modelPath A unique string path for the model.\n     * @param modelArtifacts If specified, it will be the model artifacts to be\n     *   stored in IndexedDB.\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n     *   of `ModelArtifacts`, if the action is get.\n     */\n  }, {\n    key: \"databaseAction\",\n    value: function databaseAction(modelPath, modelArtifacts) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        var openRequest = _this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n        openRequest.onupgradeneeded = function () {\n          return setUpDatabase(openRequest);\n        };\n        openRequest.onsuccess = function () {\n          var db = openRequest.result;\n          if (modelArtifacts == null) {\n            // Read model out from object store.\n            var modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n            var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            var getRequest = modelStore.get(_this.modelPath);\n            getRequest.onsuccess = function () {\n              if (getRequest.result == null) {\n                db.close();\n                return reject(new Error(\"Cannot find model with path '\".concat(_this.modelPath, \"' \") + \"in IndexedDB.\"));\n              } else {\n                resolve(getRequest.result.modelArtifacts);\n              }\n            };\n            getRequest.onerror = function (error) {\n              db.close();\n              return reject(getRequest.error);\n            };\n            modelTx.oncomplete = function () {\n              return db.close();\n            };\n          } else {\n            // Put model into object store.\n            var modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            // First, put ModelArtifactsInfo into info store.\n            var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n            var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n            var putInfoRequest = infoStore.put({\n              modelPath: _this.modelPath,\n              modelArtifactsInfo: modelArtifactsInfo\n            });\n            var _modelTx;\n            putInfoRequest.onsuccess = function () {\n              // Second, put model data into model store.\n              _modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              var modelStore = _modelTx.objectStore(MODEL_STORE_NAME);\n              var putModelRequest = modelStore.put({\n                modelPath: _this.modelPath,\n                modelArtifacts: modelArtifacts,\n                modelArtifactsInfo: modelArtifactsInfo\n              });\n              putModelRequest.onsuccess = function () {\n                return resolve({\n                  modelArtifactsInfo: modelArtifactsInfo\n                });\n              };\n              putModelRequest.onerror = function (error) {\n                // If the put-model request fails, roll back the info entry as\n                // well.\n                infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                var deleteInfoRequest = infoStore.delete(_this.modelPath);\n                deleteInfoRequest.onsuccess = function () {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n                deleteInfoRequest.onerror = function (error) {\n                  db.close();\n                  return reject(putModelRequest.error);\n                };\n              };\n            };\n            putInfoRequest.onerror = function (error) {\n              db.close();\n              return reject(putInfoRequest.error);\n            };\n            infoTx.oncomplete = function () {\n              if (_modelTx == null) {\n                db.close();\n              } else {\n                _modelTx.oncomplete = function () {\n                  return db.close();\n                };\n              }\n            };\n          }\n        };\n        openRequest.onerror = function (error) {\n          return reject(openRequest.error);\n        };\n      });\n    }\n  }]);\n  return BrowserIndexedDB;\n}();\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport var indexedDBRouter = function indexedDBRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\nexport var BrowserIndexedDBManager = /*#__PURE__*/function () {\n  function BrowserIndexedDBManager() {\n    _classCallCheck(this, BrowserIndexedDBManager);\n    this.indexedDB = getIndexedDBFactory();\n  }\n  _createClass(BrowserIndexedDBManager, [{\n    key: \"listModels\",\n    value: function () {\n      var _listModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var openRequest = _this2.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n                openRequest.onupgradeneeded = function () {\n                  return setUpDatabase(openRequest);\n                };\n                openRequest.onsuccess = function () {\n                  var db = openRequest.result;\n                  var tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                  var store = tx.objectStore(INFO_STORE_NAME);\n                  // tslint:disable:max-line-length\n                  // Need to cast `store` as `any` here because TypeScript's DOM\n                  // library does not have the `getAll()` method even though the\n                  // method is supported in the latest version of most mainstream\n                  // browsers:\n                  // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                  // tslint:enable:max-line-length\n                  // tslint:disable-next-line:no-any\n                  var getAllInfoRequest = store.getAll();\n                  getAllInfoRequest.onsuccess = function () {\n                    var out = {};\n                    var _iterator = _createForOfIteratorHelper(getAllInfoRequest.result),\n                      _step;\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        var item = _step.value;\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n                    resolve(out);\n                  };\n                  getAllInfoRequest.onerror = function (error) {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                  };\n                  tx.oncomplete = function () {\n                    return db.close();\n                  };\n                };\n                openRequest.onerror = function (error) {\n                  return reject(openRequest.error);\n                };\n              }));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function listModels() {\n        return _listModels.apply(this, arguments);\n      }\n      return listModels;\n    }()\n  }, {\n    key: \"removeModel\",\n    value: function () {\n      var _removeModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(path) {\n        var _this3 = this;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              path = maybeStripScheme(path);\n              return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var openRequest = _this3.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n                openRequest.onupgradeneeded = function () {\n                  return setUpDatabase(openRequest);\n                };\n                openRequest.onsuccess = function () {\n                  var db = openRequest.result;\n                  var infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                  var infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                  var getInfoRequest = infoStore.get(path);\n                  var modelTx;\n                  getInfoRequest.onsuccess = function () {\n                    if (getInfoRequest.result == null) {\n                      db.close();\n                      return reject(new Error(\"Cannot find model with path '\".concat(path, \"' \") + \"in IndexedDB.\"));\n                    } else {\n                      // First, delete the entry in the info store.\n                      var deleteInfoRequest = infoStore.delete(path);\n                      var deleteModelData = function deleteModelData() {\n                        // Second, delete the entry in the model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        var modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        var deleteModelRequest = modelStore.delete(path);\n                        deleteModelRequest.onsuccess = function () {\n                          return resolve(getInfoRequest.result.modelArtifactsInfo);\n                        };\n                        deleteModelRequest.onerror = function (error) {\n                          return reject(getInfoRequest.error);\n                        };\n                      };\n                      // Proceed with deleting model data regardless of whether deletion\n                      // of info data succeeds or not.\n                      deleteInfoRequest.onsuccess = deleteModelData;\n                      deleteInfoRequest.onerror = function (error) {\n                        deleteModelData();\n                        db.close();\n                        return reject(getInfoRequest.error);\n                      };\n                    }\n                  };\n                  getInfoRequest.onerror = function (error) {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                  };\n                  infoTx.oncomplete = function () {\n                    if (modelTx == null) {\n                      db.close();\n                    } else {\n                      modelTx.oncomplete = function () {\n                        return db.close();\n                      };\n                    }\n                  };\n                };\n                openRequest.onerror = function (error) {\n                  return reject(openRequest.error);\n                };\n              }));\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function removeModel(_x2) {\n        return _removeModel.apply(this, arguments);\n      }\n      return removeModel;\n    }()\n  }]);\n  return BrowserIndexedDBManager;\n}();","map":{"version":3,"mappings":"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","names":["env","getModelArtifactsInfoForJSON","IORouterRegistry","DATABASE_NAME","DATABASE_VERSION","MODEL_STORE_NAME","INFO_STORE_NAME","deleteDatabase","idbFactory","getIndexedDBFactory","Promise","resolve","reject","deleteRequest","onsuccess","onerror","error","getBool","Error","theWindow","window","self","factory","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","db","result","createObjectStore","keyPath","BrowserIndexedDB","modelPath","modelArtifacts","modelTopology","ArrayBuffer","databaseAction","open","onupgradeneeded","modelTx","transaction","modelStore","objectStore","getRequest","get","close","oncomplete","modelArtifactsInfo","infoTx","infoStore","putInfoRequest","put","putModelRequest","deleteInfoRequest","delete","indexedDBRouter","url","Array","isArray","startsWith","URL_SCHEME","browserIndexedDB","slice","length","registerSaveRouter","registerLoadRouter","maybeStripScheme","key","BrowserIndexedDBManager","tx","store","getAllInfoRequest","getAll","out","item","path","getInfoRequest","deleteModelData","deleteModelRequest"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\indexed_db.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}