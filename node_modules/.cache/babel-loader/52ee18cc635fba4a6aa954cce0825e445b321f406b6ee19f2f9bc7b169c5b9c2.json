{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var axis = attrs.axis;\n  var $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  var shapes = inputs.map(function (t) {\n    return t.shape;\n  });\n  backend_util.assertParamsConsistent(shapes, $axis);\n  var outShape = backend_util.computeOutShape(inputs.map(function (t) {\n    return t.shape;\n  }), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  var $inputs = inputs.filter(function (t) {\n    return util.sizeFromShape(t.shape) > 0;\n  });\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend: backend\n    });\n  }\n  return concatImpl($inputs, $axis, backend);\n}\nexport var concatConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,MAAM,EAAmEC,IAAI,QAAO,uBAAuB;AAGjI,SAAQC,UAAU,QAAO,eAAe;AACxC,SAAQC,QAAQ,QAAO,YAAY;AAEnC,OAAM,SAAUC,MAAM,CAClBC,IACyE;EAE3E,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,IAAI,GAAID,KAAK,CAAbC,IAAI;EAEX,IAAMC,KAAK,GAAGT,IAAI,CAACU,cAAc,CAACF,IAAI,EAAEH,MAAM,CAAC,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;EAE3D,IAAMC,MAAM,GAAGP,MAAM,CAACQ,GAAG,CAAC,WAAC;IAAA,OAAIC,CAAC,CAACH,KAAK;EAAA,EAAC;EACvCb,YAAY,CAACiB,sBAAsB,CAACH,MAAM,EAAEH,KAAK,CAAC;EAElD,IAAMO,QAAQ,GACVlB,YAAY,CAACmB,eAAe,CAACZ,MAAM,CAACQ,GAAG,CAAC,WAAC;IAAA,OAAIC,CAAC,CAACH,KAAK;EAAA,EAAC,EAAEF,KAAK,CAAC;EAEjE,IAAIT,IAAI,CAACkB,aAAa,CAACF,QAAQ,CAAC,KAAK,CAAC,EAAE;IACtC,OAAOV,OAAO,CAACa,cAAc,CAACH,QAAQ,EAAEX,MAAM,CAAC,CAAC,CAAC,CAACe,KAAK,EAAE,EAAE,CAAC;;EAG9D;EACA,IAAMC,OAAO,GAAGhB,MAAM,CAACiB,MAAM,CAAC,WAAC;IAAA,OAAItB,IAAI,CAACkB,aAAa,CAACJ,CAAC,CAACH,KAAK,CAAC,GAAG,CAAC;EAAA,EAAC;EACnE,IAAIU,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;IACxB,OAAOrB,QAAQ,CAAC;MAACG,MAAM,EAAE;QAACmB,CAAC,EAAEH,OAAO,CAAC,CAAC;MAAC,CAAC;MAAEf,OAAO,EAAPA;IAAO,CAAC,CAAC;;EAGrD,OAAOL,UAAU,CAACoB,OAAO,EAAEZ,KAAK,EAAEH,OAAO,CAAC;AAC5C;AAEA,OAAO,IAAMmB,YAAY,GAAiB;EACxCC,UAAU,EAAE3B,MAAM;EAClB4B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEzB;CACb","names":["backend_util","Concat","util","concatImpl","identity","concat","args","inputs","backend","attrs","axis","$axis","parseAxisParam","shape","shapes","map","t","assertParamsConsistent","outShape","computeOutShape","sizeFromShape","makeTensorInfo","dtype","$inputs","filter","length","x","concatConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Concat.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}