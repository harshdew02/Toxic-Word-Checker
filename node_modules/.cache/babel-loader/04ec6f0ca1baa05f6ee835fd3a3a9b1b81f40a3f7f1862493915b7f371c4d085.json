{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $x = convertToTensor(x, 'x', 'unstack', 'string_or_numeric');\n  util.assert(axis >= -$x.shape.length && axis < $x.shape.length, function () {\n    return \"Axis = \".concat(axis, \" is not in [-\").concat($x.shape.length, \", \").concat($x.shape.length, \")\");\n  });\n  var inputs = {\n    value: $x\n  };\n  var attrs = {\n    axis: axis\n  };\n  return ENGINE.runKernel(Unpack, inputs, attrs);\n}\nexport var unstack = /* @__PURE__ */op({\n  unstack_: unstack_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,MAAM,QAAkC,iBAAiB;AAIjE,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;AAcA,SAASC,QAAQ,CAACC,CAAoB,EAAU;EAAA,IAARC,IAAI,uEAAG,CAAC;EAC9C,IAAMC,EAAE,GAAGN,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,mBAAmB,CAAC;EAClEH,IAAI,CAACM,MAAM,CACPF,IAAI,IAAI,CAACC,EAAE,CAACE,KAAK,CAACC,MAAM,IAAIJ,IAAI,GAAGC,EAAE,CAACE,KAAK,CAACC,MAAM,EAClD;IAAA,wBACcJ,IAAI,0BAAgBC,EAAE,CAACE,KAAK,CAACC,MAAM,eAAKH,EAAE,CAACE,KAAK,CAACC,MAAM;EAAA,CAAG,CAAC;EAE7E,IAAMC,MAAM,GAAiB;IAACC,KAAK,EAAEL;EAAE,CAAC;EACxC,IAAMM,KAAK,GAAgB;IAACP,IAAI,EAAJA;EAAI,CAAC;EAEjC,OAAOP,MAAM,CAACe,SAAS,CACnBd,MAAM,EAAEW,MAAmC,EAC3CE,KAAgC,CAAC;AACvC;AAEA,OAAO,IAAME,OAAO,GAAG,eAAgBZ,EAAE,CAAC;EAACC,QAAQ,EAARA;AAAQ,CAAC,CAAC","names":["ENGINE","Unpack","convertToTensor","util","op","unstack_","x","axis","$x","assert","shape","length","inputs","value","attrs","runKernel","unstack"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\unstack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Unpack, UnpackAttrs, UnpackInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x: Tensor|TensorLike, axis = 0): Tensor[] {\n  const $x = convertToTensor(x, 'x', 'unstack', 'string_or_numeric');\n  util.assert(\n      axis >= -$x.shape.length && axis < $x.shape.length,\n      () =>\n          `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n\n  const inputs: UnpackInputs = {value: $x};\n  const attrs: UnpackAttrs = {axis};\n\n  return ENGINE.runKernel(\n      Unpack, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const unstack = /* @__PURE__ */ op({unstack_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}