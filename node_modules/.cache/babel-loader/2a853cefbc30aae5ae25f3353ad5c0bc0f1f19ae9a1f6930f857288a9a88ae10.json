{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var logits = inputs.logits;\n  var numSamples = attrs.numSamples,\n    seed = attrs.seed,\n    normalized = attrs.normalized;\n  assertNotComplex(logits, 'multinomial');\n  var probabilities = normalized ? logits : softmax({\n    inputs: {\n      logits: logits\n    },\n    backend: backend,\n    attrs: {\n      dim: -1\n    }\n  });\n  var batchSize = probabilities.shape[0];\n  var numEvents = probabilities.shape[1];\n  var probVals = backend.data.get(probabilities.dataId).values;\n  var resShape = [batchSize, numSamples];\n  var resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n  for (var b = 0; b < batchSize; ++b) {\n    var offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    var cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (var event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n    var random = seedrandom.alea(seed.toString());\n    var outOffset = b * numSamples;\n    for (var sampleId = 0; sampleId < numSamples; ++sampleId) {\n      var r = random();\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n      for (var _event = 0; _event < cdf.length; _event++) {\n        if (r < cdf[_event]) {\n          resVals[outOffset + sampleId] = _event;\n          break;\n        }\n      }\n    }\n  }\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport var multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial\n};","map":{"version":3,"mappings":"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","names":["Multinomial","util","seedrandom","assertNotComplex","softmax","multinomial","args","inputs","backend","attrs","logits","numSamples","seed","normalized","probabilities","dim","batchSize","shape","numEvents","probVals","data","get","dataId","values","resShape","resVals","makeZerosTypedArray","sizeFromShape","b","offset","cdf","Float32Array","event","length","random","alea","toString","outOffset","sampleId","r","disposeIntermediateTensorInfo","makeTensorInfo","multinomialConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Multinomial.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}