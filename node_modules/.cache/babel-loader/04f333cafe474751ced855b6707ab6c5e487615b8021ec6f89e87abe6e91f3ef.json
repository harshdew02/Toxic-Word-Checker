{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropFilter(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x,\n    dy = inputs.dy;\n  var strides = attrs.strides,\n    pad = attrs.pad,\n    dataFormat = attrs.dataFormat,\n    dimRoundingMode = attrs.dimRoundingMode,\n    filterShape = attrs.filterShape;\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  var strideHeight = convInfo.strideHeight,\n    strideWidth = convInfo.strideWidth,\n    filterHeight = convInfo.filterHeight,\n    filterWidth = convInfo.filterWidth;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  var dW = new TensorBuffer(convInfo.filterShape, 'float32');\n  var leftPad = convInfo.padInfo.left;\n  var topPad = convInfo.padInfo.top;\n  var xVals = backend.data.get(x.dataId).values;\n  var dyVals = backend.data.get(dy.dataId).values;\n  var xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  var dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (var wR = 0; wR < filterHeight; ++wR) {\n    var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n    for (var wC = 0; wC < filterWidth; ++wC) {\n      var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n      for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          var dotProd = 0;\n          for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var yR = yRMin; yR < yRMax; ++yR) {\n              var xR = wR + yR * strideHeight - topPad;\n              for (var yC = yCMin; yC < yCMax; ++yC) {\n                var xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                } else {\n                  dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport var conv2DBackpropFilterConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter\n};","map":{"version":3,"mappings":"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","names":["backend_util","Conv2DBackpropFilter","TensorBuffer","assertNotComplex","conv2DBackpropFilter","args","inputs","backend","attrs","x","dy","strides","pad","dataFormat","dimRoundingMode","filterShape","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","strideHeight","strideWidth","filterHeight","filterWidth","isChannelsLast","dW","leftPad","padInfo","left","topPad","top","xVals","data","get","dataId","values","dyVals","xBuf","dtype","dyBuf","wR","yRMin","Math","max","ceil","yRMax","min","outHeight","inHeight","wC","yCMin","yCMax","outWidth","inWidth","d1","inChannels","d2","outChannels","dotProd","b","batchSize","yR","xR","yC","xC","set","makeTensorInfo","conv2DBackpropFilterConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Conv2DBackpropFilter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}