{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { fill } from '../ops/fill';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\nexport var AdagradOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(AdagradOptimizer, _Optimizer);\n  var _super = _createSuper(AdagradOptimizer);\n  function AdagradOptimizer(learningRate) {\n    var _this;\n    var initialAccumulatorValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.1;\n    _classCallCheck(this, AdagradOptimizer);\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.initialAccumulatorValue = initialAccumulatorValue;\n    _this.accumulatedGrads = [];\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(AdagradOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n        if (_this2.accumulatedGrads[i] == null) {\n          var trainable = false;\n          _this2.accumulatedGrads[i] = {\n            originalName: \"\".concat(name, \"/accumulator\"),\n            variable: tidy(function () {\n              return fill(value.shape, _this2.initialAccumulatorValue).variable(trainable);\n            })\n          };\n        }\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n        var accumulatedGrad = _this2.accumulatedGrads[i].variable;\n        tidy(function () {\n          var newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n          accumulatedGrad.assign(newAccumulatedGrad);\n          var newValue = add(mul(div(gradient, sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))), -_this2.learningRate), value);\n          value.assign(newValue);\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedGrads != null) {\n        _dispose(this.accumulatedGrads.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.saveIterations();\n            case 2:\n              _context.t0 = _context.sent;\n              return _context.abrupt(\"return\", [_context.t0].concat(this.accumulatedGrads.map(function (v) {\n                return {\n                  name: v.originalName,\n                  tensor: v.variable\n                };\n              })));\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(weightValues) {\n        var trainable;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.extractIterations(weightValues);\n            case 2:\n              weightValues = _context2.sent;\n              trainable = false;\n              this.accumulatedGrads = weightValues.map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'initialAccumulatorValue': this.initialAccumulatorValue\n      };\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"className\",\n    get: function get() {\n      // Name matters for Python compatibility.\n      // This is a getter instead of a property because when it's a property, it\n      // prevents the entire class from being tree-shaken.\n      return 'Adagrad';\n    }\n  }, {\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['initialAccumulatorValue']);\n    }\n  }]);\n  return AdagradOptimizer;\n}(Optimizer);","map":{"version":3,"mappings":"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","names":["ENGINE","dispose","tidy","add","div","fill","mul","sqrt","square","Optimizer","AdagradOptimizer","learningRate","initialAccumulatorValue","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","forEach","i","value","registeredVariables","accumulatedGrads","trainable","originalName","variable","shape","gradient","tensor","accumulatedGrad","newAccumulatedGrad","assign","newValue","backend","epsilon","incrementIterations","v","saveIterations","concat","weightValues","extractIterations","cls","config"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\optimizers\\adagrad_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {fill} from '../ops/fill';\nimport {mul} from '../ops/mul';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\n/** @doclink Optimizer */\nexport class AdagradOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adagrad';\n  }\n\n  private accumulatedGrads: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private initialAccumulatorValue = 0.1) {\n    super();\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulatedGrads[i] == null) {\n        const trainable = false;\n        this.accumulatedGrads[i] = {\n          originalName: `${name}/accumulator`,\n          variable: tidy(\n              () => fill(value.shape, this.initialAccumulatorValue)\n                        .variable(trainable))\n        };\n      }\n\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      const accumulatedGrad = this.accumulatedGrads[i].variable;\n\n      tidy(() => {\n        const newAccumulatedGrad = add(accumulatedGrad, square(gradient));\n        accumulatedGrad.assign(newAccumulatedGrad);\n\n        const newValue = add(\n            mul(div(gradient,\n                    sqrt(add(newAccumulatedGrad, ENGINE.backend.epsilon()))),\n                -this.learningRate),\n            value);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    if (this.accumulatedGrads != null) {\n      dispose(this.accumulatedGrads.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulatedGrads.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulatedGrads = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'initialAccumulatorValue': this.initialAccumulatorValue,\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(config['learningRate'], config['initialAccumulatorValue']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}