{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BroadcastTo } from '../kernel_names';\nimport { sum } from '../ops/sum';\nexport var broadcastToGradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var broadCastToAttrs = attrs;\n    var inputShape = broadCastToAttrs.inputShape;\n    var outputShape = broadCastToAttrs.shape;\n    var reps = Array.from(outputShape);\n    for (var i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(\"broadcastTo(): [\".concat(inputShape, \"] cannot be broadcast to [\").concat(outputShape, \"].\"));\n      }\n    }\n    var axes = [];\n    for (var _i = 0; _i < reps.length; _i++) {\n      if (reps[_i] > 1) {\n        axes.push(_i);\n      }\n    }\n    return {\n      x: function x() {\n        return sum(dy, axes, true /* keepDims */);\n      }\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,WAAW,QAAyB,iBAAiB;AAE7D,SAAQC,GAAG,QAAO,YAAY;AAG9B,OAAO,IAAMC,qBAAqB,GAAe;EAC/CC,UAAU,EAAEH,WAAW;EACvBI,QAAQ,EAAE,kBAACC,EAAU,EAAEC,KAAe,EAAEC,KAAmB,EAAI;IAC7D,IAAMC,gBAAgB,GAClBD,KAAoC;IAExC,IAAME,UAAU,GAAGD,gBAAgB,CAACC,UAAU;IAC9C,IAAMC,WAAW,GAAGF,gBAAgB,CAACG,KAAK;IAE1C,IAAMC,IAAI,GAAaC,KAAK,CAACC,IAAI,CAACJ,WAAW,CAAC;IAC9C,KAAK,IAAIK,CAAC,GAAGN,UAAU,CAACO,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC/C,IAAIN,UAAU,CAACM,CAAC,CAAC,KAAKL,WAAW,CAACK,CAAC,CAAC,EAAE;QACpCH,IAAI,CAACG,CAAC,CAAC,GAAG,CAAC;OACZ,MAAM,IAAIN,UAAU,CAACM,CAAC,CAAC,KAAK,CAAC,EAAE;QAC9B,MAAM,IAAIE,KAAK,2BACXR,UAAU,uCAA6BC,WAAW,QAAK;;;IAG/D,IAAMQ,IAAI,GAAa,EAAE;IACzB,KAAK,IAAIH,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,EAAC,EAAE,EAAE;MACpC,IAAIH,IAAI,CAACG,EAAC,CAAC,GAAG,CAAC,EAAE;QACfG,IAAI,CAACC,IAAI,CAACJ,EAAC,CAAC;;;IAIhB,OAAO;MAACK,CAAC,EAAE;QAAA,OAAMnB,GAAG,CAACI,EAAE,EAAEa,IAAI,EAAE,IAAI,CAAC,eAAe;MAAA;IAAA,CAAC;EACtD;CACD","names":["BroadcastTo","sum","broadcastToGradConfig","kernelName","gradFunc","dy","saved","attrs","broadCastToAttrs","inputShape","outputShape","shape","reps","Array","from","i","length","Error","axes","push","x"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\gradients\\BroadcastTo_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BroadcastTo, BroadCastToAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const broadcastToGradConfig: GradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const broadCastToAttrs: BroadCastToAttrs =\n        attrs as unknown as BroadCastToAttrs;\n\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n\n    const reps: number[] = Array.from(outputShape);\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${\n            inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n    const axes: number[] = [];\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n\n    return {x: () => sum(dy, axes, true /* keepDims */)};\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}