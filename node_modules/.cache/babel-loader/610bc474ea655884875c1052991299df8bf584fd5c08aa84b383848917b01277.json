{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringNGrams } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Creates ngrams from ragged string data.\n *\n * This op accepts a ragged tensor with 1 ragged dimension containing only\n * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams\n * of that string, joined along the innermost axis.\n *\n * ```js\n * const result = tf.string.stringNGrams(\n *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),\n *   '|', [1, 2], 'LP', 'RP', -1, false);\n * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',\n *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']\n * result['nGramsSplits'].print(); // [0, 5, 10]\n * ```\n * @param data: The values tensor of the ragged string tensor to make ngrams out\n *     of. Must be a 1D string tensor.\n * @param dataSplits: The splits tensor of the ragged string tensor to make\n *     ngrams out of.\n * @param separator: The string to append between elements of the token. Use \"\"\n *     for no separator.\n * @param nGramWidths: The sizes of the ngrams to create.\n * @param leftPad: The string to use to pad the left side of the ngram sequence.\n *     Only used if pad_width !== 0.\n * @param rightPad: The string to use to pad the right side of the ngram\n *     sequence. Only used if pad_width !== 0.\n * @param padWidth: The number of padding elements to add to each side of each\n *     sequence. Note that padding will never be greater than `nGramWidths`-1\n *     regardless of this value. If `padWidth`=-1, then add max(`nGramWidths`)-1\n *     elements.\n * @param preserveShortSequences: If true, then ensure that at least one ngram\n *     is generated for each input sequence. In particular, if an input sequence\n *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single\n *     ngram containing the entire sequence. If false, then no ngrams are\n *     generated for these short input sequences.\n * @return A map with the following properties:\n *     - nGrams: The values tensor of the output ngrams ragged tensor.\n *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringNGrams_(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  var $data = convertToTensor(data, 'data', 'stringNGrams', 'string');\n  if ($data.dtype !== 'string') {\n    throw new Error('Data must be of datatype string');\n  }\n  if ($data.shape.length !== 1) {\n    throw new Error(\"Data must be a vector, saw: \".concat($data.shape));\n  }\n  var $dataSplits = convertToTensor(dataSplits, 'dataSplits', 'stringNGrams');\n  if ($dataSplits.dtype !== 'int32') {\n    throw new Error('Data splits must be of datatype int32');\n  }\n  var attrs = {\n    separator: separator,\n    nGramWidths: nGramWidths,\n    leftPad: leftPad,\n    rightPad: rightPad,\n    padWidth: padWidth,\n    preserveShortSequences: preserveShortSequences\n  };\n  var inputs = {\n    data: $data,\n    dataSplits: $dataSplits\n  };\n  var result = ENGINE.runKernel(StringNGrams, inputs, attrs);\n  return {\n    nGrams: result[0],\n    nGramsSplits: result[1]\n  };\n}\nexport var stringNGrams = /* @__PURE__ */op({\n  stringNGrams_: stringNGrams_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,YAAY,QAA8C,oBAAoB;AAGtF,SAAQC,eAAe,QAAO,uBAAuB;AAErD,SAAQC,EAAE,QAAO,cAAc;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAASC,aAAa,CAClBC,IAAyB,EAAEC,UAA6B,EAAEC,SAAiB,EAC3EC,WAAqB,EAAEC,OAAe,EAAEC,QAAgB,EAAEC,QAAgB,EAC1EC,sBAA+B;EACjC,IAAMC,KAAK,GAAGX,eAAe,CAACG,IAAI,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC;EACrE,IAAIQ,KAAK,CAACC,KAAK,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;;EAEpD,IAAIF,KAAK,CAACG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC5B,MAAM,IAAIF,KAAK,uCAAgCF,KAAK,CAACG,KAAK,EAAG;;EAG/D,IAAME,WAAW,GAAGhB,eAAe,CAACI,UAAU,EAAE,YAAY,EAAE,cAAc,CAAC;EAC7E,IAAIY,WAAW,CAACJ,KAAK,KAAK,OAAO,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;;EAG1D,IAAMI,KAAK,GAAsB;IAC/BZ,SAAS,EAATA,SAAS;IACTC,WAAW,EAAXA,WAAW;IACXC,OAAO,EAAPA,OAAO;IACPC,QAAQ,EAARA,QAAQ;IACRC,QAAQ,EAARA,QAAQ;IACRC,sBAAsB,EAAtBA;GACD;EAED,IAAMQ,MAAM,GAAuB;IAACf,IAAI,EAAEQ,KAAK;IAAEP,UAAU,EAAEY;EAAW,CAAC;EACzE,IAAMG,MAAM,GACRrB,MAAM,CAACsB,SAAS,CAACrB,YAAY,EAAEmB,MAAY,EAAED,KAAW,CAAC;EAC7D,OAAO;IAACI,MAAM,EAAEF,MAAM,CAAC,CAAC,CAAC;IAAEG,YAAY,EAAEH,MAAM,CAAC,CAAC;EAAC,CAAC;AACrD;AAEA,OAAO,IAAMI,YAAY,GAAG,eAAgBtB,EAAE,CAAC;EAACC,aAAa,EAAbA;AAAa,CAAC,CAAC","names":["ENGINE","StringNGrams","convertToTensor","op","stringNGrams_","data","dataSplits","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","$data","dtype","Error","shape","length","$dataSplits","attrs","inputs","result","runKernel","nGrams","nGramsSplits","stringNGrams"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\string\\string_n_grams.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringNGrams, StringNGramsAttrs, StringNGramsInputs} from '../../kernel_names';\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Creates ngrams from ragged string data.\n *\n * This op accepts a ragged tensor with 1 ragged dimension containing only\n * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams\n * of that string, joined along the innermost axis.\n *\n * ```js\n * const result = tf.string.stringNGrams(\n *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),\n *   '|', [1, 2], 'LP', 'RP', -1, false);\n * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',\n *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']\n * result['nGramsSplits'].print(); // [0, 5, 10]\n * ```\n * @param data: The values tensor of the ragged string tensor to make ngrams out\n *     of. Must be a 1D string tensor.\n * @param dataSplits: The splits tensor of the ragged string tensor to make\n *     ngrams out of.\n * @param separator: The string to append between elements of the token. Use \"\"\n *     for no separator.\n * @param nGramWidths: The sizes of the ngrams to create.\n * @param leftPad: The string to use to pad the left side of the ngram sequence.\n *     Only used if pad_width !== 0.\n * @param rightPad: The string to use to pad the right side of the ngram\n *     sequence. Only used if pad_width !== 0.\n * @param padWidth: The number of padding elements to add to each side of each\n *     sequence. Note that padding will never be greater than `nGramWidths`-1\n *     regardless of this value. If `padWidth`=-1, then add max(`nGramWidths`)-1\n *     elements.\n * @param preserveShortSequences: If true, then ensure that at least one ngram\n *     is generated for each input sequence. In particular, if an input sequence\n *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single\n *     ngram containing the entire sequence. If false, then no ngrams are\n *     generated for these short input sequences.\n * @return A map with the following properties:\n *     - nGrams: The values tensor of the output ngrams ragged tensor.\n *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringNGrams_(\n    data: Tensor1D|TensorLike, dataSplits: Tensor|TensorLike, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): NamedTensorMap {\n  const $data = convertToTensor(data, 'data', 'stringNGrams', 'string');\n  if ($data.dtype !== 'string') {\n    throw new Error('Data must be of datatype string');\n  }\n  if ($data.shape.length !== 1) {\n    throw new Error(`Data must be a vector, saw: ${$data.shape}`);\n  }\n\n  const $dataSplits = convertToTensor(dataSplits, 'dataSplits', 'stringNGrams');\n  if ($dataSplits.dtype !== 'int32') {\n    throw new Error('Data splits must be of datatype int32');\n  }\n\n  const attrs: StringNGramsAttrs = {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  };\n\n  const inputs: StringNGramsInputs = {data: $data, dataSplits: $dataSplits};\n  const result: Tensor[] =\n      ENGINE.runKernel(StringNGrams, inputs as {}, attrs as {});\n  return {nGrams: result[0], nGramsSplits: result[1]};\n}\n\nexport const stringNGrams = /* @__PURE__ */ op({stringNGrams_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}