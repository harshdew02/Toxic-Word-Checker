{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice } from '../kernel_names';\nimport { pad } from '../ops/pad';\nimport { parseSliceParams } from '../ops/slice_util';\nexport var sliceGradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var _saved = _slicedToArray(saved, 1),\n      x = _saved[0];\n    var begin = attrs.begin,\n      size = attrs.size;\n    var inputShape = x.shape;\n    var _parseSliceParams = parseSliceParams(x, begin, size),\n      _parseSliceParams2 = _slicedToArray(_parseSliceParams, 2),\n      begin_ = _parseSliceParams2[0],\n      size_ = _parseSliceParams2[1];\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    var paddings = [];\n    for (var i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {\n      x: function x() {\n        return pad(dy, paddings);\n      }\n    };\n  }\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,KAAK,QAAmB,iBAAiB;AAEjD,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,gBAAgB,QAAO,mBAAmB;AAGlD,OAAO,IAAMC,eAAe,GAAe;EACzCC,UAAU,EAAEJ,KAAK;EACjBK,YAAY,EAAE,CAAC,GAAG,CAAC;EACnBC,QAAQ,EAAE,kBAACC,EAAU,EAAEC,KAAe,EAAEC,KAAmB,EAAI;IAC7D,4BAAYD,KAAK;MAAVE,CAAC;IACR,IAAOC,KAAK,GAAUF,KAA8B,CAA7CE,KAAK;MAAEC,IAAI,GAAIH,KAA8B,CAAtCG,IAAI;IAElB,IAAMC,UAAU,GAAGH,CAAC,CAACI,KAAK;IAC1B,wBAAwBZ,gBAAgB,CAACQ,CAAC,EAAEC,KAAK,EAAEC,IAAI,CAAC;MAAA;MAAjDG,MAAM;MAAEC,KAAK;IAEpB;IACA;IACA;IAEA;IACA;IACA,IAAMC,QAAQ,GAA4B,EAAE;IAC5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,EAAE,CAACY,IAAI,EAAED,CAAC,EAAE,EAAE;MAChCD,QAAQ,CAACG,IAAI,CAAC,CAACL,MAAM,CAACG,CAAC,CAAC,EAAEL,UAAU,CAACK,CAAC,CAAC,GAAGH,MAAM,CAACG,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,CAAC,CAAC,CAAC;;IAElE,OAAO;MAACR,CAAC,EAAE;QAAA,OAAMT,GAAG,CAACM,EAAE,EAAEU,QAAQ,CAAC;MAAA;IAAA,CAAC;EACrC;CACD","names":["Slice","pad","parseSliceParams","sliceGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x","begin","size","inputShape","shape","begin_","size_","paddings","i","rank","push"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\gradients\\Slice_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Slice, SliceAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {pad} from '../ops/pad';\nimport {parseSliceParams} from '../ops/slice_util';\nimport {Tensor} from '../tensor';\n\nexport const sliceGradConfig: GradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {begin, size} = attrs as unknown as SliceAttrs;\n\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size);\n\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    const paddings: Array<[number, number]> = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {x: () => pad(dy, paddings)};\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}