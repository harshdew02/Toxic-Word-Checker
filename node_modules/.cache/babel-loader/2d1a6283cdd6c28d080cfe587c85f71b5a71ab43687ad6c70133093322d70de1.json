{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n  return kernelInvocation.kernelName != null;\n}\nvar EngineState = /*#__PURE__*/function () {\n  function EngineState() {\n    _classCallCheck(this, EngineState);\n    // Public since optimizers will use it.\n    this.registeredVariables = {};\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numStringTensors = 0;\n    this.numDataBuffers = 0;\n    // Number of nested tf.grad() statements when computing higher-order\n    // gradients. E.g. `1` for first-order gradients and `2` for second-order\n    // gradients. Used to track if the tape should be removed after a backprop.\n    this.gradientDepth = 0;\n    // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n    // off the tape.\n    this.kernelDepth = 0;\n    this.scopeStack = [];\n    /**\n     * Keeps track of the number of data moves during a kernel execution. We\n     * maintain a stack since kernels can call other kernels, recursively.\n     */\n    this.numDataMovesStack = [];\n    this.nextScopeId = 0;\n    this.tensorInfo = new WeakMap();\n    this.profiling = false;\n    this.activeProfile = {\n      newBytes: 0,\n      newTensors: 0,\n      peakBytes: 0,\n      kernels: [],\n      result: null,\n      get kernelNames() {\n        return Array.from(new Set(this.kernels.map(function (k) {\n          return k.name;\n        })));\n      }\n    };\n  }\n  _createClass(EngineState, [{\n    key: \"dispose\",\n    value: function dispose() {\n      for (var variableName in this.registeredVariables) {\n        this.registeredVariables[variableName].dispose();\n      }\n    }\n  }]);\n  return EngineState;\n}();\nexport var Engine = /*#__PURE__*/function () {\n  function Engine(ENV) {\n    _classCallCheck(this, Engine);\n    this.ENV = ENV;\n    this.registry = {};\n    this.registryFactory = {};\n    this.pendingBackendInitId = 0;\n    this.state = new EngineState();\n  }\n  _createClass(Engine, [{\n    key: \"ready\",\n    value: function () {\n      var _ready = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var sortedBackends, i, backendName, success;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.pendingBackendInit != null)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", this.pendingBackendInit.then(function () {}));\n            case 2:\n              if (!(this.backendInstance != null)) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 4:\n              sortedBackends = this.getSortedBackends();\n              i = 0;\n            case 6:\n              if (!(i < sortedBackends.length)) {\n                _context.next = 18;\n                break;\n              }\n              backendName = sortedBackends[i];\n              _context.next = 10;\n              return this.initializeBackend(backendName).success;\n            case 10:\n              success = _context.sent;\n              if (!success) {\n                _context.next = 15;\n                break;\n              }\n              _context.next = 14;\n              return this.setBackend(backendName);\n            case 14:\n              return _context.abrupt(\"return\");\n            case 15:\n              i++;\n              _context.next = 6;\n              break;\n            case 18:\n              throw new Error(\"Could not initialize any backends, all backend initializations \" + \"failed.\");\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function ready() {\n        return _ready.apply(this, arguments);\n      }\n      return ready;\n    }()\n  }, {\n    key: \"backend\",\n    get: function get() {\n      if (this.pendingBackendInit != null) {\n        throw new Error(\"Backend '\".concat(this.backendName, \"' has not yet been initialized. Make \") + \"sure to await tf.ready() or await tf.setBackend() before calling \" + \"other methods\");\n      }\n      if (this.backendInstance == null) {\n        var _this$initializeBacke = this.initializeBackendsAndReturnBest(),\n          name = _this$initializeBacke.name,\n          asyncInit = _this$initializeBacke.asyncInit;\n        if (asyncInit) {\n          throw new Error(\"The highest priority backend '\".concat(name, \"' has not yet been \") + \"initialized. Make sure to await tf.ready() or \" + \"await tf.setBackend() before calling other methods\");\n        }\n        this.setBackend(name);\n      }\n      return this.backendInstance;\n    }\n  }, {\n    key: \"backendNames\",\n    value: function backendNames() {\n      return Object.keys(this.registryFactory);\n    }\n  }, {\n    key: \"findBackend\",\n    value: function findBackend(backendName) {\n      if (!(backendName in this.registry)) {\n        // If the backend hasn't been initialized but we have a registry entry for\n        // it, initialize it and return it.\n        if (backendName in this.registryFactory) {\n          var _this$initializeBacke2 = this.initializeBackend(backendName),\n            asyncInit = _this$initializeBacke2.asyncInit;\n          if (asyncInit) {\n            // Backend is not ready yet.\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n      return this.registry[backendName];\n    }\n  }, {\n    key: \"findBackendFactory\",\n    value: function findBackendFactory(backendName) {\n      if (!(backendName in this.registryFactory)) {\n        return null;\n      }\n      return this.registryFactory[backendName].factory;\n    }\n  }, {\n    key: \"registerBackend\",\n    value: function registerBackend(backendName, factory) {\n      var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      if (backendName in this.registryFactory) {\n        log.warn(\"\".concat(backendName, \" backend was already registered. \") + \"Reusing existing backend factory.\");\n        return false;\n      }\n      this.registryFactory[backendName] = {\n        factory: factory,\n        priority: priority\n      };\n      return true;\n    }\n  }, {\n    key: \"setBackend\",\n    value: function () {\n      var _setBackend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(backendName) {\n        var _this$initializeBacke3, success, asyncInit, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.registryFactory[backendName] == null)) {\n                _context2.next = 2;\n                break;\n              }\n              throw new Error(\"Backend name '\".concat(backendName, \"' not found in registry\"));\n            case 2:\n              this.backendName = backendName;\n              if (!(this.registry[backendName] == null)) {\n                _context2.next = 16;\n                break;\n              }\n              this.backendInstance = null;\n              _this$initializeBacke3 = this.initializeBackend(backendName), success = _this$initializeBacke3.success, asyncInit = _this$initializeBacke3.asyncInit;\n              if (!asyncInit) {\n                _context2.next = 12;\n                break;\n              }\n              _context2.next = 9;\n              return success;\n            case 9:\n              _context2.t0 = _context2.sent;\n              _context2.next = 13;\n              break;\n            case 12:\n              _context2.t0 = success;\n            case 13:\n              result = _context2.t0;\n              if (result) {\n                _context2.next = 16;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 16:\n              this.backendInstance = this.registry[backendName];\n              this.setupRegisteredKernels();\n              // Reset the profiler.\n              this.profiler = new Profiler(this.backendInstance);\n              return _context2.abrupt(\"return\", true);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function setBackend(_x) {\n        return _setBackend.apply(this, arguments);\n      }\n      return setBackend;\n    }()\n  }, {\n    key: \"setupRegisteredKernels\",\n    value: function setupRegisteredKernels() {\n      var _this = this;\n      var kernels = getKernelsForBackend(this.backendName);\n      kernels.forEach(function (kernel) {\n        if (kernel.setupFunc != null) {\n          kernel.setupFunc(_this.backendInstance);\n        }\n      });\n    }\n  }, {\n    key: \"disposeRegisteredKernels\",\n    value: function disposeRegisteredKernels(backendName) {\n      var _this2 = this;\n      var kernels = getKernelsForBackend(backendName);\n      kernels.forEach(function (kernel) {\n        if (kernel.disposeFunc != null) {\n          kernel.disposeFunc(_this2.registry[backendName]);\n        }\n      });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n  }, {\n    key: \"initializeBackend\",\n    value: function initializeBackend(backendName) {\n      var _this3 = this;\n      var registryFactoryEntry = this.registryFactory[backendName];\n      if (registryFactoryEntry == null) {\n        throw new Error(\"Cannot initialize backend \".concat(backendName, \", no registration found.\"));\n      }\n      try {\n        var backend = registryFactoryEntry.factory();\n        /* Test if the factory returns a promise.\n        Done in a more liberal way than\n        previous 'Promise.resolve(backend)===backend'\n        as we needed to account for custom Promise\n        implementations (e.g. Angular) */\n        if (backend && !(backend instanceof KernelBackend) && typeof backend.then === 'function') {\n          var promiseId = ++this.pendingBackendInitId;\n          var success = backend.then(function (backendInstance) {\n            // Outdated promise. Another backend was set in the meantime.\n            if (promiseId < _this3.pendingBackendInitId) {\n              return false;\n            }\n            _this3.registry[backendName] = backendInstance;\n            _this3.pendingBackendInit = null;\n            return true;\n          }).catch(function (err) {\n            // Outdated promise. Another backend was set in the meantime.\n            if (promiseId < _this3.pendingBackendInitId) {\n              return false;\n            }\n            _this3.pendingBackendInit = null;\n            log.warn(\"Initialization of backend \".concat(backendName, \" failed\"));\n            log.warn(err.stack || err.message);\n            return false;\n          });\n          this.pendingBackendInit = success;\n          return {\n            success: success,\n            asyncInit: true\n          };\n        } else {\n          this.registry[backendName] = backend;\n          return {\n            success: true,\n            asyncInit: false\n          };\n        }\n      } catch (err) {\n        log.warn(\"Initialization of backend \".concat(backendName, \" failed\"));\n        log.warn(err.stack || err.message);\n        return {\n          success: false,\n          asyncInit: false\n        };\n      }\n    }\n  }, {\n    key: \"removeBackend\",\n    value: function removeBackend(backendName) {\n      if (!(backendName in this.registryFactory)) {\n        throw new Error(\"\".concat(backendName, \" backend not found in registry\"));\n      }\n      if (this.backendName === backendName && this.pendingBackendInit != null) {\n        // There is a pending promise of the backend we want to remove. Make it\n        // obsolete.\n        this.pendingBackendInitId++;\n      }\n      if (backendName in this.registry) {\n        this.disposeRegisteredKernels(backendName);\n        this.registry[backendName].dispose();\n        delete this.registry[backendName];\n      }\n      delete this.registryFactory[backendName];\n      // Unset the backend if it is active.\n      if (this.backendName === backendName) {\n        this.pendingBackendInit = null;\n        this.backendName = null;\n        this.backendInstance = null;\n      }\n    }\n  }, {\n    key: \"getSortedBackends\",\n    value: function getSortedBackends() {\n      var _this4 = this;\n      if (Object.keys(this.registryFactory).length === 0) {\n        throw new Error('No backend found in registry.');\n      }\n      return Object.keys(this.registryFactory).sort(function (a, b) {\n        // Highest priority comes first.\n        return _this4.registryFactory[b].priority - _this4.registryFactory[a].priority;\n      });\n    }\n  }, {\n    key: \"initializeBackendsAndReturnBest\",\n    value: function initializeBackendsAndReturnBest() {\n      var sortedBackends = this.getSortedBackends();\n      for (var i = 0; i < sortedBackends.length; i++) {\n        var backendName = sortedBackends[i];\n        var _this$initializeBacke4 = this.initializeBackend(backendName),\n          success = _this$initializeBacke4.success,\n          asyncInit = _this$initializeBacke4.asyncInit;\n        if (asyncInit || success) {\n          return {\n            name: backendName,\n            asyncInit: asyncInit\n          };\n        }\n      }\n      throw new Error(\"Could not initialize any backends, all backend initializations \" + \"failed.\");\n    }\n  }, {\n    key: \"moveData\",\n    value: function moveData(backend, dataId) {\n      var info = this.state.tensorInfo.get(dataId);\n      var srcBackend = info.backend;\n      var values = this.readSync(dataId);\n      var refCount = srcBackend.refCount(dataId);\n      // Delete the tensor from the old backend and move it to the new\n      // backend.\n      srcBackend.disposeData(dataId, true);\n      info.backend = backend;\n      backend.move(dataId, values, info.shape, info.dtype, refCount);\n      if (this.shouldCheckForMemLeaks()) {\n        // Track the number of moves during a kernel execution to correctly\n        // detect memory leaks.\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n      }\n    }\n  }, {\n    key: \"tidy\",\n    value: function tidy(nameOrFn, fn) {\n      var _this5 = this;\n      var name = null;\n      if (fn == null) {\n        // Called with only 1 argument.\n        if (typeof nameOrFn !== 'function') {\n          throw new Error('Please provide a function to tidy()');\n        }\n        fn = nameOrFn;\n      } else {\n        // Called with 2 arguments.\n        if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n          throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');\n        }\n        if (typeof fn !== 'function') {\n          throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');\n        }\n        name = nameOrFn;\n        // TODO(nsthorat,smilkov): Do operation logging and performance\n        // profiling.\n      }\n\n      var result;\n      return this.scopedRun(function () {\n        return _this5.startScope(name);\n      }, function () {\n        return _this5.endScope(result);\n      }, function () {\n        result = fn();\n        if (result instanceof Promise) {\n          console.error('Cannot return a Promise inside of tidy.');\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"scopedRun\",\n    value: function scopedRun(start, end, f) {\n      start();\n      try {\n        var res = f();\n        end();\n        return res;\n      } catch (ex) {\n        end();\n        throw ex;\n      }\n    }\n  }, {\n    key: \"nextTensorId\",\n    value: function nextTensorId() {\n      return Engine.nextTensorId++;\n    }\n  }, {\n    key: \"nextVariableId\",\n    value: function nextVariableId() {\n      return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n  }, {\n    key: \"clone\",\n    value: function clone(x) {\n      var y = ENGINE.runKernel(Identity, {\n        x: x\n      });\n      var inputs = {\n        x: x\n      };\n      var grad = function grad(dy) {\n        return {\n          x: function x() {\n            var dtype = 'float32';\n            var gradInputs = {\n              x: dy\n            };\n            var attrs = {\n              dtype: dtype\n            };\n            return ENGINE.runKernel(Cast, gradInputs,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            attrs);\n          }\n        };\n      };\n      var saved = [];\n      this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n      return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n  }, {\n    key: \"runKernel\",\n    value: function runKernel(kernelName, inputs, attrs) {\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n      var hasKernel = getKernel(kernelName, this.backendName) != null;\n      if (!hasKernel) {\n        throw new Error(\"Kernel '\".concat(kernelName, \"' not registered for backend '\").concat(this.backendName, \"'\"));\n      }\n      return this.runKernelFunc({\n        kernelName: kernelName,\n        inputs: inputs,\n        attrs: attrs\n      });\n    }\n  }, {\n    key: \"shouldCheckForMemLeaks\",\n    value: function shouldCheckForMemLeaks() {\n      return this.ENV.getBool('IS_TEST');\n    }\n  }, {\n    key: \"checkKernelForMemLeak\",\n    value: function checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n      var numDataIdsAfter = this.backend.numDataIds();\n      // Count the number of data ids associated with the result of the kernel.\n      var numOutputDataIds = 0;\n      outInfos.forEach(function (info) {\n        // Complex numbers allocate 3 data ids, one for 'real', one for\n        // 'imaginary', and one for the container that holds the former two.\n        numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;\n      });\n      // Account for the number of moves during kernel execution. A \"data move\"\n      // can happen in the middle of a kernel execution, placing a new (key,value)\n      // pair in the data storage. Since data moves have net zero effect (we\n      // always remove the data from the old backend), we have to cancel them out\n      // when detecting memory leaks.\n      var numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n      var dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n      if (dataIdsLeaked > 0) {\n        throw new Error(\"Backend '\".concat(this.backendName, \"' has an internal memory leak \") + \"(\".concat(dataIdsLeaked, \" data ids) after running '\").concat(kernelName, \"'\"));\n      }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n  }, {\n    key: \"runKernelFunc\",\n    value: function runKernelFunc(kernelParams) {\n      var _this6 = this;\n      var outputs;\n      var saved = [];\n      var isTapeOn = this.isTapeOn();\n      var startingBytecount = this.state.numBytes;\n      var startingNumTensors = this.state.numTensors;\n      if (this.shouldCheckForMemLeaks()) {\n        this.state.numDataMovesStack.push(0);\n      }\n      var kernelFunc;\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n      var out;\n      var kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : '';\n      // Create the kernelFunc from either a registered kernel OR passed in\n      // forward/backward functions (used by custom grad). In this context a\n      // kernelFunc wraps a kernel implementation with some bookkeeping.\n      if (isRegisteredKernelInvocation(kernelParams)) {\n        var kernelName = kernelParams.kernelName,\n          _inputs = kernelParams.inputs,\n          _attrs = kernelParams.attrs;\n        if (this.backendName == null) {\n          // backend has not been initialized yet (backend initialization is lazy\n          // can be deferred until an op/ kernel is run).\n          // The below getter has side effects that will try to initialize the\n          // backend and set properties like this.backendName\n          // tslint:disable-next-line: no-unused-expression\n          this.backend;\n        }\n        var kernel = getKernel(kernelName, this.backendName);\n        util.assert(kernel != null, function () {\n          return \"Cannot find registered kernel '\".concat(kernelName, \"' for backend '\").concat(_this6.backendName, \"'\");\n        });\n        kernelFunc = function kernelFunc() {\n          var numDataIdsBefore = _this6.backend.numDataIds();\n          out = kernel.kernelFunc({\n            inputs: _inputs,\n            attrs: _attrs,\n            backend: _this6.backend\n          });\n          var outInfos = Array.isArray(out) ? out : [out];\n          if (_this6.shouldCheckForMemLeaks()) {\n            _this6.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n          }\n          var outTensors = outInfos.map(function (outInfo) {\n            // todo (yassogba) remove this option (Tensor) when node backend\n            // methods have been modularized and they all return tensorInfo.\n            // TensorInfos do not have a rank attribute.\n            if (outInfo.rank != null) {\n              return outInfo;\n            }\n            return _this6.makeTensorFromTensorInfo(outInfo);\n          });\n          // Save any required inputs and outputs.\n          // Do not save unless we are recording to the tape. Otherwise it would\n          // cause a mem leak since there would be no backprop for these tensors\n          // (which would otherwise dispose them).\n          if (isTapeOn) {\n            var tensorsToSave = _this6.getTensorsForGradient(kernelName, _inputs, outTensors);\n            saved = _this6.saveTensorsForBackwardMode(tensorsToSave);\n          }\n          return outTensors;\n        };\n      } else {\n        var forwardFunc = kernelParams.forwardFunc;\n        // Running a customGrad op.\n        var saveFunc = function saveFunc(tensors) {\n          // Do not save unless we are recording to the tape. Otherwise it would\n          // cause a mem leak since we would never run backprop, which disposes\n          // the kept tensors.\n          if (!isTapeOn) {\n            return;\n          }\n          saved = tensors.map(function (tensor) {\n            return _this6.keep(_this6.clone(tensor));\n          });\n        };\n        kernelFunc = function kernelFunc() {\n          var numDataIdsBefore = _this6.backend.numDataIds();\n          out = _this6.tidy(function () {\n            return forwardFunc(_this6.backend, saveFunc);\n          });\n          var outs = Array.isArray(out) ? out : [out];\n          if (_this6.shouldCheckForMemLeaks()) {\n            // Scope name is used to print a more helpful error message if needed.\n            _this6.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n          }\n          return outs;\n        };\n      }\n      //\n      // Run the kernelFunc. Optionally profiling it.\n      //\n      var inputs = kernelParams.inputs,\n        attrs = kernelParams.attrs;\n      var backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;\n      var kernelProfile;\n      this.scopedRun(\n      // Stop recording to a tape when running a kernel.\n      function () {\n        return _this6.state.kernelDepth++;\n      }, function () {\n        return _this6.state.kernelDepth--;\n      }, function () {\n        if (!_this6.ENV.getBool('DEBUG') && !_this6.state.profiling) {\n          outputs = kernelFunc();\n        } else {\n          kernelProfile = _this6.profiler.profileKernel(kernelOrScopeName, inputs, function () {\n            return kernelFunc();\n          });\n          if (_this6.ENV.getBool('DEBUG')) {\n            _this6.profiler.logKernelProfile(kernelProfile);\n          }\n          outputs = kernelProfile.outputs;\n        }\n      });\n      if (isTapeOn) {\n        this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n      }\n      if (this.state.profiling) {\n        this.state.activeProfile.kernels.push({\n          name: kernelOrScopeName,\n          bytesAdded: this.state.numBytes - startingBytecount,\n          totalBytesSnapshot: this.state.numBytes,\n          tensorsAdded: this.state.numTensors - startingNumTensors,\n          totalTensorsSnapshot: this.state.numTensors,\n          inputShapes: Object.keys(inputs).map(function (key) {\n            return inputs[key] != null ? inputs[key].shape : null;\n          }),\n          outputShapes: outputs.map(function (item) {\n            return item.shape;\n          }),\n          kernelTimeMs: kernelProfile.timeMs,\n          extraInfo: kernelProfile.extraInfo\n        });\n      }\n      return Array.isArray(out) ? outputs : outputs[0];\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n  }, {\n    key: \"saveTensorsForBackwardMode\",\n    value: function saveTensorsForBackwardMode(tensors) {\n      var _this7 = this;\n      var saved = tensors.map(function (tensor) {\n        return _this7.keep(_this7.clone(tensor));\n      });\n      return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n  }, {\n    key: \"getTensorsForGradient\",\n    value: function getTensorsForGradient(kernelName, inputs, outputs) {\n      var gradConfig = getGradient(kernelName);\n      if (gradConfig != null) {\n        var inputsToSave = gradConfig.inputsToSave || [];\n        var outputsToSave = gradConfig.outputsToSave || [];\n        // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n        // specified in inputsToSave will be saved.\n        var inputTensorsToSave;\n        if (gradConfig.saveAllInputs) {\n          util.assert(Array.isArray(inputs), function () {\n            return 'saveAllInputs is true, expected inputs to be an array.';\n          });\n          inputTensorsToSave = Object.keys(inputs).map(function (key) {\n            return inputs[key];\n          });\n        } else {\n          inputTensorsToSave = inputsToSave.map(function (inputName) {\n            return inputs[inputName];\n          });\n        }\n        var outputTensorsToSave = outputs.filter(function (_, i) {\n          return outputsToSave[i];\n        });\n        return inputTensorsToSave.concat(outputTensorsToSave);\n      }\n      // We return an empty list rather than throw an error because the kernel we\n      // are looking up may not actually be relevant to backproping through the\n      // overall function\n      //\n      // See 'does not error if irrelevant (pruned) ops are missing grads' test\n      // in gradients_test.ts for an example.\n      return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n  }, {\n    key: \"makeTensor\",\n    value: function makeTensor(values, shape, dtype, backend) {\n      if (values == null) {\n        throw new Error('Values passed to engine.makeTensor() are null');\n      }\n      dtype = dtype || 'float32';\n      backend = backend || this.backend;\n      var backendVals = values;\n      if (dtype === 'string' && util.isString(values[0])) {\n        backendVals = values.map(function (d) {\n          return util.encodeString(d);\n        });\n      }\n      var dataId = backend.write(backendVals, shape, dtype);\n      var t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n      this.trackTensor(t, backend);\n      // Count bytes for string tensors.\n      if (dtype === 'string') {\n        var info = this.state.tensorInfo.get(dataId);\n        var newBytes = bytesFromStringArray(backendVals);\n        this.state.numBytes += newBytes - info.bytes;\n        info.bytes = newBytes;\n      }\n      return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     * @deprecated\n     */\n  }, {\n    key: \"makeTensorFromDataId\",\n    value: function makeTensorFromDataId(dataId, shape, dtype, backend) {\n      dtype = dtype || 'float32';\n      var tensorInfo = {\n        dataId: dataId,\n        shape: shape,\n        dtype: dtype\n      };\n      return this.makeTensorFromTensorInfo(tensorInfo, backend);\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor that is a wrapper\n     * around an existing data id in TensorInfo. It doesn't create a new data id,\n     * only increments the ref count used in memory tracking.\n     */\n  }, {\n    key: \"makeTensorFromTensorInfo\",\n    value: function makeTensorFromTensorInfo(tensorInfo, backend) {\n      var dataId = tensorInfo.dataId,\n        shape = tensorInfo.shape,\n        dtype = tensorInfo.dtype;\n      var t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n      this.trackTensor(t, backend);\n      return t;\n    }\n  }, {\n    key: \"makeVariable\",\n    value: function makeVariable(initialValue) {\n      var trainable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var name = arguments.length > 2 ? arguments[2] : undefined;\n      var dtype = arguments.length > 3 ? arguments[3] : undefined;\n      name = name || this.nextVariableId().toString();\n      if (dtype != null && dtype !== initialValue.dtype) {\n        initialValue = initialValue.cast(dtype);\n      }\n      var v = new Variable(initialValue, trainable, name, this.nextTensorId());\n      if (this.state.registeredVariables[v.name] != null) {\n        throw new Error(\"Variable with name \".concat(v.name, \" was already registered\"));\n      }\n      this.state.registeredVariables[v.name] = v;\n      this.incRef(v, this.backend);\n      return v;\n    }\n  }, {\n    key: \"trackTensor\",\n    value: function trackTensor(a, backend) {\n      this.state.numTensors++;\n      if (a.dtype === 'string') {\n        this.state.numStringTensors++;\n      }\n      // Bytes for complex numbers are counted by their components. Bytes for\n      // string tensors are counted when writing values.\n      var bytes = 0;\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        bytes = a.size * util.bytesPerElement(a.dtype);\n      }\n      this.state.numBytes += bytes;\n      if (!this.state.tensorInfo.has(a.dataId)) {\n        this.state.numDataBuffers++;\n        this.state.tensorInfo.set(a.dataId, {\n          backend: backend || this.backend,\n          dtype: a.dtype,\n          shape: a.shape,\n          bytes: bytes\n        });\n      }\n      if (!(a instanceof Variable)) {\n        this.track(a);\n      }\n    }\n    // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n  }, {\n    key: \"incRef\",\n    value: function incRef(a, backend) {\n      this.trackTensor(a, backend);\n      this.backend.incRef(a.dataId);\n    }\n  }, {\n    key: \"removeDataId\",\n    value: function removeDataId(dataId, backend) {\n      if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend) {\n        this.state.tensorInfo.delete(dataId);\n        this.state.numDataBuffers--;\n      }\n    }\n  }, {\n    key: \"disposeTensor\",\n    value: function disposeTensor(a) {\n      if (!this.state.tensorInfo.has(a.dataId)) {\n        return;\n      }\n      var info = this.state.tensorInfo.get(a.dataId);\n      this.state.numTensors--;\n      if (a.dtype === 'string') {\n        this.state.numStringTensors--;\n        this.state.numBytes -= info.bytes;\n      }\n      // Don't count bytes for complex numbers as they are counted by their\n      // components.\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        var bytes = a.size * util.bytesPerElement(a.dtype);\n        this.state.numBytes -= bytes;\n      }\n      // Remove the reference to dataId if backend dispose the data successfully\n      if (info.backend.disposeData(a.dataId)) {\n        this.removeDataId(a.dataId, info.backend);\n      }\n      // TODO(nsthorat): Construct an error and save the stack trace for\n      // debugging when in debug mode. Creating a stack trace is too expensive\n      // to do unconditionally.\n    }\n  }, {\n    key: \"disposeVariables\",\n    value: function disposeVariables() {\n      for (var varName in this.state.registeredVariables) {\n        var v = this.state.registeredVariables[varName];\n        this.disposeVariable(v);\n      }\n    }\n  }, {\n    key: \"disposeVariable\",\n    value: function disposeVariable(v) {\n      this.disposeTensor(v);\n      if (this.state.registeredVariables[v.name] != null) {\n        delete this.state.registeredVariables[v.name];\n      }\n    }\n  }, {\n    key: \"memory\",\n    value: function memory() {\n      var info = this.backend.memory();\n      info.numTensors = this.state.numTensors;\n      info.numDataBuffers = this.state.numDataBuffers;\n      info.numBytes = this.state.numBytes;\n      if (this.state.numStringTensors > 0) {\n        info.unreliable = true;\n        if (info.reasons == null) {\n          info.reasons = [];\n        }\n        info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');\n      }\n      return info;\n    }\n  }, {\n    key: \"profile\",\n    value: function () {\n      var _profile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(query) {\n        var startBytes, startNumTensors, _iterator, _step, kernel;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.state.profiling = true;\n              startBytes = this.state.numBytes;\n              startNumTensors = this.state.numTensors;\n              this.state.activeProfile.kernels = [];\n              _context3.next = 6;\n              return query();\n            case 6:\n              this.state.activeProfile.result = _context3.sent;\n              this.state.profiling = false;\n              this.state.activeProfile.peakBytes = Math.max.apply(Math, _toConsumableArray(this.state.activeProfile.kernels.map(function (d) {\n                return d.totalBytesSnapshot;\n              })));\n              this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n              this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;\n              _iterator = _createForOfIteratorHelper(this.state.activeProfile.kernels);\n              _context3.prev = 12;\n              _iterator.s();\n            case 14:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 24;\n                break;\n              }\n              kernel = _step.value;\n              _context3.next = 18;\n              return kernel.kernelTimeMs;\n            case 18:\n              kernel.kernelTimeMs = _context3.sent;\n              _context3.next = 21;\n              return kernel.extraInfo;\n            case 21:\n              kernel.extraInfo = _context3.sent;\n            case 22:\n              _context3.next = 14;\n              break;\n            case 24:\n              _context3.next = 29;\n              break;\n            case 26:\n              _context3.prev = 26;\n              _context3.t0 = _context3[\"catch\"](12);\n              _iterator.e(_context3.t0);\n            case 29:\n              _context3.prev = 29;\n              _iterator.f();\n              return _context3.finish(29);\n            case 32:\n              return _context3.abrupt(\"return\", this.state.activeProfile);\n            case 33:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[12, 26, 29, 32]]);\n      }));\n      function profile(_x2) {\n        return _profile.apply(this, arguments);\n      }\n      return profile;\n    }()\n  }, {\n    key: \"isTapeOn\",\n    value: function isTapeOn() {\n      return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n  }, {\n    key: \"addTapeNode\",\n    value: function addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n      var _this8 = this;\n      var tapeNode = {\n        id: this.state.nextTapeNodeId++,\n        kernelName: kernelName,\n        inputs: inputs,\n        outputs: outputs,\n        saved: saved\n      };\n      var gradConfig = getGradient(kernelName);\n      if (gradConfig != null) {\n        gradientsFunc = gradConfig.gradFunc;\n      }\n      if (gradientsFunc != null) {\n        tapeNode.gradient = function (dys) {\n          // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n          // the backprop graph to the user as null instead of zeros\n          dys = dys.map(function (dy, i) {\n            if (dy == null) {\n              var output = outputs[i];\n              var vals = util.makeZerosTypedArray(output.size, output.dtype);\n              return _this8.makeTensor(vals, output.shape, output.dtype);\n            }\n            return dy;\n          });\n          // Grad functions of ops with single outputs expect a dy, while ops\n          // with multiple outputs expect dys (array of dy).\n          return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n        };\n      }\n      this.state.activeTape.push(tapeNode);\n    }\n  }, {\n    key: \"keep\",\n    value: function keep(result) {\n      result.kept = true;\n      return result;\n    }\n  }, {\n    key: \"startTape\",\n    value: function startTape() {\n      if (this.state.gradientDepth === 0) {\n        this.state.activeTape = [];\n      }\n      this.state.gradientDepth++;\n    }\n  }, {\n    key: \"endTape\",\n    value: function endTape() {\n      this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n  }, {\n    key: \"startScope\",\n    value: function startScope(name) {\n      var scopeInfo = {\n        track: [],\n        name: 'unnamed scope',\n        id: this.state.nextScopeId++\n      };\n      if (name) {\n        scopeInfo.name = name;\n      }\n      this.state.scopeStack.push(scopeInfo);\n      this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n  }, {\n    key: \"endScope\",\n    value: function endScope(result) {\n      var _this9 = this;\n      var tensorsToTrackInParent = getTensorsInContainer(result);\n      var tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(function (t) {\n        return t.id;\n      }));\n      // Dispose the arrays tracked in this scope.\n      for (var i = 0; i < this.state.activeScope.track.length; i++) {\n        var tensor = this.state.activeScope.track[i];\n        if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n          tensor.dispose();\n        }\n      }\n      var oldScope = this.state.scopeStack.pop();\n      this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1];\n      // Track the current result in the parent scope.\n      tensorsToTrackInParent.forEach(function (tensor) {\n        // Only track the tensor if was allocated in the inner scope and is not\n        // globally kept.\n        if (!tensor.kept && tensor.scopeId === oldScope.id) {\n          _this9.track(tensor);\n        }\n      });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n  }, {\n    key: \"gradients\",\n    value: function gradients(f, xs, dy) {\n      var _this10 = this;\n      var allowNoGradients = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      util.assert(xs.length > 0, function () {\n        return 'gradients() received an empty list of xs.';\n      });\n      if (dy != null && dy.dtype !== 'float32') {\n        throw new Error(\"dy must have 'float32' dtype, but has '\".concat(dy.dtype, \"'\"));\n      }\n      var y = this.scopedRun(function () {\n        return _this10.startTape();\n      }, function () {\n        return _this10.endTape();\n      }, function () {\n        return _this10.tidy('forward', f);\n      });\n      util.assert(y instanceof Tensor, function () {\n        return 'The result y returned by f() must be a tensor.';\n      });\n      // Filter out the nodes that don't connect x => y.\n      var filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n      if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n        throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n      }\n      return this.tidy('backward', function () {\n        var accumulatedGradientMap = {};\n        accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy;\n        // Backprop gradients through the filtered nodes.\n        backpropagateGradients(accumulatedGradientMap, filteredTape,\n        // Pass the tidy function to avoid circular dep with `tape.ts`.\n        function (f) {\n          return _this10.tidy(f);\n        },\n        // Pass an add function to avoide a circular dep with `tape.ts`.\n        add);\n        var grads = xs.map(function (x) {\n          return accumulatedGradientMap[x.id];\n        });\n        if (_this10.state.gradientDepth === 0) {\n          // This means that we are not computing higher-order gradients\n          // and can clean up the tape.\n          _this10.state.activeTape.forEach(function (node) {\n            var _iterator2 = _createForOfIteratorHelper(node.saved),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var tensor = _step2.value;\n                tensor.dispose();\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          });\n          _this10.state.activeTape = null;\n        }\n        return {\n          value: y,\n          grads: grads\n        };\n      });\n    }\n  }, {\n    key: \"customGrad\",\n    value: function customGrad(f) {\n      var _this11 = this;\n      util.assert(util.isFunction(f), function () {\n        return 'The f passed in customGrad(f) must be a function.';\n      });\n      return function () {\n        for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n          inputs[_key] = arguments[_key];\n        }\n        util.assert(inputs.every(function (t) {\n          return t instanceof Tensor;\n        }), function () {\n          return 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors';\n        });\n        var res;\n        var inputMap = {};\n        inputs.forEach(function (input, i) {\n          inputMap[i] = input;\n        });\n        var forwardFunc = function forwardFunc(_, save) {\n          res = f.apply(void 0, [].concat(inputs, [save]));\n          util.assert(res.value instanceof Tensor, function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor';\n          });\n          util.assert(util.isFunction(res.gradFunc), function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.';\n          });\n          return res.value;\n        };\n        var backwardsFunc = function backwardsFunc(dy, saved) {\n          var gradRes = res.gradFunc(dy, saved);\n          var grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n          util.assert(grads.length === inputs.length, function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).';\n          });\n          util.assert(grads.every(function (t) {\n            return t instanceof Tensor;\n          }), function () {\n            return 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.';\n          });\n          var gradMap = {};\n          grads.forEach(function (grad, i) {\n            gradMap[i] = function () {\n              return grad;\n            };\n          });\n          return gradMap;\n        };\n        return _this11.runKernelFunc({\n          forwardFunc: forwardFunc,\n          backwardsFunc: backwardsFunc,\n          inputs: inputMap\n        });\n      };\n    }\n  }, {\n    key: \"readSync\",\n    value: function readSync(dataId) {\n      // Route the read to the correct backend.\n      var info = this.state.tensorInfo.get(dataId);\n      return info.backend.readSync(dataId);\n    }\n  }, {\n    key: \"read\",\n    value: function read(dataId) {\n      // Route the read to the correct backend.\n      var info = this.state.tensorInfo.get(dataId);\n      return info.backend.read(dataId);\n    }\n  }, {\n    key: \"readToGPU\",\n    value: function readToGPU(dataId, options) {\n      // Route the read to the correct backend.\n      var info = this.state.tensorInfo.get(dataId);\n      return info.backend.readToGPU(dataId, options);\n    }\n  }, {\n    key: \"time\",\n    value: function () {\n      var _time = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(query) {\n        var start, timingInfo;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              start = now();\n              _context4.next = 3;\n              return this.backend.time(query);\n            case 3:\n              timingInfo = _context4.sent;\n              timingInfo.wallMs = now() - start;\n              return _context4.abrupt(\"return\", timingInfo);\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function time(_x3) {\n        return _time.apply(this, arguments);\n      }\n      return time;\n    }()\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n  }, {\n    key: \"track\",\n    value: function track(result) {\n      if (this.state.activeScope != null) {\n        result.scopeId = this.state.activeScope.id;\n        this.state.activeScope.track.push(result);\n      }\n      return result;\n    }\n  }, {\n    key: \"registeredVariables\",\n    get: function get() {\n      return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Make any pending promise obsolete.\n      this.pendingBackendInitId++;\n      this.state.dispose();\n      this.ENV.reset();\n      this.state = new EngineState();\n      for (var backendName in this.registry) {\n        this.disposeRegisteredKernels(backendName);\n        this.registry[backendName].dispose();\n        delete this.registry[backendName];\n      }\n      this.backendName = null;\n      this.backendInstance = null;\n      this.pendingBackendInit = null;\n    }\n  }]);\n  return Engine;\n}();\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n  var values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n  var ns = getGlobalNamespace();\n  if (ns._tfengine == null) {\n    var environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(function () {\n    return ns._tfengine;\n  });\n  return ns._tfengine;\n}\nexport var ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  var inputs = {\n    a: a,\n    b: b\n  };\n  return ENGINE.runKernel(Add, inputs);\n}","map":{"version":3,"mappings":"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","names":["KernelBackend","Environment","setEnvironmentGlobal","getGlobalNamespace","Add","Cast","Identity","getGradient","getKernel","getKernelsForBackend","log","Profiler","backpropagateGradients","getFilteredNodesXToY","setTensorTracker","Tensor","Variable","getTensorsInContainer","util","bytesFromStringArray","makeOnesTypedArray","now","sizeFromShape","isRegisteredKernelInvocation","kernelInvocation","kernelName","EngineState","WeakMap","newBytes","newTensors","peakBytes","kernels","result","kernelNames","Array","from","Set","map","k","name","variableName","registeredVariables","dispose","Engine","ENV","state","pendingBackendInit","then","backendInstance","sortedBackends","getSortedBackends","i","length","backendName","initializeBackend","success","setBackend","Error","initializeBackendsAndReturnBest","asyncInit","Object","keys","registryFactory","registry","factory","priority","warn","setupRegisteredKernels","profiler","forEach","kernel","setupFunc","disposeFunc","registryFactoryEntry","backend","promiseId","pendingBackendInitId","catch","err","stack","message","disposeRegisteredKernels","sort","a","b","dataId","info","tensorInfo","get","srcBackend","values","readSync","refCount","disposeData","move","shape","dtype","shouldCheckForMemLeaks","numDataMovesStack","nameOrFn","fn","String","scopedRun","startScope","endScope","Promise","console","error","start","end","f","res","ex","nextTensorId","nextVariableId","x","y","ENGINE","runKernel","inputs","grad","dy","gradInputs","attrs","saved","addTapeNode","activeScope","hasKernel","runKernelFunc","getBool","numDataIdsBefore","outInfos","numDataIdsAfter","numDataIds","numOutputDataIds","numMoves","dataIdsLeaked","kernelParams","outputs","isTapeOn","startingBytecount","numBytes","startingNumTensors","numTensors","push","kernelFunc","out","kernelOrScopeName","assert","isArray","checkKernelForMemLeak","outTensors","outInfo","rank","makeTensorFromTensorInfo","tensorsToSave","getTensorsForGradient","saveTensorsForBackwardMode","forwardFunc","saveFunc","tensors","keep","clone","tensor","tidy","outs","backwardsFunc","kernelProfile","kernelDepth","profiling","profileKernel","logKernelProfile","activeProfile","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","key","outputShapes","item","kernelTimeMs","timeMs","extraInfo","gradConfig","inputsToSave","outputsToSave","inputTensorsToSave","saveAllInputs","inputName","outputTensorsToSave","filter","_","concat","backendVals","isString","encodeString","d","write","t","trackTensor","bytes","initialValue","trainable","toString","cast","v","incRef","numStringTensors","size","bytesPerElement","has","numDataBuffers","set","track","delete","removeDataId","varName","disposeVariable","disposeTensor","memory","unreliable","reasons","query","startBytes","startNumTensors","Math","max","gradientDepth","gradientsFunc","tapeNode","id","nextTapeNodeId","gradFunc","gradient","dys","output","vals","makeZerosTypedArray","makeTensor","activeTape","kept","scopeInfo","nextScopeId","scopeStack","tensorsToTrackInParent","tensorsToTrackInParentSet","oldScope","pop","scopeId","xs","allowNoGradients","startTape","endTape","filteredTape","accumulatedGradientMap","ones","add","grads","node","value","isFunction","every","inputMap","input","save","gradRes","gradMap","read","options","readToGPU","time","timingInfo","wallMs","reset","getOrMakeEngine","ns","_tfengine","environment"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\engine.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimingInfo, DataMover, KernelBackend} from './backends/backend';\nimport {Environment, setEnvironmentGlobal} from './environment';\nimport {getGlobalNamespace} from './global_util';\nimport {Add, Cast, Identity} from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend, GradFunc, NamedAttrMap } from './kernel_registry';\nimport { TensorInfo } from './tensor_info';\nimport * as log from './log';\nimport {KernelProfile, Profiler} from './profiler';\nimport {backpropagateGradients, getFilteredNodesXToY, TapeNode} from './tape';\nimport {DataToGPUOptions, GPUData, setTensorTracker, Tensor, TensorTracker, Variable} from './tensor';\nimport {DataId} from './tensor_info';\nimport {GradSaveFunc, NamedTensorMap, NamedVariableMap, TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\nimport {BackendValues, DataType, DataValues} from './types';\nimport * as util from './util';\nimport {bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape} from './util';\n\n/**\n * A function that computes an output. The save function is for saving tensors\n * computed in the forward pass, that we need in the backward pass.\n */\nexport type ForwardFunc<T> = (backend: KernelBackend, save?: GradSaveFunc) => T;\n\n/**\n * @docalias (a: Tensor, b: Tensor,..., save?: Function) => {\n *   value: Tensor,\n *   gradFunc: (dy: Tensor, saved?: NamedTensorMap) => Tensor | Tensor[]\n * }\n */\nexport type CustomGradientFunc<T extends Tensor> =\n    (...inputs: Array<Tensor|GradSaveFunc>) => {\n      value: T;\n      gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[];\n    };\n\nexport type MemoryInfo = {\n  numTensors: number; numDataBuffers: number; numBytes: number;\n  unreliable?: boolean; reasons: string[];\n};\n\ntype KernelInfo = {\n  name: string; bytesAdded: number; totalBytesSnapshot: number;\n  tensorsAdded: number;\n  totalTensorsSnapshot: number;\n  inputShapes: number[][];\n  outputShapes: number[][];\n  kernelTimeMs: number | {error: string} | Promise<number|{error: string}>;\n  extraInfo: string | Promise<string>;\n};\n\nexport type ProfileInfo = {\n  newBytes: number; newTensors: number; peakBytes: number;\n  kernels: KernelInfo[];\n  result: TensorContainer;\n  kernelNames: string[];\n};\n\nexport interface TimingInfo extends BackendTimingInfo {\n  wallMs: number;\n}\n\n/** @docalias Function */\nexport type ScopeFn<T extends TensorContainer> = () => T;\n\ninterface ScopeState {\n  track: Tensor[];\n  name: string;\n  id: number;\n}\n\ninterface RegisteredKernelInvocation<I extends NamedTensorMap> {\n  kernelName: string;\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\ninterface CustomGradKernelInvocation<T extends Tensor|Tensor[],\n                                               I extends NamedTensorMap> {\n  forwardFunc: ForwardFunc<T>;\n  backwardsFunc: (dy: T, saved: Tensor[]) => {\n    [P in keyof I]: () => I[P]\n  };\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\nfunction isRegisteredKernelInvocation<T extends Tensor|Tensor[],\n                                                I extends NamedTensorMap>(\n    kernelInvocation: RegisteredKernelInvocation<I>|\n    CustomGradKernelInvocation<T, I>):\n    kernelInvocation is RegisteredKernelInvocation<I> {\n  return (kernelInvocation as RegisteredKernelInvocation<I>).kernelName != null;\n}\n\nclass EngineState {\n  // Public since optimizers will use it.\n  registeredVariables: NamedVariableMap = {};\n\n  nextTapeNodeId = 0;\n  numBytes = 0;\n  numTensors = 0;\n  numStringTensors = 0;\n  numDataBuffers = 0;\n\n  activeTape: TapeNode[];\n  // Number of nested tf.grad() statements when computing higher-order\n  // gradients. E.g. `1` for first-order gradients and `2` for second-order\n  // gradients. Used to track if the tape should be removed after a backprop.\n  gradientDepth = 0;\n  // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n  // off the tape.\n  kernelDepth = 0;\n\n  // Keep Tensors that parallel the tapes.\n  activeScope: ScopeState;\n  scopeStack: ScopeState[] = [];\n  /**\n   * Keeps track of the number of data moves during a kernel execution. We\n   * maintain a stack since kernels can call other kernels, recursively.\n   */\n  numDataMovesStack: number[] = [];\n  nextScopeId = 0;\n\n  tensorInfo = new WeakMap<DataId, {\n    backend: KernelBackend,\n    bytes: number,\n    dtype: DataType,\n    shape: number[]\n  }>();\n\n  profiling = false;\n  activeProfile: ProfileInfo = {\n    newBytes: 0,\n    newTensors: 0,\n    peakBytes: 0,\n    kernels: [],\n    result: null,\n    get kernelNames():\n        string[] {\n          return Array.from(new Set(this.kernels.map(k => k.name)));\n        }\n  };\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\n\nexport class Engine implements TensorTracker, DataMover {\n  state: EngineState;\n  backendName: string;\n  registry: {[id: string]: KernelBackend} = {};\n  registryFactory: {\n    [id: string]: {\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority: number\n    }\n  } = {};\n\n  private profiler: Profiler;\n  private backendInstance: KernelBackend;\n  private pendingBackendInit: Promise<boolean>;\n  private pendingBackendInitId = 0;\n\n  constructor(public ENV: Environment) {\n    this.state = new EngineState();\n  }\n\n  async ready(): Promise<void> {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  get backend(): KernelBackend {\n    if (this.pendingBackendInit != null) {\n      throw new Error(\n          `Backend '${this.backendName}' has not yet been initialized. Make ` +\n          `sure to await tf.ready() or await tf.setBackend() before calling ` +\n          `other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {name, asyncInit} = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(\n            `The highest priority backend '${name}' has not yet been ` +\n            `initialized. Make sure to await tf.ready() or ` +\n            `await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n\n  backendNames(): string[] {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName: string): KernelBackend {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {asyncInit} = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName: string):\n      () => KernelBackend | Promise<KernelBackend> {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(\n      backendName: string,\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority = 1): boolean {\n    if (backendName in this.registryFactory) {\n      log.warn(\n          `${backendName} backend was already registered. ` +\n          `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {factory, priority};\n    return true;\n  }\n\n  async setBackend(backendName: string): Promise<boolean> {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n\n    return true;\n  }\n\n  private setupRegisteredKernels(): void {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  private disposeRegisteredKernels(backendName: string): void {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  private initializeBackend(backendName: string):\n      {success: boolean|Promise<boolean>, asyncInit: boolean} {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(\n          `Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n      if (backend && !(backend instanceof KernelBackend) &&\n          typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success =\n            backend\n                .then(backendInstance => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.registry[backendName] = backendInstance;\n                  this.pendingBackendInit = null;\n                  return true;\n                })\n                .catch(err => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.pendingBackendInit = null;\n                  log.warn(`Initialization of backend ${backendName} failed`);\n                  log.warn(err.stack || err.message);\n                  return false;\n                });\n        this.pendingBackendInit = success;\n        return {success, asyncInit: true};\n      } else {\n        this.registry[backendName] = backend as KernelBackend;\n        return {success: true, asyncInit: false};\n      }\n    } catch (err) {\n      log.warn(`Initialization of backend ${backendName} failed`);\n      log.warn(err.stack || err.message);\n      return {success: false, asyncInit: false};\n    }\n  }\n\n  removeBackend(backendName: string): void {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName];\n\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  private getSortedBackends(): string[] {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a: string, b: string) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority -\n          this.registryFactory[a].priority;\n    });\n  }\n\n  private initializeBackendsAndReturnBest():\n      {name: string, asyncInit: boolean} {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {name: backendName, asyncInit};\n      }\n    }\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  moveData(backend: KernelBackend, dataId: DataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId);\n    // Delete the tensor from the old backend and move it to the new\n    // backend.\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype, refCount);\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy<T extends TensorContainer>(nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>):\n      T {\n    let name: string = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    let result: T;\n    return this.scopedRun(\n        () => this.startScope(name), () => this.endScope(result), () => {\n          result = fn();\n          if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n          }\n          return result;\n        });\n  }\n\n  private scopedRun<T>(start: () => void, end: () => void, f: () => T): T {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  private static nextTensorId = 0;\n  private nextTensorId(): number {\n    return Engine.nextTensorId++;\n  }\n\n  private static nextVariableId = 0;\n  private nextVariableId(): number {\n    return Engine.nextVariableId++;\n  }\n\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n  private clone(x: Tensor): Tensor {\n    const y: Tensor = ENGINE.runKernel(Identity,\n                                       {x} as unknown as NamedTensorMap);\n    const inputs = {x};\n    const grad = (dy: Tensor) => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {x: dy};\n        const attrs = {dtype};\n\n        return ENGINE.runKernel(\n                   Cast, gradInputs as unknown as NamedTensorMap,\n                   // tslint:disable-next-line: no-unnecessary-type-assertion\n                   attrs as unknown as NamedAttrMap) as Tensor;\n      }\n    });\n    const saved: Tensor[] = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n  runKernel<T extends Tensor|Tensor[]>(\n      kernelName: string, inputs: NamedTensorMap, attrs?: NamedAttrMap): T {\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${\n          this.backendName}'`);\n    }\n    return this.runKernelFunc({kernelName, inputs, attrs});\n  }\n\n  private shouldCheckForMemLeaks(): boolean {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  private checkKernelForMemLeak(\n      kernelName: string, numDataIdsBefore: number,\n      outInfos: TensorInfo[]): void {\n    const numDataIdsAfter = this.backend.numDataIds();\n\n    // Count the number of data ids associated with the result of the kernel.\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n    });\n\n    // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n    const numMoves =\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked =\n        numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(\n          `Backend '${this.backendName}' has an internal memory leak ` +\n          `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n\n  /**\n   * Internal helper method to execute a kernel Func\n   *\n   * Use `runKernel` to execute kernels from outside of engine.\n   */\n  private runKernelFunc<T extends Tensor|Tensor[], I extends NamedTensorMap>(\n      kernelParams: RegisteredKernelInvocation<I>|\n      CustomGradKernelInvocation<T, I>): T {\n    let outputs: Tensor[];\n    let saved: Tensor[] = [];\n    const isTapeOn = this.isTapeOn();\n\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc: () => Tensor[];\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    let out: TensorInfo|TensorInfo[];\n\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n        kernelParams.kernelName :\n        this.state.activeScope != null ? this.state.activeScope.name : '';\n\n    // Create the kernelFunc from either a registered kernel OR passed in\n    // forward/backward functions (used by custom grad). In this context a\n    // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const {kernelName, inputs, attrs} = kernelParams;\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n      const kernel = getKernel(kernelName, this.backendName);\n      util.assert(\n          kernel != null,\n          () => `Cannot find registered kernel '${kernelName}' for backend '${\n              this.backendName}'`);\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({inputs, attrs, backend: this.backend});\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n\n        const outTensors = outInfos.map((outInfo: TensorInfo|Tensor) => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if ((outInfo as Tensor).rank != null) {\n            return outInfo as Tensor;\n          }\n          return this.makeTensorFromTensorInfo(outInfo);\n        });\n\n        // Save any required inputs and outputs.\n\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since there would be no backprop for these tensors\n        // (which would otherwise dispose them).\n        if (isTapeOn) {\n          const tensorsToSave =\n              this.getTensorsForGradient(kernelName, inputs, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n        return outTensors;\n      };\n    } else {\n      const {forwardFunc} = kernelParams;\n      // Running a customGrad op.\n      const saveFunc: GradSaveFunc = (tensors) => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = (Array.isArray(out) ? out : [out]) as Tensor[];\n        if (this.shouldCheckForMemLeaks()) {\n          // Scope name is used to print a more helpful error message if needed.\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n\n    //\n    // Run the kernelFunc. Optionally profiling it.\n    //\n    const {inputs, attrs} = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n        null :\n        kernelParams.backwardsFunc;\n\n    let kernelProfile: KernelProfile;\n    this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n          if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n            outputs = kernelFunc();\n          } else {\n            kernelProfile = this.profiler.profileKernel(\n                kernelOrScopeName, inputs, () => kernelFunc());\n            if (this.ENV.getBool('DEBUG')) {\n              this.profiler.logKernelProfile(kernelProfile);\n            }\n            outputs = kernelProfile.outputs;\n          }\n        });\n\n    if (isTapeOn) {\n      this.addTapeNode(\n          kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(\n            key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n    return (Array.isArray(out) ? outputs : outputs[0]) as T;\n  }\n\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n  private saveTensorsForBackwardMode(tensors: Tensor[]): Tensor[] {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n  private getTensorsForGradient(\n      kernelName: string, inputs: NamedTensorMap,\n      outputs: Tensor[]): Tensor[]|null {\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      const inputsToSave: string[] = gradConfig.inputsToSave || [];\n      const outputsToSave: boolean[] = gradConfig.outputsToSave || [];\n\n      // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n      let inputTensorsToSave: Tensor[];\n      if (gradConfig.saveAllInputs) {\n        util.assert(\n            Array.isArray(inputs),\n            () => 'saveAllInputs is true, expected inputs to be an array.');\n\n        inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n      }\n\n      const outputTensorsToSave: Tensor[] =\n          outputs.filter((_, i) => outputsToSave[i]);\n\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    }\n    // We return an empty list rather than throw an error because the kernel we\n    // are looking up may not actually be relevant to backproping through the\n    // overall function\n    //\n    // See 'does not error if irrelevant (pruned) ops are missing grads' test\n    // in gradients_test.ts for an example.\n    return [];\n  }\n\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: KernelBackend): Tensor {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values as BackendValues;\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = (values as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n\n    // Count bytes for string tensors.\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals as Uint8Array[]);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   * @deprecated\n   */\n  makeTensorFromDataId(\n    dataId: DataId, shape: number[], dtype: DataType,\n    backend?: KernelBackend): Tensor {\n    dtype = dtype || 'float32';\n    const tensorInfo: TensorInfo = {dataId, shape, dtype};\n    return this.makeTensorFromTensorInfo(tensorInfo, backend);\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor that is a wrapper\n   * around an existing data id in TensorInfo. It doesn't create a new data id,\n   * only increments the ref count used in memory tracking.\n   */\n  makeTensorFromTensorInfo(tensorInfo: TensorInfo, backend?: KernelBackend):\n      Tensor {\n    const {dataId, shape, dtype} = tensorInfo;\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n    return t;\n  }\n\n  makeVariable(\n      initialValue: Tensor, trainable = true, name?: string,\n      dtype?: DataType): Variable {\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  trackTensor(a: Tensor, backend: KernelBackend): void {\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    // Bytes for complex numbers are counted by their components. Bytes for\n    // string tensors are counted when writing values.\n    let bytes = 0;\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      bytes = a.size * util.bytesPerElement(a.dtype);\n    }\n    this.state.numBytes += bytes;\n\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n\n  // Track the tensor by dataId and increase the refCount for the dataId in the\n  // backend.\n  // TODO(pyu10055): This is currently used by makeVariable method, to increase\n  // refCount on the backend for the dataId. It can potentially be replaced with\n  // Identity op indead of calling backend directly.\n  incRef(a: Tensor, backend: KernelBackend): void {\n    this.trackTensor(a, backend);\n    this.backend.incRef(a.dataId);\n  }\n\n  removeDataId(dataId: DataId, backend: KernelBackend) {\n    if (this.state.tensorInfo.has(dataId) &&\n        this.state.tensorInfo.get(dataId).backend === backend) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n  disposeTensor(a: Tensor): void {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    }\n    // Don't count bytes for complex numbers as they are counted by their\n    // components.\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      const bytes = a.size * util.bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    }\n\n    // Remove the reference to dataId if backend dispose the data successfully\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    }\n\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables(): void {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v: Variable): void {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory(): MemoryInfo {\n    const info = this.backend.memory() as MemoryInfo;\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\n          'Memory usage by string tensors is approximate ' +\n          '(2 bytes per character)');\n    }\n    return info;\n  }\n\n  async profile(query: () => (TensorContainer | Promise<TensorContainer>)):\n      Promise<ProfileInfo> {\n    this.state.profiling = true;\n\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n\n    this.state.profiling = false;\n\n    this.state.activeProfile.peakBytes = Math.max(\n        ...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors =\n        this.state.numTensors - startNumTensors;\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n    return this.state.activeProfile;\n  }\n\n  isTapeOn(): boolean {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  private addTapeNode(\n      kernelName: string, inputs: NamedTensorMap, outputs: Tensor[],\n      gradientsFunc: GradFunc, saved: Tensor[], attrs: NamedAttrMap): void {\n    const tapeNode: TapeNode =\n        {id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved};\n\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = (dys: Tensor[]) => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep<T extends Tensor>(result: T): T {\n    result.kept = true;\n    return result;\n  }\n\n  private startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n\n  private endTape() {\n    this.state.gradientDepth--;\n  }\n\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name?: string) {\n    const scopeInfo: ScopeState = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result?: TensorContainer) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet =\n        new Set(tensorsToTrackInParent.map(t => t.id));\n\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ?\n        null :\n        this.state.scopeStack[this.state.scopeStack.length - 1];\n\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients<T extends Tensor>(\n      f: () => T, xs: Tensor[], dy?: T,\n      allowNoGradients = false): {value: T, grads: Tensor[]} {\n    util.assert(\n        xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(\n        () => this.startTape(), () => this.endTape(),\n        () => this.tidy('forward', f));\n\n    util.assert(\n        y instanceof Tensor,\n        () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\n          'Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n          'that the f you passed encloses all operations that lead from x ' +\n          'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap: {[tensorId: number]: Tensor} = {};\n      accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(\n          accumulatedGradientMap, filteredTape,\n          // Pass the tidy function to avoid circular dep with `tape.ts`.\n          f => this.tidy(f as ScopeFn<Tensor>),\n          // Pass an add function to avoide a circular dep with `tape.ts`.\n          add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {value: y, grads};\n    });\n  }\n\n  customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n      (...args: Array<Tensor|GradSaveFunc>) => T {\n    util.assert(\n        util.isFunction(f),\n        () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs: Tensor[]): T => {\n      util.assert(\n          inputs.every(t => t instanceof Tensor),\n          () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n              'tensors');\n\n      let res: {\n        value: T,\n        gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[],\n      };\n      const inputMap: NamedTensorMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n\n      const forwardFunc: ForwardFunc<T> = (_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(\n            res.value instanceof Tensor,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.value` is a tensor');\n        util.assert(\n            util.isFunction(res.gradFunc),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function.');\n        return res.value;\n      };\n\n      const backwardsFunc = (dy: T, saved: Tensor[]) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads: Tensor[] = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(\n            grads.length === inputs.length,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'the same number of tensors as inputs passed to f(...).');\n        util.assert(\n            grads.every(t => t instanceof Tensor),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'a list of only tensors.');\n        const gradMap: {[key: string]: () => Tensor} = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      };\n\n      return this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap,\n      });\n    };\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId: DataId): Promise<BackendValues> {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n\n  async time(query: () => void): Promise<TimingInfo> {\n    const start = now();\n    const timingInfo = await this.backend.time(query) as TimingInfo;\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  private track<T extends Tensor>(result: T): T {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables(): NamedVariableMap {\n    return this.state.registeredVariables;\n  }\n\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset(): void {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\n\nfunction ones(shape: number[]): Tensor {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine(): Engine {\n  const ns = getGlobalNamespace() as unknown as {_tfengine: Engine};\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\n\nexport const ENGINE = getOrMakeEngine();\n\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a: Tensor, b: Tensor): Tensor {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {a, b};\n  return ENGINE.runKernel(Add, inputs as unknown as NamedTensorMap);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}