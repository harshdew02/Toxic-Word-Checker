{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { browser, cast, env, expandDims, image, reshape, tensor1d, tensor2d, tidy, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\nexport var WebcamIterator = /*#__PURE__*/function (_LazyIterator) {\n  _inherits(WebcamIterator, _LazyIterator);\n  var _super = _createSuper(WebcamIterator);\n  function WebcamIterator(webcamVideoElement, webcamConfig) {\n    var _this;\n    _classCallCheck(this, WebcamIterator);\n    _this = _super.call(this);\n    _this.webcamVideoElement = webcamVideoElement;\n    _this.webcamConfig = webcamConfig;\n    _this.isClosed = true;\n    _this.resize = false;\n    if (_this.needToResize()) {\n      _this.resize = true;\n      _this.cropSize = [_this.webcamConfig.resizeHeight, _this.webcamConfig.resizeWidth];\n      _this.cropBoxInd = tensor1d([0], 'int32');\n      if (_this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        var widthCroppingRatio = _this.webcamConfig.resizeWidth * 1.0 / _this.webcamVideoElement.width;\n        var heightCroppingRatio = _this.webcamConfig.resizeHeight * 1.0 / _this.webcamVideoElement.height;\n        var widthCropStart = (1 - widthCroppingRatio) / 2;\n        var heightCropStart = (1 - heightCroppingRatio) / 2;\n        var widthCropEnd = widthCropStart + widthCroppingRatio;\n        var heightCropEnd = heightCroppingRatio + heightCropStart;\n        _this.cropBox = tensor2d([heightCropStart, widthCropStart, heightCropEnd, widthCropEnd], [1, 4]);\n      } else {\n        _this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n    return _this;\n  }\n  _createClass(WebcamIterator, [{\n    key: \"summary\",\n    value: function summary() {\n      return \"webcam\";\n    }\n    // Construct a WebcamIterator and start it's video stream.\n  }, {\n    key: \"start\",\n    value: // Async function to start video stream.\n    function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.webcamConfig.facingMode) {\n                util.assert(this.webcamConfig.facingMode === 'user' || this.webcamConfig.facingMode === 'environment', function () {\n                  return \"Invalid webcam facing mode: \".concat(_this2.webcamConfig.facingMode, \". \") + \"Please provide 'user' or 'environment'\";\n                });\n              }\n              _context.prev = 1;\n              _context.next = 4;\n              return navigator.mediaDevices.getUserMedia({\n                video: {\n                  deviceId: this.webcamConfig.deviceId,\n                  facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : 'user',\n                  width: this.webcamVideoElement.width,\n                  height: this.webcamVideoElement.height\n                }\n              });\n            case 4:\n              this.stream = _context.sent;\n              _context.next = 11;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              // Modify the error message but leave the stack trace intact\n              _context.t0.message = \"Error thrown while initializing video stream: \".concat(_context.t0.message);\n              throw _context.t0;\n            case 11:\n              if (this.stream) {\n                _context.next = 13;\n                break;\n              }\n              throw new Error('Could not obtain video from webcam.');\n            case 13:\n              // Older browsers may not have srcObject\n              try {\n                this.webcamVideoElement.srcObject = this.stream;\n              } catch (error) {\n                console.log(error);\n                this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n              }\n              // Start the webcam video stream\n              this.webcamVideoElement.play();\n              this.isClosed = false;\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                // Add event listener to make sure the webcam has been fully initialized.\n                _this2.webcamVideoElement.onloadedmetadata = function () {\n                  resolve();\n                };\n              }));\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var img;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.isClosed) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", {\n                value: null,\n                done: true\n              });\n            case 2:\n              _context2.prev = 2;\n              img = browser.fromPixels(this.webcamVideoElement);\n              _context2.next = 9;\n              break;\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](2);\n              throw new Error(\"Error thrown converting video to pixels: \".concat(JSON.stringify(_context2.t0)));\n            case 9:\n              if (!this.resize) {\n                _context2.next = 22;\n                break;\n              }\n              _context2.prev = 10;\n              return _context2.abrupt(\"return\", {\n                value: this.cropAndResizeFrame(img),\n                done: false\n              });\n            case 14:\n              _context2.prev = 14;\n              _context2.t1 = _context2[\"catch\"](10);\n              throw new Error(\"Error thrown cropping the video: \".concat(_context2.t1.message));\n            case 17:\n              _context2.prev = 17;\n              img.dispose();\n              return _context2.finish(17);\n            case 20:\n              _context2.next = 23;\n              break;\n            case 22:\n              return _context2.abrupt(\"return\", {\n                value: img,\n                done: false\n              });\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 6], [10, 14, 17, 20]]);\n      }));\n      function next() {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }()\n  }, {\n    key: \"needToResize\",\n    value: function needToResize() {\n      // If resizeWidth and resizeHeight are provided, and different from the\n      // width and height of original HTMLVideoElement, then resizing and cropping\n      // is required.\n      if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n        return true;\n      }\n      return false;\n    }\n    // Cropping and resizing each frame based on config\n  }, {\n    key: \"cropAndResizeFrame\",\n    value: function cropAndResizeFrame(img) {\n      var _this3 = this;\n      return tidy(function () {\n        var expandedImage = expandDims(cast(img, 'float32'), 0);\n        var resizedImage;\n        resizedImage = image.cropAndResize(expandedImage, _this3.cropBox, _this3.cropBoxInd, _this3.cropSize, 'bilinear');\n        // Extract image from batch cropping.\n        var shape = resizedImage.shape;\n        return reshape(resizedImage, shape.slice(1));\n      });\n    }\n    // Capture one frame from the video stream, and extract the value from\n    // iterator.next() result.\n  }, {\n    key: \"capture\",\n    value: function () {\n      var _capture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.next();\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent.value);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function capture() {\n        return _capture.apply(this, arguments);\n      }\n      return capture;\n    }() // Stop the video stream and pause webcam iterator.\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var tracks = this.stream.getTracks();\n      tracks.forEach(function (track) {\n        return track.stop();\n      });\n      try {\n        this.webcamVideoElement.srcObject = null;\n      } catch (error) {\n        console.log(error);\n        this.webcamVideoElement.src = null;\n      }\n      this.isClosed = true;\n    }\n    // Override toArray() function to prevent collecting.\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      throw new Error('Can not convert infinite video stream to array.');\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(webcamVideoElement) {\n        var webcamConfig,\n          webcamIterator,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              webcamConfig = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              if (env().get('IS_BROWSER')) {\n                _context4.next = 3;\n                break;\n              }\n              throw new Error('tf.data.webcam is only supported in browser environment.');\n            case 3:\n              if (webcamVideoElement) {\n                _context4.next = 9;\n                break;\n              }\n              // If webcam video element is not provided, create a hidden video element\n              // with provided width and height.\n              webcamVideoElement = document.createElement('video');\n              if (!(!webcamConfig.resizeWidth || !webcamConfig.resizeHeight)) {\n                _context4.next = 7;\n                break;\n              }\n              throw new Error('Please provide webcam video element, or resizeWidth and ' + 'resizeHeight to create a hidden video element.');\n            case 7:\n              webcamVideoElement.width = webcamConfig.resizeWidth;\n              webcamVideoElement.height = webcamConfig.resizeHeight;\n            case 9:\n              webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig); // Call async function to initialize the video stream.\n              _context4.next = 12;\n              return webcamIterator.start();\n            case 12:\n              return _context4.abrupt(\"return\", webcamIterator);\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }]);\n  return WebcamIterator;\n}(LazyIterator);","map":{"version":3,"mappings":"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","names":["browser","cast","env","expandDims","image","reshape","tensor1d","tensor2d","tidy","util","LazyIterator","WebcamIterator","webcamVideoElement","webcamConfig","needToResize","resize","cropSize","resizeHeight","resizeWidth","cropBoxInd","centerCrop","widthCroppingRatio","width","heightCroppingRatio","height","widthCropStart","heightCropStart","widthCropEnd","heightCropEnd","cropBox","facingMode","assert","navigator","mediaDevices","getUserMedia","video","deviceId","stream","message","Error","srcObject","error","console","log","src","window","URL","createObjectURL","play","isClosed","Promise","onloadedmetadata","resolve","value","done","img","fromPixels","JSON","stringify","cropAndResizeFrame","dispose","expandedImage","resizedImage","cropAndResize","shape","slice","next","tracks","getTracks","forEach","track","stop","get","document","createElement","webcamIterator","start"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-data\\src\\iterators\\webcam_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {browser, cast, env, expandDims, image, reshape, tensor1d, Tensor1D, tensor2d, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\nimport {WebcamConfig} from '../types';\nimport {LazyIterator} from './lazy_iterator';\n\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\nexport class WebcamIterator extends LazyIterator<Tensor3D> {\n  private isClosed = true;\n  private stream: MediaStream;\n  private resize = false;\n  private cropSize: [number, number];\n  private cropBox: Tensor2D;\n  private cropBoxInd: Tensor1D;\n\n  private constructor(\n      protected readonly webcamVideoElement: HTMLVideoElement,\n      protected readonly webcamConfig: WebcamConfig) {\n    super();\n    if (this.needToResize()) {\n      this.resize = true;\n      this.cropSize =\n          [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n      this.cropBoxInd = tensor1d([0], 'int32');\n      if (this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        const widthCroppingRatio =\n            this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;\n        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 /\n            this.webcamVideoElement.height;\n        const widthCropStart = (1 - widthCroppingRatio) / 2;\n        const heightCropStart = (1 - heightCroppingRatio) / 2;\n        const widthCropEnd = widthCropStart + widthCroppingRatio;\n        const heightCropEnd = heightCroppingRatio + heightCropStart;\n        this.cropBox = tensor2d(\n            [heightCropStart, widthCropStart, heightCropEnd, widthCropEnd],\n            [1, 4]);\n      } else {\n        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n  }\n\n  summary() {\n    return `webcam`;\n  }\n\n  // Construct a WebcamIterator and start it's video stream.\n  static async create(\n      webcamVideoElement?: HTMLVideoElement, webcamConfig: WebcamConfig = {}) {\n    if (!env().get('IS_BROWSER')) {\n      throw new Error(\n          'tf.data.webcam is only supported in browser environment.');\n    }\n\n    if (!webcamVideoElement) {\n      // If webcam video element is not provided, create a hidden video element\n      // with provided width and height.\n      webcamVideoElement = document.createElement('video');\n      if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n        throw new Error(\n            'Please provide webcam video element, or resizeWidth and ' +\n            'resizeHeight to create a hidden video element.');\n      }\n      webcamVideoElement.width = webcamConfig.resizeWidth;\n      webcamVideoElement.height = webcamConfig.resizeHeight;\n    }\n    const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);\n\n    // Call async function to initialize the video stream.\n    await webcamIterator.start();\n\n    return webcamIterator;\n  }\n\n  // Async function to start video stream.\n  async start(): Promise<void> {\n    if (this.webcamConfig.facingMode) {\n      util.assert(\n          (this.webcamConfig.facingMode === 'user') ||\n              (this.webcamConfig.facingMode === 'environment'),\n          () =>\n              `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` +\n              `Please provide 'user' or 'environment'`);\n    }\n\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: this.webcamConfig.deviceId,\n          facingMode: this.webcamConfig.facingMode ?\n              this.webcamConfig.facingMode :\n              'user',\n          width: this.webcamVideoElement.width,\n          height: this.webcamVideoElement.height\n        }\n      });\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message = `Error thrown while initializing video stream: ${e.message}`;\n      throw e;\n    }\n\n    if (!this.stream) {\n      throw new Error('Could not obtain video from webcam.');\n    }\n\n    // Older browsers may not have srcObject\n    try {\n      this.webcamVideoElement.srcObject = this.stream;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = window.URL.createObjectURL(\n        this.stream as unknown as MediaSource);\n    }\n    // Start the webcam video stream\n    this.webcamVideoElement.play();\n\n    this.isClosed = false;\n\n    return new Promise<void>(resolve => {\n      // Add event listener to make sure the webcam has been fully initialized.\n      this.webcamVideoElement.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n  }\n\n  async next(): Promise<IteratorResult<Tensor3D>> {\n    if (this.isClosed) {\n      return {value: null, done: true};\n    }\n\n    let img;\n    try {\n      img = browser.fromPixels(this.webcamVideoElement);\n    } catch (e) {\n      throw new Error(\n          `Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n    }\n    if (this.resize) {\n      try {\n        return {value: this.cropAndResizeFrame(img), done: false};\n      } catch (e) {\n        throw new Error(`Error thrown cropping the video: ${e.message}`);\n      } finally {\n        img.dispose();\n      }\n    } else {\n      return {value: img, done: false};\n    }\n  }\n\n  private needToResize() {\n    // If resizeWidth and resizeHeight are provided, and different from the\n    // width and height of original HTMLVideoElement, then resizing and cropping\n    // is required.\n    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight &&\n        (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth ||\n         this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Cropping and resizing each frame based on config\n  cropAndResizeFrame(img: Tensor3D): Tensor3D {\n    return tidy(() => {\n      const expandedImage: Tensor4D = expandDims(cast(img, 'float32'), (0));\n      let resizedImage;\n      resizedImage = image.cropAndResize(\n          expandedImage, this.cropBox, this.cropBoxInd, this.cropSize,\n          'bilinear');\n      // Extract image from batch cropping.\n      const shape = resizedImage.shape;\n      return reshape(resizedImage, shape.slice(1) as [number, number, number]);\n    });\n  }\n\n  // Capture one frame from the video stream, and extract the value from\n  // iterator.next() result.\n  async capture(): Promise<Tensor3D> {\n    return (await this.next()).value;\n  }\n\n  // Stop the video stream and pause webcam iterator.\n  stop(): void {\n    const tracks = this.stream.getTracks();\n\n    tracks.forEach(track => track.stop());\n\n    try {\n      this.webcamVideoElement.srcObject = null;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = null;\n    }\n    this.isClosed = true;\n  }\n\n  // Override toArray() function to prevent collecting.\n  override toArray(): Promise<Tensor3D[]> {\n    throw new Error('Can not convert infinite video stream to array.');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}