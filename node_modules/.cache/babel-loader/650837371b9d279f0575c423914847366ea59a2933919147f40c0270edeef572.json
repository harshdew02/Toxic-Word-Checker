{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nvar nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV5(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var boxes = inputs.boxes,\n    scores = inputs.scores;\n  var maxOutputSize = attrs.maxOutputSize,\n    iouThreshold = attrs.iouThreshold,\n    scoreThreshold = attrs.scoreThreshold,\n    softNmsSigma = attrs.softNmsSigma;\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n  var boxesVals = backend.data.get(boxes.dataId).values;\n  var scoresVals = backend.data.get(scores.dataId).values;\n  var maxOutputSizeVal = maxOutputSize;\n  var iouThresholdVal = iouThreshold;\n  var scoreThresholdVal = scoreThreshold;\n  var softNmsSigmaVal = softNmsSigma;\n  var _nonMaxSuppressionV5I = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal),\n    selectedIndices = _nonMaxSuppressionV5I.selectedIndices,\n    selectedScores = _nonMaxSuppressionV5I.selectedScores;\n  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];\n}\nexport var nonMaxSuppressionV5Config = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAA4BC,mBAAmB,QAAoF,uBAAuB;AAE9K,IAAMC,uBAAuB,GAAGF,YAAY,CAACE,uBAAuB;AAEpE,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,mBAAmB,CAACC,IAInC;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,KAAK,GAAYH,MAAM,CAAvBG,KAAK;IAAEC,MAAM,GAAIJ,MAAM,CAAhBI,MAAM;EACpB,IAAOC,aAAa,GAAgDH,KAAK,CAAlEG,aAAa;IAAEC,YAAY,GAAkCJ,KAAK,CAAnDI,YAAY;IAAEC,cAAc,GAAkBL,KAAK,CAArCK,cAAc;IAAEC,YAAY,GAAIN,KAAK,CAArBM,YAAY;EAEhEX,gBAAgB,CAACM,KAAK,EAAE,4BAA4B,CAAC;EAErD,IAAMM,SAAS,GAAGR,OAAO,CAACS,IAAI,CAACC,GAAG,CAACR,KAAK,CAACS,MAAM,CAAC,CAACC,MAAoB;EACrE,IAAMC,UAAU,GAAGb,OAAO,CAACS,IAAI,CAACC,GAAG,CAACP,MAAM,CAACQ,MAAM,CAAC,CAACC,MAAoB;EAEvE,IAAME,gBAAgB,GAAGV,aAAa;EACtC,IAAMW,eAAe,GAAGV,YAAY;EACpC,IAAMW,iBAAiB,GAAGV,cAAc;EACxC,IAAMW,eAAe,GAAGV,YAAY;EAEpC,4BAA0CZ,uBAAuB,CAC7Da,SAAS,EAAEK,UAAU,EAAEC,gBAAgB,EAAEC,eAAe,EACxDC,iBAAiB,EAAEC,eAAe,CAAC;IAFhCC,eAAe,yBAAfA,eAAe;IAAEC,cAAc,yBAAdA,cAAc;EAItC,OAAO,CACLnB,OAAO,CAACoB,cAAc,CAClB,CAACF,eAAe,CAACG,MAAM,CAAC,EAAE,OAAO,EAAE,IAAIC,UAAU,CAACJ,eAAe,CAAC,CAAC,EACvElB,OAAO,CAACoB,cAAc,CAClB,CAACD,cAAc,CAACE,MAAM,CAAC,EAAE,SAAS,EAAE,IAAIE,YAAY,CAACJ,cAAc,CAAC,CAAC,CAC1E;AACH;AAEA,OAAO,IAAMK,yBAAyB,GAAiB;EACrDC,UAAU,EAAE/B,mBAAmB;EAC/BgC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE9B;CACb","names":["kernel_impls","NonMaxSuppressionV5","nonMaxSuppressionV5Impl","assertNotComplex","nonMaxSuppressionV5","args","inputs","backend","attrs","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","boxesVals","data","get","dataId","values","scoresVals","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedIndices","selectedScores","makeTensorInfo","length","Int32Array","Float32Array","nonMaxSuppressionV5Config","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\NonMaxSuppressionV5.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}