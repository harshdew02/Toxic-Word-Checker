{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport var FileDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(FileDataSource, _DataSource);\n  var _super = _createSuper(FileDataSource);\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  function FileDataSource(input) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, FileDataSource);\n    _this = _super.call(this);\n    _this.input = input;\n    _this.options = options;\n    return _this;\n  }\n  _createClass(FileDataSource, [{\n    key: \"iterator\",\n    value: function () {\n      var _iterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var fs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (isLocalPath(this.input) && env().get('IS_NODE')) {\n                // tslint:disable-next-line:no-require-imports\n                fs = require('fs');\n                this.input = fs.readFileSync(this.input.slice(7));\n              }\n              // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n              // with file in browser.\n              return _context.abrupt(\"return\", new FileChunkIterator(this.input, this.options));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function iterator() {\n        return _iterator.apply(this, arguments);\n      }\n      return iterator;\n    }()\n  }]);\n  return FileDataSource;\n}(DataSource);","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,GAAG,QAAO,uBAAuB;AACzC,SAAQC,UAAU,QAAO,eAAe;AAExC,SAAQC,iBAAiB,QAAiC,kCAAkC;AAE5F,SAAQC,WAAW,QAAO,qBAAqB;AAE/C;;;;AAIA,WAAaC,cAAe;EAAA;EAAA;EAC1B;;;;;;;;EAQA,wBACcC,KAAyB,EACsB;IAAA;IAAA,IAAtCC,8EAAoC,EAAE;IAAA;IAC3D;IAFY,WAAK,GAALD,KAAK;IACI,aAAO,GAAPC,OAAO;IAA+B;EAE7D;EAAC;IAAA;IAAA;MAAA,2EAED;QAAA;QAAA;UAAA;YAAA;cACE,IAAIH,WAAW,CAAC,IAAI,CAACE,KAAK,CAAC,IAAIL,GAAG,EAAE,CAACO,GAAG,CAAC,SAAS,CAAC,EAAE;gBACnD;gBACMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;gBACxB,IAAI,CAACJ,KAAK,GAAGG,EAAE,CAACE,YAAY,CAAE,IAAI,CAACL,KAAgB,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;;cAE/D;cACA;cAAA,iCACO,IAAIT,iBAAiB,CAAC,IAAI,CAACG,KAAoB,EAAE,IAAI,CAACC,OAAO,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACtE;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAxBiCL,UAAU","names":["env","DataSource","FileChunkIterator","isLocalPath","FileDataSource","input","options","get","fs","require","readFileSync","slice"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-data\\src\\sources\\file_data_source.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {DataSource} from '../datasource';\nimport {ByteChunkIterator} from '../iterators/byte_chunk_iterator';\nimport {FileChunkIterator, FileChunkIteratorOptions} from '../iterators/file_chunk_iterator';\nimport {FileElement} from '../types';\nimport {isLocalPath} from '../util/source_util';\n\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(\n      protected input: FileElement|string,\n      protected readonly options: FileChunkIteratorOptions = {}) {\n    super();\n  }\n\n  async iterator(): Promise<ByteChunkIterator> {\n    if (isLocalPath(this.input) && env().get('IS_NODE')) {\n      // tslint:disable-next-line:no-require-imports\n      const fs = require('fs');\n      this.input = fs.readFileSync((this.input as string).slice(7));\n    }\n    // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n    // with file in browser.\n    return new FileChunkIterator(this.input as FileElement, this.options);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}