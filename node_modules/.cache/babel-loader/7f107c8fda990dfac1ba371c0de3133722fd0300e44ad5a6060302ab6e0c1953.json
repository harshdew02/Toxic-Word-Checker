{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport var unsortedSegmentSumGradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: function gradFunc(dy, saved) {\n    var _saved = _slicedToArray(saved, 1),\n      segmentIds = _saved[0];\n    var derX = function derX() {\n      return gatherDropNegatives(dy, segmentIds);\n    };\n    return {\n      x: derX\n    };\n  }\n};\nfunction gatherDropNegatives(x, indices) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  var zeroClippedIndices = maximum(indices, zerosLike(indices));\n  var gathered = gather(x, zeroClippedIndices);\n  var isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  var numIters = gathered.rank - isPositive.rank;\n  for (var i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  var zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,iBAAiB;AAElD,SAAQC,UAAU,QAAO,oBAAoB;AAC7C,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,YAAY,QAAO,sBAAsB;AACjD,SAAQC,UAAU,QAAO,oBAAoB;AAC7C,SAAQC,OAAO,QAAO,gBAAgB;AACtC,SAAQC,IAAI,QAAO,aAAa;AAChC,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,KAAK,QAAO,cAAc;AAClC,SAAQC,SAAS,QAAO,mBAAmB;AAG3C,OAAO,IAAMC,4BAA4B,GAAe;EACtDC,UAAU,EAAEX,kBAAkB;EAC9BY,YAAY,EAAE,CAAC,YAAY,CAAC;EAC5BC,QAAQ,EAAE,kBAACC,EAAU,EAAEC,KAAe,EAAI;IACxC,4BAAqBA,KAAK;MAAnBC,UAAU;IAEjB,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAQ;MAChB,OAAOC,mBAAmB,CAACJ,EAAE,EAAEE,UAAsB,CAAC;IACxD,CAAC;IACD,OAAO;MAACG,CAAC,EAAEF;IAAI,CAAC;EAClB;CACD;AAED,SAASC,mBAAmB,CAAmBC,CAAI,EAAEC,OAAiB;EACpE;EACA;EACA;EACA,IAAMC,kBAAkB,GAAGhB,OAAO,CAACe,OAAO,EAAEX,SAAS,CAACW,OAAO,CAAC,CAAC;EAC/D,IAAME,QAAQ,GAAGpB,MAAM,CAACiB,CAAC,EAAEE,kBAA8B,CAAC;EAC1D,IAAIE,UAAU,GAAGpB,YAAY,CAACiB,OAAO,EAAEb,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;EAC1D,IAAMiB,QAAQ,GAAGF,QAAQ,CAACG,IAAI,GAAGF,UAAU,CAACE,IAAI;EAChD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAE,EAAEE,CAAC,EAAE;IACjCH,UAAU,GAAGtB,UAAU,CAACsB,UAAU,EAAEG,CAAC,GAAG,CAAC,CAAC;;EAE5CH,UAAU,GAAGnB,UAAU,CAACmB,UAAU,EAAEjB,IAAI,CAACgB,QAAQ,CAACK,KAAK,EAAE,MAAM,CAAC,CAAC;EACjE,IAAMC,SAAS,GAAGnB,SAAS,CAACa,QAAQ,CAAC;EACrC,OAAOd,KAAK,CAACe,UAAU,EAAED,QAAQ,EAAEM,SAAS,CAAC;AAC/C","names":["UnsortedSegmentSum","expandDims","gather","greaterEqual","logicalAnd","maximum","ones","scalar","where","zerosLike","unsortedSegmentSumGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","segmentIds","derX","gatherDropNegatives","x","indices","zeroClippedIndices","gathered","isPositive","numIters","rank","i","shape","zeroSlice"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\gradients\\UnsortedSegmentSum_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {UnsortedSegmentSum} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {expandDims} from '../ops/expand_dims';\nimport {gather} from '../ops/gather';\nimport {greaterEqual} from '../ops/greater_equal';\nimport {logicalAnd} from '../ops/logical_and';\nimport {maximum} from '../ops/maximum';\nimport {ones} from '../ops/ones';\nimport {scalar} from '../ops/scalar';\nimport {where} from '../ops/where';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor, Tensor1D} from '../tensor';\n\nexport const unsortedSegmentSumGradConfig: GradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [segmentIds] = saved;\n\n    const derX = () => {\n      return gatherDropNegatives(dy, segmentIds as Tensor1D);\n    };\n    return {x: derX};\n  }\n};\n\nfunction gatherDropNegatives<T extends Tensor>(x: T, indices: Tensor1D) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices as Tensor1D);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}