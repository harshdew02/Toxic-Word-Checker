{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport function max(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var reductionIndices = attrs.reductionIndices,\n    keepDims = attrs.keepDims;\n  var cpuBackend = backend;\n  var xShape = x.shape;\n  var xRank = xShape.length;\n  var origAxes = util.parseAxisParam(reductionIndices, xShape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var xVals = cpuBackend.data.get(x.dataId).values;\n  if (permutedAxes != null) {\n    var newShape = new Array(xRank);\n    for (var i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xShape = newShape;\n  }\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(xShape, axes),\n    _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n    maxOutShape = _backend_util$compute2[0],\n    reduceShape = _backend_util$compute2[1];\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  var dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n  var outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    var _newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = _newShape;\n  }\n  return {\n    dataId: dataId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport var maxConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAoBA,GAAG,QAAwC,uBAAuB;AACtF,SAAQC,YAAY,QAAqB,uBAAuB;AAChE,SAAoBC,IAAI,QAAO,uBAAuB;AAGtD,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,SAAQC,OAAO,QAAO,YAAY;AAClC,SAAQC,aAAa,QAAO,kBAAkB;AAE9C,OAAM,SAAUC,GAAG,CACfC,IAAmE;EAErE,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,CAAC,GAAIH,MAAM,CAAXG,CAAC;EACR,IAAOC,gBAAgB,GAAcF,KAAK,CAAnCE,gBAAgB;IAAEC,QAAQ,GAAIH,KAAK,CAAjBG,QAAQ;EACjC,IAAMC,UAAU,GAAGL,OAAO;EAC1B,IAAIM,MAAM,GAAGJ,CAAC,CAACK,KAAK;EACpB,IAAMC,KAAK,GAAGF,MAAM,CAACG,MAAM;EAE3B,IAAMC,QAAQ,GAAGjB,IAAI,CAACkB,cAAc,CAACR,gBAAgB,EAAEG,MAAM,CAAC;EAC9D,IAAIM,IAAI,GAAGF,QAAQ;EACnB,IAAMG,YAAY,GAAGrB,YAAY,CAACsB,kBAAkB,CAACF,IAAI,EAAEJ,KAAK,CAAC;EACjE,IAAIO,KAAK,GAAGV,UAAU,CAACW,IAAI,CAACC,GAAG,CAACf,CAAC,CAACgB,MAAM,CAAC,CAACC,MAAoB;EAC9D,IAAIN,YAAY,IAAI,IAAI,EAAE;IACxB,IAAMO,QAAQ,GAAa,IAAIC,KAAK,CAACb,KAAK,CAAC;IAC3C,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACX,MAAM,EAAEa,CAAC,EAAE,EAAE;MACxCF,QAAQ,CAACE,CAAC,CAAC,GAAGhB,MAAM,CAACO,YAAY,CAACS,CAAC,CAAC,CAAC;;IAGvCP,KAAK,GAAGnB,aAAa,CAACmB,KAAK,EAAET,MAAM,EAAEJ,CAAC,CAACqB,KAAK,EAAEV,YAAY,EAAEO,QAAQ,CAAC;IACrER,IAAI,GAAGpB,YAAY,CAACgC,gBAAgB,CAACZ,IAAI,CAACH,MAAM,EAAED,KAAK,CAAC;IAExDF,MAAM,GAAGc,QAAQ;;EAGnB1B,gBAAgB,CAACQ,CAAC,EAAE,KAAK,CAAC;EAC1BV,YAAY,CAACiC,0BAA0B,CAAC,KAAK,EAAEb,IAAI,EAAEJ,KAAK,CAAC;EAC3D,4BACIhB,YAAY,CAACkC,yBAAyB,CAACpB,MAAM,EAAEM,IAAI,CAAC;IAAA;IADjDe,WAAW;IAAEC,WAAW;EAG/B,IAAMC,UAAU,GAAGpC,IAAI,CAACqC,aAAa,CAACF,WAAW,CAAC;EAElD,IAAMG,MAAM,GAAGpC,OAAO,CAACoB,KAAK,EAAEc,UAAU,EAAEF,WAAW,EAAEzB,CAAC,CAACqB,KAAK,CAAC;EAC/D,IAAML,MAAM,GAAGb,UAAU,CAAC2B,KAAK,CAACD,MAAM,EAAEJ,WAAW,EAAEzB,CAAC,CAACqB,KAAK,CAAC;EAE7D,IAAIU,QAAQ,GAAGN,WAAW;EAC1B,IAAIvB,QAAQ,EAAE;IACZ;IACA,IAAMgB,SAAQ,GAAG5B,YAAY,CAAC0C,oBAAoB,CAACP,WAAW,EAAEjB,QAAQ,CAAC;IACzEuB,QAAQ,GAAGb,SAAQ;;EAGrB,OAAO;IAACF,MAAM,EAANA,MAAM;IAAEX,KAAK,EAAE0B,QAAQ;IAAEV,KAAK,EAAErB,CAAC,CAACqB;EAAK,CAAC;AAClD;AAEA,OAAO,IAAMY,SAAS,GAAiB;EACrCC,UAAU,EAAE7C,GAAG;EACf8C,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEzC;CACb","names":["Max","backend_util","util","assertNotComplex","maxImpl","transposeImpl","max","args","inputs","backend","attrs","x","reductionIndices","keepDims","cpuBackend","xShape","shape","xRank","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","xVals","data","get","dataId","values","newShape","Array","i","dtype","getInnerMostAxes","assertAxesAreInnerMostDims","computeOutAndReduceShapes","maxOutShape","reduceShape","reduceSize","sizeFromShape","result","write","outShape","expandShapeToKeepDim","maxConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Max.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}