{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n  return tidy(function () {\n    return tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true));\n  });\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport var Constraint = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Constraint, _serialization$Serial);\n  var _super = _createSuper(Constraint);\n  function Constraint() {\n    _classCallCheck(this, Constraint);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Constraint, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n  return Constraint;\n}(serialization.Serializable);\nexport var MaxNorm = /*#__PURE__*/function (_Constraint) {\n  _inherits(MaxNorm, _Constraint);\n  var _super2 = _createSuper(MaxNorm);\n  function MaxNorm(args) {\n    var _this;\n    _classCallCheck(this, MaxNorm);\n    _this = _super2.call(this);\n    _this.defaultMaxValue = 2;\n    _this.defaultAxis = 0;\n    _this.maxValue = args.maxValue != null ? args.maxValue : _this.defaultMaxValue;\n    _this.axis = args.axis != null ? args.axis : _this.defaultAxis;\n    return _this;\n  }\n  _createClass(MaxNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this2 = this;\n      return tidy(function () {\n        var norms = calcL2Norms(w, _this2.axis);\n        var desired = tfc.clipByValue(norms, 0, _this2.maxValue);\n        return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        maxValue: this.maxValue,\n        axis: this.axis\n      };\n    }\n  }]);\n  return MaxNorm;\n}(Constraint);\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport var UnitNorm = /*#__PURE__*/function (_Constraint2) {\n  _inherits(UnitNorm, _Constraint2);\n  var _super3 = _createSuper(UnitNorm);\n  function UnitNorm(args) {\n    var _this3;\n    _classCallCheck(this, UnitNorm);\n    _this3 = _super3.call(this);\n    _this3.defaultAxis = 0;\n    _this3.axis = args.axis != null ? args.axis : _this3.defaultAxis;\n    return _this3;\n  }\n  _createClass(UnitNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this4 = this;\n      return tidy(function () {\n        return tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, _this4.axis)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        axis: this.axis\n      };\n    }\n  }]);\n  return UnitNorm;\n}(Constraint);\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport var NonNeg = /*#__PURE__*/function (_Constraint3) {\n  _inherits(NonNeg, _Constraint3);\n  var _super4 = _createSuper(NonNeg);\n  function NonNeg() {\n    _classCallCheck(this, NonNeg);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(NonNeg, [{\n    key: \"apply\",\n    value: function apply(w) {\n      return tfc.relu(w);\n    }\n  }]);\n  return NonNeg;\n}(Constraint);\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport var MinMaxNorm = /*#__PURE__*/function (_Constraint4) {\n  _inherits(MinMaxNorm, _Constraint4);\n  var _super5 = _createSuper(MinMaxNorm);\n  function MinMaxNorm(args) {\n    var _this5;\n    _classCallCheck(this, MinMaxNorm);\n    _this5 = _super5.call(this);\n    _this5.defaultMinValue = 0.0;\n    _this5.defaultMaxValue = 1.0;\n    _this5.defaultRate = 1.0;\n    _this5.defaultAxis = 0;\n    _this5.minValue = args.minValue != null ? args.minValue : _this5.defaultMinValue;\n    _this5.maxValue = args.maxValue != null ? args.maxValue : _this5.defaultMaxValue;\n    _this5.rate = args.rate != null ? args.rate : _this5.defaultRate;\n    _this5.axis = args.axis != null ? args.axis : _this5.defaultAxis;\n    return _this5;\n  }\n  _createClass(MinMaxNorm, [{\n    key: \"apply\",\n    value: function apply(w) {\n      var _this6 = this;\n      return tidy(function () {\n        var norms = calcL2Norms(w, _this6.axis);\n        var desired = tfc.add(tfc.mul(_this6.rate, tfc.clipByValue(norms, _this6.minValue, _this6.maxValue)), tfc.mul(1.0 - _this6.rate, norms));\n        return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        minValue: this.minValue,\n        maxValue: this.maxValue,\n        rate: this.rate,\n        axis: this.axis\n      };\n    }\n  }]);\n  return MinMaxNorm;\n}(Constraint);\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'maxNorm': 'MaxNorm',\n  'minMaxNorm': 'MinMaxNorm',\n  'nonNeg': 'NonNeg',\n  'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    var className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    var config = {\n      className: className,\n      config: {}\n    };\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","epsilon","deserializeKerasObject","serializeKerasObject","calcL2Norms","w","axis","sqrt","sum","mul","Constraint","Serializable","MaxNorm","args","maxValue","defaultMaxValue","defaultAxis","norms","desired","clipByValue","div","add","registerClass","UnitNorm","NonNeg","relu","MinMaxNorm","minValue","defaultMinValue","rate","defaultRate","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeConstraint","constraint","deserializeConstraint","config","customObjects","SerializationMap","getMap","classNameMap","getConstraint","identifier","className"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\constraints.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport {epsilon} from './backend/common';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class MaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class UnitNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\nexport class NonNeg extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}