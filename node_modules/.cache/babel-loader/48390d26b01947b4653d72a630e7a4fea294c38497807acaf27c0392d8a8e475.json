{"ast":null,"code":"import _defineProperty from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(x, dataFormat) {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(x, dataFormat) {\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(x, kernel, bias) {\n  var strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  var dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  var dilationRate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  return tidy(function () {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\"The input of a conv1dWithBias operation should be 3, but is \" + \"\".concat(x.shape.length, \" instead.\"));\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\"The kernel for a conv1dWithBias operation should be 3, but is \" + \"\".concat(kernel.shape.length, \" instead\"));\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\"The bias for a conv1dWithBias operation should be 1, but is \" + \"\".concat(kernel.shape.length, \" instead\"));\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n    }\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n    var y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(x, kernel) {\n  var strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  var dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  var dilationRate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(x, kernel) {\n  var strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  var dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  var dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(x, kernel, bias) {\n  var strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1];\n  var padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  var dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  var dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  var activation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  return tidy(function () {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\"conv2dWithBiasActivation expects input to be of rank 3 or 4, \" + \"but received \".concat(x.rank, \".\"));\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\"conv2dWithBiasActivation expects kernel to be of rank 3 or 4, \" + \"but received \".concat(x.rank, \".\"));\n    }\n    var y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y,\n      filter: kernel,\n      strides: strides,\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias: bias,\n      activation: activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(x, kernel) {\n  var strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1, 1];\n  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  var dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  var dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(function () {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(x, kernel, bias) {\n  var strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];\n  var padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  var dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  var dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  return tidy(function () {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\"conv3dWithBias expects input to be of rank 4 or 5, but received \" + \"\".concat(x.rank, \".\"));\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\"conv3dWithBias expects kernel to be of rank 4 or 5, but received \" + \"\".concat(x.rank, \".\"));\n    }\n    var y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');\n    }\n    y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n/**\n * Abstract convolution layer.\n */\nexport var BaseConv = /*#__PURE__*/function (_Layer) {\n  _inherits(BaseConv, _Layer);\n  var _super = _createSuper(BaseConv);\n  function BaseConv(rank, args) {\n    var _this;\n    _classCallCheck(this, BaseConv);\n    _this = _super.call(this, args);\n    _this.bias = null;\n    _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    BaseConv.verifyArgs(args);\n    _this.rank = rank;\n    generic_utils.assertPositiveInteger(_this.rank, 'rank');\n    if (_this.rank !== 1 && _this.rank !== 2 && _this.rank !== 3) {\n      throw new NotImplementedError(\"Convolution layer for rank other than 1, 2, or 3 (\".concat(_this.rank, \") is \") + \"not implemented yet.\");\n    }\n    _this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    _this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n    _this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(_this.padding);\n    _this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this.dataFormat);\n    _this.activation = getActivation(args.activation);\n    _this.useBias = args.useBias == null ? true : args.useBias;\n    _this.biasInitializer = getInitializer(args.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n    _this.biasConstraint = getConstraint(args.biasConstraint);\n    _this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    _this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    _this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n    if (_this.rank === 1 && Array.isArray(_this.dilationRate) && _this.dilationRate.length !== 1) {\n      throw new ValueError(\"dilationRate must be a number or an array of a single number \" + \"for 1D convolution, but received \" + \"\".concat(JSON.stringify(_this.dilationRate)));\n    } else if (_this.rank === 2) {\n      if (typeof _this.dilationRate === 'number') {\n        _this.dilationRate = [_this.dilationRate, _this.dilationRate];\n      } else if (_this.dilationRate.length !== 2) {\n        throw new ValueError(\"dilationRate must be a number or array of two numbers for 2D \" + \"convolution, but received \".concat(JSON.stringify(_this.dilationRate)));\n      }\n    } else if (_this.rank === 3) {\n      if (typeof _this.dilationRate === 'number') {\n        _this.dilationRate = [_this.dilationRate, _this.dilationRate, _this.dilationRate];\n      } else if (_this.dilationRate.length !== 3) {\n        throw new ValueError(\"dilationRate must be a number or array of three numbers for 3D \" + \"convolution, but received \".concat(JSON.stringify(_this.dilationRate)));\n      }\n    }\n    return _this;\n  }\n  _createClass(BaseConv, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        kernelSize: this.kernelSize,\n        strides: this.strides,\n        padding: this.padding,\n        dataFormat: this.dataFormat,\n        dilationRate: this.dilationRate,\n        activation: serializeActivation(this.activation),\n        useBias: this.useBias,\n        biasInitializer: serializeInitializer(this.biasInitializer),\n        biasRegularizer: serializeRegularizer(this.biasRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        biasConstraint: serializeConstraint(this.biasConstraint)\n      };\n      var baseConfig = _get(_getPrototypeOf(BaseConv.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // Check config.kernelSize type and shape.\n      generic_utils.assert('kernelSize' in args, \"required key 'kernelSize' not in config\");\n      if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n        throw new ValueError(\"BaseConv expects config.kernelSize to be number or number[] with \" + \"length 1, 2, or 3, but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n      }\n    }\n  }]);\n  return BaseConv;\n}(Layer);\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport var Conv = /*#__PURE__*/function (_BaseConv) {\n  _inherits(Conv, _BaseConv);\n  var _super2 = _createSuper(Conv);\n  function Conv(rank, args) {\n    var _this2;\n    _classCallCheck(this, Conv);\n    _this2 = _super2.call(this, rank, args);\n    _this2.kernel = null;\n    Conv.verifyArgs(args);\n    _this2.filters = args.filters;\n    generic_utils.assertPositiveInteger(_this2.filters, 'filters');\n    _this2.kernelInitializer = getInitializer(args.kernelInitializer || _this2.DEFAULT_KERNEL_INITIALIZER);\n    _this2.kernelConstraint = getConstraint(args.kernelConstraint);\n    _this2.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    return _this2;\n  }\n  _createClass(Conv, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n      if (inputShape[channelAxis] == null) {\n        throw new ValueError(\"The channel dimension of the input should be defined. \" + \"Found \".concat(inputShape[channelAxis]));\n      }\n      var inputDim = inputShape[channelAxis];\n      var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n      this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      }\n      this.inputSpec = [{\n        ndim: this.rank + 2,\n        axes: _defineProperty({}, channelAxis, inputDim)\n      }];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this3 = this;\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        var outputs;\n        var biasValue = _this3.bias == null ? null : _this3.bias.read();\n        var fusedActivationName = generic_utils.mapActivationToFusedKernel(_this3.activation.getClassName());\n        if (fusedActivationName != null && _this3.rank === 2) {\n          outputs = conv2dWithBiasActivation(inputs, _this3.kernel.read(), biasValue, _this3.strides, _this3.padding, _this3.dataFormat, _this3.dilationRate, fusedActivationName);\n        } else {\n          if (_this3.rank === 1) {\n            outputs = conv1dWithBias(inputs, _this3.kernel.read(), biasValue, _this3.strides[0], _this3.padding, _this3.dataFormat, _this3.dilationRate[0]);\n          } else if (_this3.rank === 2) {\n            // TODO(cais): Move up to constructor.\n            outputs = conv2dWithBiasActivation(inputs, _this3.kernel.read(), biasValue, _this3.strides, _this3.padding, _this3.dataFormat, _this3.dilationRate);\n          } else if (_this3.rank === 3) {\n            outputs = conv3dWithBias(inputs, _this3.kernel.read(), biasValue, _this3.strides, _this3.padding, _this3.dataFormat, _this3.dilationRate);\n          } else {\n            throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n          }\n          if (_this3.activation != null) {\n            outputs = _this3.activation.apply(outputs);\n          }\n        }\n        return outputs;\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var newSpace = [];\n      var space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n      for (var i = 0; i < space.length; ++i) {\n        var newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n        newSpace.push(newDim);\n      }\n      var outputShape = [inputShape[0]];\n      if (this.dataFormat === 'channelsLast') {\n        outputShape = outputShape.concat(newSpace);\n        outputShape.push(this.filters);\n      } else {\n        outputShape.push(this.filters);\n        outputShape = outputShape.concat(newSpace);\n      }\n      return outputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        filters: this.filters,\n        kernelInitializer: serializeInitializer(this.kernelInitializer),\n        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n        kernelConstraint: serializeConstraint(this.kernelConstraint)\n      };\n      var baseConfig = _get(_getPrototypeOf(Conv.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // Check config.filters type, shape, and value.\n      if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {\n        throw new ValueError(\"Convolution layer expected config.filters to be a 'number' > 0 \" + \"but got \".concat(JSON.stringify(args.filters)));\n      }\n    }\n  }]);\n  return Conv;\n}(BaseConv);\nexport var Conv2D = /*#__PURE__*/function (_Conv) {\n  _inherits(Conv2D, _Conv);\n  var _super3 = _createSuper(Conv2D);\n  function Conv2D(args) {\n    var _this4;\n    _classCallCheck(this, Conv2D);\n    _this4 = _super3.call(this, 2, args);\n    Conv2D.verifyArgs(args);\n    return _this4;\n  }\n  _createClass(Conv2D, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv2D.prototype), \"getConfig\", this).call(this);\n      delete config['rank'];\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // config.kernelSize must be a number or array of numbers.\n      if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n        throw new ValueError(\"Conv2D expects config.kernelSize to be number or number[] with \" + \"length 1 or 2, but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n      }\n    }\n  }]);\n  return Conv2D;\n}(Conv);\n/** @nocollapse */\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport var Conv3D = /*#__PURE__*/function (_Conv2) {\n  _inherits(Conv3D, _Conv2);\n  var _super4 = _createSuper(Conv3D);\n  function Conv3D(args) {\n    var _this5;\n    _classCallCheck(this, Conv3D);\n    _this5 = _super4.call(this, 3, args);\n    Conv3D.verifyArgs(args);\n    return _this5;\n  }\n  _createClass(Conv3D, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv3D.prototype), \"getConfig\", this).call(this);\n      delete config['rank'];\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // config.kernelSize must be a number or array of numbers.\n      if (typeof args.kernelSize !== 'number') {\n        if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n          throw new ValueError(\"Conv3D expects config.kernelSize to be number or\" + \" [number, number, number], but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n        }\n      }\n    }\n  }]);\n  return Conv3D;\n}(Conv);\n/** @nocollapse */\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport var Conv2DTranspose = /*#__PURE__*/function (_Conv2D) {\n  _inherits(Conv2DTranspose, _Conv2D);\n  var _super5 = _createSuper(Conv2DTranspose);\n  function Conv2DTranspose(args) {\n    var _this6;\n    _classCallCheck(this, Conv2DTranspose);\n    _this6 = _super5.call(this, args);\n    _this6.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n    if (_this6.padding !== 'same' && _this6.padding !== 'valid') {\n      throw new ValueError(\"Conv2DTranspose currently supports only padding modes 'same' \" + \"and 'valid', but received padding mode \".concat(_this6.padding));\n    }\n    return _this6;\n  }\n  _createClass(Conv2DTranspose, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      if (inputShape.length !== 4) {\n        throw new ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));\n      }\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n      if (inputShape[channelAxis] == null) {\n        throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n      }\n      var inputDim = inputShape[channelAxis];\n      var kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n      this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      }\n      // Set input spec.\n      this.inputSpec = [new InputSpec({\n        ndim: 4,\n        axes: _defineProperty({}, channelAxis, inputDim)\n      })];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this7 = this;\n      return tfc.tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        if (input.shape.length !== 4) {\n          throw new ValueError(\"Conv2DTranspose.call() expects input tensor to be rank-4, but \" + \"received a tensor of rank-\".concat(input.shape.length));\n        }\n        var inputShape = input.shape;\n        var batchSize = inputShape[0];\n        var hAxis;\n        var wAxis;\n        if (_this7.dataFormat === 'channelsFirst') {\n          hAxis = 2;\n          wAxis = 3;\n        } else {\n          hAxis = 1;\n          wAxis = 2;\n        }\n        var height = inputShape[hAxis];\n        var width = inputShape[wAxis];\n        var kernelH = _this7.kernelSize[0];\n        var kernelW = _this7.kernelSize[1];\n        var strideH = _this7.strides[0];\n        var strideW = _this7.strides[1];\n        // Infer the dynamic output shape.\n        var outHeight = deconvLength(height, strideH, kernelH, _this7.padding);\n        var outWidth = deconvLength(width, strideW, kernelW, _this7.padding);\n        // Porting Note: We don't branch based on `this.dataFormat` here,\n        // because\n        //   the tjfs-core function `conv2dTranspose` called below always\n        //   assumes channelsLast.\n        var outputShape = [batchSize, outHeight, outWidth, _this7.filters];\n        if (_this7.dataFormat !== 'channelsLast') {\n          input = tfc.transpose(input, [0, 2, 3, 1]);\n        }\n        var outputs = tfc.conv2dTranspose(input, _this7.kernel.read(), outputShape, _this7.strides, _this7.padding);\n        if (_this7.dataFormat !== 'channelsLast') {\n          outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n        }\n        if (_this7.bias != null) {\n          outputs = K.biasAdd(outputs, _this7.bias.read(), _this7.dataFormat);\n        }\n        if (_this7.activation != null) {\n          outputs = _this7.activation.apply(outputs);\n        }\n        return outputs;\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var outputShape = inputShape.slice();\n      var channelAxis;\n      var heightAxis;\n      var widthAxis;\n      if (this.dataFormat === 'channelsFirst') {\n        channelAxis = 1;\n        heightAxis = 2;\n        widthAxis = 3;\n      } else {\n        channelAxis = 3;\n        heightAxis = 1;\n        widthAxis = 2;\n      }\n      var kernelH = this.kernelSize[0];\n      var kernelW = this.kernelSize[1];\n      var strideH = this.strides[0];\n      var strideW = this.strides[1];\n      outputShape[channelAxis] = this.filters;\n      outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n      outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n      return outputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv2DTranspose.prototype), \"getConfig\", this).call(this);\n      delete config['dilationRate'];\n      return config;\n    }\n  }]);\n  return Conv2DTranspose;\n}(Conv2D);\n/** @nocollapse */\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport var Conv3DTranspose = /*#__PURE__*/function (_Conv3D) {\n  _inherits(Conv3DTranspose, _Conv3D);\n  var _super6 = _createSuper(Conv3DTranspose);\n  function Conv3DTranspose(args) {\n    var _this8;\n    _classCallCheck(this, Conv3DTranspose);\n    _this8 = _super6.call(this, args);\n    _this8.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n    if (_this8.padding !== 'same' && _this8.padding !== 'valid') {\n      throw new ValueError(\"Conv3DTranspose currently supports only padding modes 'same' \" + \"and 'valid', but received padding mode \".concat(_this8.padding));\n    }\n    return _this8;\n  }\n  _createClass(Conv3DTranspose, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      if (inputShape.length !== 5) {\n        throw new ValueError('Input should have rank 5; Received input shape: ' + JSON.stringify(inputShape));\n      }\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n      if (inputShape[channelAxis] == null) {\n        throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n      }\n      var inputDim = inputShape[channelAxis];\n      var kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n      this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      }\n      // Set input spec.\n      this.inputSpec = [new InputSpec({\n        ndim: 5,\n        axes: _defineProperty({}, channelAxis, inputDim)\n      })];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this9 = this;\n      return tfc.tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        if (input.shape.length !== 5) {\n          throw new ValueError(\"Conv3DTranspose.call() expects input tensor to be rank-4, but \" + \"received a tensor of rank-\".concat(input.shape.length));\n        }\n        var inputShape = input.shape;\n        var batchSize = inputShape[0];\n        var hAxis;\n        var wAxis;\n        var dAxis;\n        if (_this9.dataFormat === 'channelsFirst') {\n          dAxis = 2;\n          hAxis = 3;\n          wAxis = 4;\n        } else {\n          dAxis = 1;\n          hAxis = 2;\n          wAxis = 3;\n        }\n        var depth = inputShape[dAxis];\n        var height = inputShape[hAxis];\n        var width = inputShape[wAxis];\n        var kernelD = _this9.kernelSize[0];\n        var kernelH = _this9.kernelSize[1];\n        var kernelW = _this9.kernelSize[2];\n        var strideD = _this9.strides[0];\n        var strideH = _this9.strides[1];\n        var strideW = _this9.strides[2];\n        // Infer the dynamic output shape.\n        var outDepth = deconvLength(depth, strideD, kernelD, _this9.padding);\n        var outHeight = deconvLength(height, strideH, kernelH, _this9.padding);\n        var outWidth = deconvLength(width, strideW, kernelW, _this9.padding);\n        // Same as `conv2dTranspose`. We always assumes channelsLast.\n        var outputShape = [batchSize, outDepth, outHeight, outWidth, _this9.filters];\n        if (_this9.dataFormat !== 'channelsLast') {\n          input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n        }\n        var outputs = tfc.conv3dTranspose(input, _this9.kernel.read(), outputShape, _this9.strides, _this9.padding);\n        if (_this9.dataFormat !== 'channelsLast') {\n          outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n        }\n        if (_this9.bias !== null) {\n          outputs = K.biasAdd(outputs, _this9.bias.read(), _this9.dataFormat);\n        }\n        if (_this9.activation !== null) {\n          outputs = _this9.activation.apply(outputs);\n        }\n        return outputs;\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var outputShape = inputShape.slice();\n      var channelAxis;\n      var depthAxis;\n      var heightAxis;\n      var widthAxis;\n      if (this.dataFormat === 'channelsFirst') {\n        channelAxis = 1;\n        depthAxis = 2;\n        heightAxis = 3;\n        widthAxis = 4;\n      } else {\n        channelAxis = 4;\n        depthAxis = 1;\n        heightAxis = 2;\n        widthAxis = 3;\n      }\n      var kernelD = this.kernelSize[0];\n      var kernelH = this.kernelSize[1];\n      var kernelW = this.kernelSize[2];\n      var strideD = this.strides[0];\n      var strideH = this.strides[1];\n      var strideW = this.strides[2];\n      outputShape[channelAxis] = this.filters;\n      outputShape[depthAxis] = deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n      outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n      outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n      return outputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv3DTranspose.prototype), \"getConfig\", this).call(this);\n      delete config['dilationRate'];\n      return config;\n    }\n  }]);\n  return Conv3DTranspose;\n}(Conv3D);\n/** @nocollapse */\nConv3DTranspose.className = 'Conv3DTranspose';\nserialization.registerClass(Conv3DTranspose);\nexport var SeparableConv = /*#__PURE__*/function (_Conv3) {\n  _inherits(SeparableConv, _Conv3);\n  var _super7 = _createSuper(SeparableConv);\n  function SeparableConv(rank, config) {\n    var _this10;\n    _classCallCheck(this, SeparableConv);\n    _this10 = _super7.call(this, rank, config);\n    _this10.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n    _this10.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n    _this10.depthwiseKernel = null;\n    _this10.pointwiseKernel = null;\n    if (config.filters == null) {\n      throw new ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {\n      throw new ValueError(\"SeparableConv\".concat(_this10.rank, \"D supports only padding modes: \") + \"'same' and 'valid', but received \".concat(JSON.stringify(config.padding)));\n    }\n    _this10.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    _this10.depthwiseInitializer = getInitializer(config.depthwiseInitializer || _this10.DEFAULT_DEPTHWISE_INITIALIZER);\n    _this10.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    _this10.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    _this10.pointwiseInitializer = getInitializer(config.depthwiseInitializer || _this10.DEFAULT_POINTWISE_INITIALIZER);\n    _this10.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    _this10.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n    return _this10;\n  }\n  _createClass(SeparableConv, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      if (inputShape.length < this.rank + 2) {\n        throw new ValueError(\"Inputs to SeparableConv\".concat(this.rank, \"D should have rank \") + \"\".concat(this.rank + 2, \", but received input shape: \") + \"\".concat(JSON.stringify(inputShape)));\n      }\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n      if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n        throw new ValueError(\"The channel dimension of the inputs should be defined, \" + \"but found \".concat(JSON.stringify(inputShape[channelAxis])));\n      }\n      var inputDim = inputShape[channelAxis];\n      var depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n      var pointwiseKernelShape = [];\n      for (var i = 0; i < this.rank; ++i) {\n        pointwiseKernelShape.push(1);\n      }\n      pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n      var trainable = true;\n      this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n      this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n      } else {\n        this.bias = null;\n      }\n      this.inputSpec = [new InputSpec({\n        ndim: this.rank + 2,\n        axes: _defineProperty({}, channelAxis, inputDim)\n      })];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this11 = this;\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        var output;\n        if (_this11.rank === 1) {\n          throw new NotImplementedError('1D separable convolution is not implemented yet.');\n        } else if (_this11.rank === 2) {\n          if (_this11.dataFormat === 'channelsFirst') {\n            inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n          }\n\n          output = tfc.separableConv2d(inputs, _this11.depthwiseKernel.read(), _this11.pointwiseKernel.read(), _this11.strides, _this11.padding, _this11.dilationRate, 'NHWC');\n        }\n        if (_this11.useBias) {\n          output = K.biasAdd(output, _this11.bias.read(), _this11.dataFormat);\n        }\n        if (_this11.activation != null) {\n          output = _this11.activation.apply(output);\n        }\n        if (_this11.dataFormat === 'channelsFirst') {\n          output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n\n        return output;\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(SeparableConv.prototype), \"getConfig\", this).call(this);\n      delete config['rank'];\n      delete config['kernelInitializer'];\n      delete config['kernelRegularizer'];\n      delete config['kernelConstraint'];\n      config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n      config['pointwiseInitializer'] = serializeInitializer(this.pointwiseInitializer);\n      config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n      config['pointwiseRegularizer'] = serializeRegularizer(this.pointwiseRegularizer);\n      config['depthwiseConstraint'] = serializeConstraint(this.depthwiseConstraint);\n      config['pointwiseConstraint'] = serializeConstraint(this.pointwiseConstraint);\n      return config;\n    }\n  }]);\n  return SeparableConv;\n}(Conv);\n/** @nocollapse */\nSeparableConv.className = 'SeparableConv';\nexport var SeparableConv2D = /*#__PURE__*/function (_SeparableConv) {\n  _inherits(SeparableConv2D, _SeparableConv);\n  var _super8 = _createSuper(SeparableConv2D);\n  function SeparableConv2D(args) {\n    _classCallCheck(this, SeparableConv2D);\n    return _super8.call(this, 2, args);\n  }\n  return _createClass(SeparableConv2D);\n}(SeparableConv);\n/** @nocollapse */\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport var Conv1D = /*#__PURE__*/function (_Conv4) {\n  _inherits(Conv1D, _Conv4);\n  var _super9 = _createSuper(Conv1D);\n  function Conv1D(args) {\n    var _this12;\n    _classCallCheck(this, Conv1D);\n    _this12 = _super9.call(this, 1, args);\n    Conv1D.verifyArgs(args);\n    _this12.inputSpec = [{\n      ndim: 3\n    }];\n    return _this12;\n  }\n  _createClass(Conv1D, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(Conv1D.prototype), \"getConfig\", this).call(this);\n      delete config['rank'];\n      delete config['dataFormat'];\n      return config;\n    }\n  }], [{\n    key: \"verifyArgs\",\n    value: function verifyArgs(args) {\n      // config.kernelSize must be a number or array of numbers.\n      if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n        throw new ValueError(\"Conv1D expects config.kernelSize to be number or number[] with \" + \"length 1, but received \".concat(JSON.stringify(args.kernelSize), \".\"));\n      }\n    }\n  }]);\n  return Conv1D;\n}(Conv);\n/** @nocollapse */\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport var Cropping2D = /*#__PURE__*/function (_Layer2) {\n  _inherits(Cropping2D, _Layer2);\n  var _super10 = _createSuper(Cropping2D);\n  function Cropping2D(args) {\n    var _this13;\n    _classCallCheck(this, Cropping2D);\n    _this13 = _super10.call(this, args);\n    if (typeof args.cropping === 'number') {\n      _this13.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      _this13.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];\n    } else {\n      _this13.cropping = args.cropping;\n    }\n    _this13.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    _this13.inputSpec = [{\n      ndim: 4\n    }];\n    return _this13;\n  }\n  _createClass(Cropping2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      if (this.dataFormat === 'channelsFirst') {\n        return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];\n      } else {\n        return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this14 = this;\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        if (_this14.dataFormat === 'channelsLast') {\n          var hSliced = K.sliceAlongAxis(inputs, _this14.cropping[0][0], inputs.shape[1] - _this14.cropping[0][0] - _this14.cropping[0][1], 2);\n          return K.sliceAlongAxis(hSliced, _this14.cropping[1][0], inputs.shape[2] - _this14.cropping[1][1] - _this14.cropping[1][0], 3);\n        } else {\n          var _hSliced = K.sliceAlongAxis(inputs, _this14.cropping[0][0], inputs.shape[2] - _this14.cropping[0][0] - _this14.cropping[0][1], 3);\n          return K.sliceAlongAxis(_hSliced, _this14.cropping[1][0], inputs.shape[3] - _this14.cropping[1][1] - _this14.cropping[1][0], 4);\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        cropping: this.cropping,\n        dataFormat: this.dataFormat\n      };\n      var baseConfig = _get(_getPrototypeOf(Cropping2D.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return Cropping2D;\n}(Layer);\n/** @nocollapse */\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport var UpSampling2D = /*#__PURE__*/function (_Layer3) {\n  _inherits(UpSampling2D, _Layer3);\n  var _super11 = _createSuper(UpSampling2D);\n  function UpSampling2D(args) {\n    var _this15;\n    _classCallCheck(this, UpSampling2D);\n    _this15 = _super11.call(this, args);\n    _this15.DEFAULT_SIZE = [2, 2];\n    _this15.inputSpec = [{\n      ndim: 4\n    }];\n    _this15.size = args.size == null ? _this15.DEFAULT_SIZE : args.size;\n    _this15.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(_this15.dataFormat);\n    _this15.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(_this15.interpolation);\n    return _this15;\n  }\n  _createClass(UpSampling2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      if (this.dataFormat === 'channelsFirst') {\n        var height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n        var width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n        return [inputShape[0], inputShape[1], height, width];\n      } else {\n        var _height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n        var _width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n        return [inputShape[0], _height, _width, inputShape[3]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this16 = this;\n      return tfc.tidy(function () {\n        var input = getExactlyOneTensor(inputs);\n        var inputShape = input.shape;\n        if (_this16.dataFormat === 'channelsFirst') {\n          input = tfc.transpose(input, [0, 2, 3, 1]);\n          var height = _this16.size[0] * inputShape[2];\n          var width = _this16.size[1] * inputShape[3];\n          var resized = _this16.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n          return tfc.transpose(resized, [0, 3, 1, 2]);\n        } else {\n          var _height2 = _this16.size[0] * inputShape[1];\n          var _width2 = _this16.size[1] * inputShape[2];\n          return _this16.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [_height2, _width2]) : tfc.image.resizeBilinear(input, [_height2, _width2]);\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        size: this.size,\n        dataFormat: this.dataFormat,\n        interpolation: this.interpolation\n      };\n      var baseConfig = _get(_getPrototypeOf(UpSampling2D.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return UpSampling2D;\n}(Layer);\n/** @nocollapse */\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;AAUA;;;AAIA,OAAO,KAAKA,GAAG,MAAM,uBAAuB;AAC5C,SAAeC,aAAa,EAA4DC,IAAI,QAAO,uBAAuB;AAE1H,SAAoBC,aAAa,EAAEC,mBAAmB,QAAO,gBAAgB;AAC7E,SAAQC,eAAe,QAAO,mBAAmB;AACjD,OAAO,KAAKC,CAAC,MAAM,yBAAyB;AAC5C,SAAQC,eAAe,EAAEC,wBAAwB,EAAEC,gBAAgB,QAAO,WAAW;AACrF,SAA0CC,aAAa,EAAEC,mBAAmB,QAAO,gBAAgB;AACnG,SAAQC,SAAS,EAAEC,KAAK,QAAkB,oBAAoB;AAC9D,SAAQC,mBAAmB,EAAEC,UAAU,QAAO,WAAW;AACzD,SAAQC,cAAc,EAAsCC,oBAAoB,QAAO,iBAAiB;AAGxG,SAAQC,cAAc,EAAsCC,oBAAoB,QAAO,iBAAiB;AAExG,SAAQC,gBAAgB,EAAEC,YAAY,EAAEC,cAAc,QAAO,qBAAqB;AAClF,OAAO,KAAKC,aAAa,MAAM,wBAAwB;AACvD,SAAQC,kBAAkB,EAAEC,mBAAmB,QAAO,sBAAsB;AAG5E;;;;;AAKA,OAAM,SAAUC,qBAAqB,CACjCC,CAAS,EAAEC,UAAsB;EACnC;EACA,OAAO1B,IAAI,CAAC,YAAK;IACfK,eAAe,CAACqB,UAAU,CAAC;IAC3B,IAAIA,UAAU,KAAK,eAAe,EAAE;MAClC,OAAO5B,GAAG,CAAC6B,SAAS,CAACF,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE;KACzC,MAAM;MACL,OAAOA,CAAC;;EAEZ,CAAC,CAAC;AACJ;AAEA;;;;;AAKA,OAAM,SAAUG,qBAAqB,CACjCH,CAAS,EAAEC,UAAsB;EACnC,OAAO1B,IAAI,CAAC,YAAK;IACfK,eAAe,CAACqB,UAAU,CAAC;IAC3B,IAAIA,UAAU,KAAK,eAAe,EAAE;MAClC,OAAO5B,GAAG,CAAC6B,SAAS,CAACF,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE;KAC5C,MAAM;MACL,OAAOA,CAAC;;EAEZ,CAAC,CAAC;AACJ;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUI,cAAc,CAC1BJ,CAAS,EAAEK,MAAc,EAAEC,IAAY,EACE;EAAA,IADAC,OAAO,uEAAG,CAAC;EAAA,IAAEC,OAAO,uEAAG,OAAO;EAAA,IACvEP,UAAuB;EAAA,IAAEQ,YAAY,uEAAG,CAAC;EAC3C,OAAOlC,IAAI,CAAC,YAAK;IACf,IAAI0B,UAAU,IAAI,IAAI,EAAE;MACtBA,UAAU,GAAGvB,eAAe,EAAE;;IAEhCE,eAAe,CAACqB,UAAU,CAAC;IAC3B;IACA,IAAID,CAAC,CAACU,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIvB,UAAU,CAChB,2EACGY,CAAC,CAACU,KAAK,CAACC,MAAM,cAAW,CAAC;;IAEnC,IAAIN,MAAM,CAACK,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7B,MAAM,IAAIvB,UAAU,CAChB,6EACGiB,MAAM,CAACK,KAAK,CAACC,MAAM,aAAU,CAAC;;IAEvC,IAAIL,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MAC3C,MAAM,IAAIvB,UAAU,CAChB,2EACGiB,MAAM,CAACK,KAAK,CAACC,MAAM,aAAU,CAAC;;IAEvC;IACA,IAAIV,UAAU,KAAK,eAAe,EAAE;MAClCD,CAAC,GAAG3B,GAAG,CAAC6B,SAAS,CAACF,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE;;;IAEpC,IAAIQ,OAAO,KAAK,QAAQ,EAAE;MACxB,MAAM,IAAIrB,mBAAmB,CACzB,+DAA+D,GAC/D,kBAAkB,CAAC;;IAEzB,IAAIyB,CAAC,GAAWvC,GAAG,CAACwC,MAAM,CACtBb,CAAwB,EAAEK,MAAkB,EAAEE,OAAO,EACrDC,OAAO,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO,EAAE,KAAK,EAAEC,YAAY,CAAC;IAC/D,IAAIH,IAAI,IAAI,IAAI,EAAE;MAChBM,CAAC,GAAGjC,CAAC,CAACmC,OAAO,CAACF,CAAC,EAAEN,IAAI,CAAC;;IAExB,OAAOM,CAAC;EACV,CAAC,CAAC;AACJ;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUC,MAAM,CAClBb,CAAS,EAAEK,MAAc,EACgB;EAAA,IADdE,OAAO,uEAAG,CAAC;EAAA,IAAEC,OAAO,uEAAG,OAAO;EAAA,IACzDP,UAAuB;EAAA,IAAEQ,YAAY,uEAAG,CAAC;EAC3C,OAAOlC,IAAI,CAAC,YAAK;IACfK,eAAe,CAACqB,UAAU,CAAC;IAC3B,OAAOG,cAAc,CACjBJ,CAAC,EAAEK,MAAM,EAAE,IAAI,EAAEE,OAAO,EAAEC,OAAO,EAAEP,UAAU,EAAEQ,YAAY,CAAC;EAClE,CAAC,CAAC;AACJ;AAEA;;;;;;;;;;AAUA,OAAM,SAAUM,MAAM,CAClBf,CAAS,EAAEK,MAAc,EAC+B;EAAA,IAD7BE,OAAO,uEAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAAA,IAAEC,OAAO,uEAAG,OAAO;EAAA,IAC9DP,UAAuB;EAAA,IAAEQ,YAA+B;EAC1D,OAAOlC,IAAI,CAAC,YAAK;IACfK,eAAe,CAACqB,UAAU,CAAC;IAC3B,OAAOe,wBAAwB,CAC3BhB,CAAC,EAAEK,MAAM,EAAE,IAAI,EAAEE,OAAO,EAAEC,OAAO,EAAEP,UAAU,EAAEQ,YAAY,CAAC;EAClE,CAAC,CAAC;AACJ;AAEA;;;;;AAKA,OAAM,SAAUO,wBAAwB,CACpChB,CAAS,EAAEK,MAAc,EAAEC,IAAY,EAEJ;EAAA,IAFMC,OAAO,uEAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAAA,IACzDC,OAAO,uEAAG,OAAO;EAAA,IAAEP,UAAuB;EAAA,IAAEQ,YAA+B;EAAA,IAC3EQ,iFAA+B,IAAI;EACrC,OAAO1C,IAAI,CAAC,YAAK;IACf,IAAI0B,UAAU,IAAI,IAAI,EAAE;MACtBA,UAAU,GAAGvB,eAAe,EAAE;;IAEhCE,eAAe,CAACqB,UAAU,CAAC;IAC3B,IAAID,CAAC,CAACkB,IAAI,KAAK,CAAC,IAAIlB,CAAC,CAACkB,IAAI,KAAK,CAAC,EAAE;MAChC,MAAM,IAAI9B,UAAU,CAChB,yFACgBY,CAAC,CAACkB,IAAI,MAAG,CAAC;;IAEhC,IAAIb,MAAM,CAACa,IAAI,KAAK,CAAC,IAAIb,MAAM,CAACa,IAAI,KAAK,CAAC,EAAE;MAC1C,MAAM,IAAI9B,UAAU,CAChB,0FACgBY,CAAC,CAACkB,IAAI,MAAG,CAAC;;IAEhC,IAAIN,CAAC,GAAGb,qBAAqB,CAACC,CAAC,EAAEC,UAAU,CAAC;IAC5C,IAAIO,OAAO,KAAK,QAAQ,EAAE;MACxB,MAAM,IAAIrB,mBAAmB,CACzB,+DAA+D,GAC/D,kBAAkB,CAAC;;IAEzByB,CAAC,GAAGvC,GAAG,CAAC8C,KAAK,CAACJ,MAAM,CAAC;MACnBf,CAAC,EAAEY,CAAwB;MAC3BQ,MAAM,EAAEf,MAAkB;MAC1BE,OAAO,EAAEA,OAA2B;MACpCc,GAAG,EAAEb,OAAO,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO;MAC1Cc,SAAS,EAAEb,YAAY;MACvBR,UAAU,EAAE,MAAM;MAClBK,IAAI,EAAJA,IAAI;MACJW,UAAU,EAAVA;KACD,CAAC;IACF,IAAIhB,UAAU,KAAK,eAAe,EAAE;MAClCW,CAAC,GAAGvC,GAAG,CAAC6B,SAAS,CAACU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEpC,OAAOA,CAAC;EACV,CAAC,CAAC;AACJ;AAEA;;;;;;;;;;AAUA,OAAM,SAAUW,MAAM,CAClBvB,CAAS,EAAEK,MAAc,EACuC;EAAA,IADrCE,OAAO,uEAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAAA,IAAEC,OAAO,uEAAG,OAAO;EAAA,IACjEP,UAAuB;EAAA,IAAEQ,YAAuC;EAClE,OAAOlC,IAAI,CAAC,YAAK;IACfK,eAAe,CAACqB,UAAU,CAAC;IAC3B,OAAOuB,cAAc,CACjBxB,CAAC,EAAEK,MAAM,EAAE,IAAI,EAAEE,OAAO,EAAEC,OAAO,EAAEP,UAAU,EAAEQ,YAAY,CAAC;EAClE,CAAC,CAAC;AACJ;AAEA;;;;;AAKA,OAAM,SAAUe,cAAc,CAC1BxB,CAAS,EAAEK,MAAc,EAAEC,IAAY,EAEA;EAAA,IAFEC,OAAO,uEAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAAA,IAC5DC,OAAO,uEAAG,OAAO;EAAA,IAAEP,UAAuB;EAAA,IAC1CQ,YAAuC;EACzC,OAAOlC,IAAI,CAAC,YAAK;IACf,IAAI0B,UAAU,IAAI,IAAI,EAAE;MACtBA,UAAU,GAAGvB,eAAe,EAAE;;IAEhCE,eAAe,CAACqB,UAAU,CAAC;IAC3B,IAAID,CAAC,CAACkB,IAAI,KAAK,CAAC,IAAIlB,CAAC,CAACkB,IAAI,KAAK,CAAC,EAAE;MAChC,MAAM,IAAI9B,UAAU,CAChB,+EACGY,CAAC,CAACkB,IAAI,MAAG,CAAC;;IAEnB,IAAIb,MAAM,CAACa,IAAI,KAAK,CAAC,IAAIb,MAAM,CAACa,IAAI,KAAK,CAAC,EAAE;MAC1C,MAAM,IAAI9B,UAAU,CAChB,gFACGY,CAAC,CAACkB,IAAI,MAAG,CAAC;;IAEnB,IAAIN,CAAC,GAAGT,qBAAqB,CAACH,CAAC,EAAEC,UAAU,CAAC;IAC5C,IAAIO,OAAO,KAAK,QAAQ,EAAE;MACxB,MAAM,IAAIrB,mBAAmB,CACzB,+DAA+D,GAC/D,kBAAkB,CAAC;;IAEzByB,CAAC,GAAGvC,GAAG,CAACkD,MAAM,CACVX,CAAuC,EACvCP,MAAiC,EAAEE,OAAmC,EACtEC,OAAO,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO,EAAE,OAAO,EAAEC,YAAY,CAAC;IACjE,IAAIH,IAAI,IAAI,IAAI,EAAE;MAChBM,CAAC,GAAGjC,CAAC,CAACmC,OAAO,CAACF,CAAC,EAAEN,IAAgB,CAAC;;IAEpC,IAAIL,UAAU,KAAK,eAAe,EAAE;MAClCW,CAAC,GAAGvC,GAAG,CAAC6B,SAAS,CAACU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEvC,OAAOA,CAAC;EACV,CAAC,CAAC;AACJ;AA8GA;;;AAGA,WAAsBa,QAAS;EAAA;EAAA;EAwB7B,kBAAYP,IAAY,EAAEQ,IAAuB;IAAA;IAAA;IAC/C,0BAAMA,IAAiB;IANf,UAAI,GAAkB,IAAI;IAE3B,gCAA0B,GAA0B,cAAc;IAClE,8BAAwB,GAA0B,OAAO;IAIhED,QAAQ,CAACE,UAAU,CAACD,IAAI,CAAC;IACzB,MAAKR,IAAI,GAAGA,IAAI;IAChBtB,aAAa,CAACgC,qBAAqB,CAAC,MAAKV,IAAI,EAAE,MAAM,CAAC;IACtD,IAAI,MAAKA,IAAI,KAAK,CAAC,IAAI,MAAKA,IAAI,KAAK,CAAC,IAAI,MAAKA,IAAI,KAAK,CAAC,EAAE;MACzD,MAAM,IAAI/B,mBAAmB,CACzB,4DACI,MAAK+B,IAAI,mCACS,CAAC;;IAE7B,MAAKW,UAAU,GAAGlC,cAAc,CAAC+B,IAAI,CAACG,UAAU,EAAEX,IAAI,EAAE,YAAY,CAAC;IACrE,MAAKX,OAAO,GAAGZ,cAAc,CACzB+B,IAAI,CAACnB,OAAO,IAAI,IAAI,GAAG,CAAC,GAAGmB,IAAI,CAACnB,OAAO,EAAEW,IAAI,EAAE,SAAS,CAAC;IAC7D,MAAKV,OAAO,GAAGkB,IAAI,CAAClB,OAAO,IAAI,IAAI,GAAG,OAAO,GAAGkB,IAAI,CAAClB,OAAO;IAC5D1B,gBAAgB,CAAC,MAAK0B,OAAO,CAAC;IAC9B,MAAKP,UAAU,GACXyB,IAAI,CAACzB,UAAU,IAAI,IAAI,GAAG,cAAc,GAAGyB,IAAI,CAACzB,UAAU;IAC9DrB,eAAe,CAAC,MAAKqB,UAAU,CAAC;IAChC,MAAKgB,UAAU,GAAGzC,aAAa,CAACkD,IAAI,CAACT,UAAU,CAAC;IAChD,MAAKa,OAAO,GAAGJ,IAAI,CAACI,OAAO,IAAI,IAAI,GAAG,IAAI,GAAGJ,IAAI,CAACI,OAAO;IACzD,MAAKC,eAAe,GAChB1C,cAAc,CAACqC,IAAI,CAACK,eAAe,IAAI,MAAKC,wBAAwB,CAAC;IACzE,MAAKC,cAAc,GAAGlD,aAAa,CAAC2C,IAAI,CAACO,cAAc,CAAC;IACxD,MAAKC,eAAe,GAAG3C,cAAc,CAACmC,IAAI,CAACQ,eAAe,CAAC;IAC3D,MAAKC,mBAAmB,GAAG5C,cAAc,CAACmC,IAAI,CAACS,mBAAmB,CAAC;IACnE,MAAK1B,YAAY,GAAGd,cAAc,CAC9B+B,IAAI,CAACjB,YAAY,IAAI,IAAI,GAAG,CAAC,GAAGiB,IAAI,CAACjB,YAAY,EAAES,IAAI,EACvD,cAAc,CAAC;IACnB,IAAI,MAAKA,IAAI,KAAK,CAAC,IACdkB,KAAK,CAACC,OAAO,CAAC,MAAK5B,YAAY,CAAC,IAAI,MAAKA,YAAY,CAACE,MAAM,KAAK,CAAE,EAAE;MACxE,MAAM,IAAIvB,UAAU,CAChB,qGACmC,aAChCkD,IAAI,CAACC,SAAS,CAAC,MAAK9B,YAAY,CAAC,CAAE,CAAC;KAC5C,MAAM,IAAI,MAAKS,IAAI,KAAK,CAAC,EAAE;MAC1B,IAAI,OAAO,MAAKT,YAAY,KAAK,QAAQ,EAAE;QACzC,MAAKA,YAAY,GAAG,CAAC,MAAKA,YAAY,EAAE,MAAKA,YAAY,CAAC;OAC3D,MAAM,IAAI,MAAKA,YAAY,CAACE,MAAM,KAAK,CAAC,EAAE;QACzC,MAAM,IAAIvB,UAAU,CAChB,sGAC6BkD,IAAI,CAACC,SAAS,CAAC,MAAK9B,YAAY,CAAC,CAAE,CAAC;;KAExE,MAAM,IAAI,MAAKS,IAAI,KAAK,CAAC,EAAE;MAC1B,IAAI,OAAO,MAAKT,YAAY,KAAK,QAAQ,EAAE;QACzC,MAAKA,YAAY,GACb,CAAC,MAAKA,YAAY,EAAE,MAAKA,YAAY,EAAE,MAAKA,YAAY,CAAC;OAC9D,MAAM,IAAI,MAAKA,YAAY,CAACE,MAAM,KAAK,CAAC,EAAE;QACzC,MAAM,IAAIvB,UAAU,CAChB,wGAC6BkD,IAAI,CAACC,SAAS,CAAC,MAAK9B,YAAY,CAAC,CAAE,CAAC;;;IAExE;EACH;EAAC;IAAA;IAAA,OAgBQ,qBAAS;MAChB,IAAM+B,MAAM,GAA6B;QACvCX,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BtB,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBP,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BQ,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/BQ,UAAU,EAAExC,mBAAmB,CAAC,IAAI,CAACwC,UAAU,CAAC;QAChDa,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,eAAe,EAAEzC,oBAAoB,CAAC,IAAI,CAACyC,eAAe,CAAC;QAC3DG,eAAe,EAAE1C,oBAAoB,CAAC,IAAI,CAAC0C,eAAe,CAAC;QAC3DC,mBAAmB,EAAE3C,oBAAoB,CAAC,IAAI,CAAC2C,mBAAmB,CAAC;QACnEF,cAAc,EAAEjD,mBAAmB,CAAC,IAAI,CAACiD,cAAc;OACxD;MACD,IAAMQ,UAAU,0EAAoB;MACpCC,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;MACjC,OAAOD,MAAM;IACf;EAAC;IAAA;IAAA,OA/BS,oBAAkBd,IAAuB;MACjD;MACA9B,aAAa,CAACgD,MAAM,CAChB,YAAY,IAAIlB,IAAI,4CAA4C;MACpE,IAAI,OAAOA,IAAI,CAACG,UAAU,KAAK,QAAQ,IACnC,CAACjC,aAAa,CAACiD,uBAAuB,CAClCnB,IAAI,CAACG,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;QACxC,MAAM,IAAIzC,UAAU,CAChB,gHAEIkD,IAAI,CAACC,SAAS,CAACb,IAAI,CAACG,UAAU,CAAC,MAAG,CAAC;;IAE/C;EAAC;EAAA;AAAA,EA3FoC3C,KAAK;AAiH5C;;;;AAIA,WAAsB4D,IAAK;EAAA;EAAA;EAczB,cAAY5B,IAAY,EAAEQ,IAAmB;IAAA;IAAA;IAC3C,4BAAMR,IAAI,EAAEQ,IAAyB;IAZ7B,aAAM,GAAkB,IAAI;IAapCoB,IAAI,CAACnB,UAAU,CAACD,IAAI,CAAC;IACrB,OAAKqB,OAAO,GAAGrB,IAAI,CAACqB,OAAO;IAC3BnD,aAAa,CAACgC,qBAAqB,CAAC,OAAKmB,OAAO,EAAE,SAAS,CAAC;IAC5D,OAAKC,iBAAiB,GAAG3D,cAAc,CACnCqC,IAAI,CAACsB,iBAAiB,IAAI,OAAKC,0BAA0B,CAAC;IAC9D,OAAKC,gBAAgB,GAAGnE,aAAa,CAAC2C,IAAI,CAACwB,gBAAgB,CAAC;IAC5D,OAAKC,iBAAiB,GAAG5D,cAAc,CAACmC,IAAI,CAACyB,iBAAiB,CAAC;IAAC;EAClE;EAAC;IAAA;IAAA,OAEQ,eAAMC,UAAyB;MACtCA,UAAU,GAAGvD,kBAAkB,CAACuD,UAAU,CAAC;MAC3C,IAAMC,WAAW,GACb,IAAI,CAACpD,UAAU,KAAK,eAAe,GAAG,CAAC,GAAGmD,UAAU,CAACzC,MAAM,GAAG,CAAC;MACnE,IAAIyC,UAAU,CAACC,WAAW,CAAC,IAAI,IAAI,EAAE;QACnC,MAAM,IAAIjE,UAAU,CAChB,2EACSgE,UAAU,CAACC,WAAW,CAAC,CAAE,CAAC;;MAEzC,IAAMC,QAAQ,GAAGF,UAAU,CAACC,WAAW,CAAC;MAExC,IAAME,WAAW,GAAG,IAAI,CAAC1B,UAAU,CAAC2B,MAAM,CAAC,CAACF,QAAQ,EAAE,IAAI,CAACP,OAAO,CAAC,CAAC;MAEpE,IAAI,CAAC1C,MAAM,GAAG,IAAI,CAACoD,SAAS,CACxB,QAAQ,EAAEF,WAAW,EAAE,IAAI,EAAE,IAAI,CAACP,iBAAiB,EACnD,IAAI,CAACG,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAACD,gBAAgB,CAAC;MACxD,IAAI,IAAI,CAACpB,OAAO,EAAE;QAChB,IAAI,CAACxB,IAAI,GAAG,IAAI,CAACmD,SAAS,CACtB,MAAM,EAAE,CAAC,IAAI,CAACV,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,CAAChB,eAAe,EAClD,IAAI,CAACG,eAAe,EAAE,IAAI,EAAE,IAAI,CAACD,cAAc,CAAC;;MAGtD,IAAI,CAACyB,SAAS,GAAG,CAAC;QAACC,IAAI,EAAE,IAAI,CAACzC,IAAI,GAAG,CAAC;QAAE0C,IAAI,sBAAIP,WAAW,EAAGC,QAAQ;MAAC,CAAC,CAAC;MACzE,IAAI,CAACO,KAAK,GAAG,IAAI;IACnB;EAAC;IAAA;IAAA,OAEQ,cAAKC,MAAuB,EAAEC,MAAc;MAAA;MACnD,OAAOxF,IAAI,CAAC,YAAK;QACfuF,MAAM,GAAGhE,mBAAmB,CAACgE,MAAM,CAAC;QACpC,IAAIE,OAAe;QACnB,IAAMC,SAAS,GAAG,MAAI,CAAC3D,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,MAAI,CAACA,IAAI,CAAC4D,IAAI,EAAE;QAC7D,IAAMC,mBAAmB,GAAGvE,aAAa,CAACwE,0BAA0B,CAChE,MAAI,CAACnD,UAAU,CAACoD,YAAY,EAAE,CAAC;QAEnC,IAAIF,mBAAmB,IAAI,IAAI,IAAI,MAAI,CAACjD,IAAI,KAAK,CAAC,EAAE;UAClD8C,OAAO,GAAGhD,wBAAwB,CAC9B8C,MAAM,EAAE,MAAI,CAACzD,MAAM,CAAC6D,IAAI,EAAE,EAAED,SAAS,EAAE,MAAI,CAAC1D,OAAO,EAAE,MAAI,CAACC,OAAO,EACjE,MAAI,CAACP,UAAU,EAAE,MAAI,CAACQ,YAAgC,EACtD0D,mBAAmB,CAAC;SACzB,MAAM;UACL,IAAI,MAAI,CAACjD,IAAI,KAAK,CAAC,EAAE;YACnB8C,OAAO,GAAG5D,cAAc,CACpB0D,MAAM,EAAE,MAAI,CAACzD,MAAM,CAAC6D,IAAI,EAAE,EAAED,SAAS,EAAE,MAAI,CAAC1D,OAAO,CAAC,CAAC,CAAC,EACtD,MAAI,CAACC,OAAO,EAAE,MAAI,CAACP,UAAU,EAAE,MAAI,CAACQ,YAAY,CAAC,CAAC,CAAC,CAAC;WACzD,MAAM,IAAI,MAAI,CAACS,IAAI,KAAK,CAAC,EAAE;YAC1B;YACA8C,OAAO,GAAGhD,wBAAwB,CAC9B8C,MAAM,EAAE,MAAI,CAACzD,MAAM,CAAC6D,IAAI,EAAE,EAAED,SAAS,EAAE,MAAI,CAAC1D,OAAO,EAAE,MAAI,CAACC,OAAO,EACjE,MAAI,CAACP,UAAU,EAAE,MAAI,CAACQ,YAAgC,CAAC;WAC5D,MAAM,IAAI,MAAI,CAACS,IAAI,KAAK,CAAC,EAAE;YAC1B8C,OAAO,GAAGxC,cAAc,CACpBsC,MAAM,EAAE,MAAI,CAACzD,MAAM,CAAC6D,IAAI,EAAE,EAAED,SAAS,EAAE,MAAI,CAAC1D,OAAO,EAAE,MAAI,CAACC,OAAO,EACjE,MAAI,CAACP,UAAU,EAAE,MAAI,CAACQ,YAAwC,CAAC;WACpE,MAAM;YACL,MAAM,IAAItB,mBAAmB,CACzB,uDAAuD,CAAC;;UAG9D,IAAI,MAAI,CAAC8B,UAAU,IAAI,IAAI,EAAE;YAC3B+C,OAAO,GAAG,MAAI,CAAC/C,UAAU,CAACqD,KAAK,CAACN,OAAO,CAAC;;;QAI5C,OAAOA,OAAO;MAChB,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAEQ,4BAAmBZ,UAAyB;MACnDA,UAAU,GAAGvD,kBAAkB,CAACuD,UAAU,CAAC;MAC3C,IAAMmB,QAAQ,GAAa,EAAE;MAC7B,IAAMC,KAAK,GAAI,IAAI,CAACvE,UAAU,KAAK,cAAc,GAC7CmD,UAAU,CAACqB,KAAK,CAAC,CAAC,EAAErB,UAAU,CAACzC,MAAM,GAAG,CAAC,CAAC,GAC1CyC,UAAU,CAACqB,KAAK,CAAC,CAAC,CAAC;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAAC7D,MAAM,EAAE,EAAE+D,CAAC,EAAE;QACrC,IAAMC,MAAM,GAAGlF,gBAAgB,CAC3B+E,KAAK,CAACE,CAAC,CAAC,EAAE,IAAI,CAAC7C,UAAU,CAAC6C,CAAC,CAAC,EAAE,IAAI,CAAClE,OAAO,EAAE,IAAI,CAACD,OAAO,CAACmE,CAAC,CAAC,EAC3D,OAAO,IAAI,CAACjE,YAAY,KAAK,QAAQ,GAAG,IAAI,CAACA,YAAY,GACjB,IAAI,CAACA,YAAY,CAACiE,CAAC,CAAC,CAAC;QACjEH,QAAQ,CAACK,IAAI,CAACD,MAAM,CAAC;;MAGvB,IAAIE,WAAW,GAAG,CAACzB,UAAU,CAAC,CAAC,CAAC,CAAC;MACjC,IAAI,IAAI,CAACnD,UAAU,KAAK,cAAc,EAAE;QACtC4E,WAAW,GAAGA,WAAW,CAACrB,MAAM,CAACe,QAAQ,CAAC;QAC1CM,WAAW,CAACD,IAAI,CAAC,IAAI,CAAC7B,OAAO,CAAC;OAC/B,MAAM;QACL8B,WAAW,CAACD,IAAI,CAAC,IAAI,CAAC7B,OAAO,CAAC;QAC9B8B,WAAW,GAAGA,WAAW,CAACrB,MAAM,CAACe,QAAQ,CAAC;;MAE5C,OAAOM,WAAW;IACpB;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMrC,MAAM,GAAG;QACbO,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,iBAAiB,EAAE1D,oBAAoB,CAAC,IAAI,CAAC0D,iBAAiB,CAAC;QAC/DG,iBAAiB,EAAE3D,oBAAoB,CAAC,IAAI,CAAC2D,iBAAiB,CAAC;QAC/DD,gBAAgB,EAAElE,mBAAmB,CAAC,IAAI,CAACkE,gBAAgB;OAC5D;MACD,IAAMT,UAAU,sEAAoB;MACpCC,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;MACjC,OAAOD,MAAM;IACf;EAAC;IAAA;IAAA,OAES,oBAA2Bd,IAAmB;MACtD;MACA,IAAI,EAAE,SAAS,IAAIA,IAAI,CAAC,IAAI,OAAOA,IAAI,CAACqB,OAAO,KAAK,QAAQ,IACxDrB,IAAI,CAACqB,OAAO,GAAG,CAAC,EAAE;QACpB,MAAM,IAAI3D,UAAU,CAChB,sFACWkD,IAAI,CAACC,SAAS,CAACb,IAAI,CAACqB,OAAO,CAAC,CAAE,CAAC;;IAElD;EAAC;EAAA;AAAA,EAzIgCtB,QAAQ;AA4I3C,WAAaqD,MAAO;EAAA;EAAA;EAGlB,gBAAYpD,IAAmB;IAAA;IAAA;IAC7B,4BAAM,CAAC,EAAEA,IAAI;IACboD,MAAM,CAACnD,UAAU,CAACD,IAAI,CAAC;IAAC;EAC1B;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMc,MAAM,wEAAoB;MAChC,OAAOA,MAAM,CAAC,MAAM,CAAC;MACrB,OAAOA,MAAM;IACf;EAAC;IAAA;IAAA,OAES,oBAA2Bd,IAAmB;MACtD;MACA,IAAK,OAAOA,IAAI,CAACG,UAAU,KAAK,QAAQ,IACpC,CAACjC,aAAa,CAACiD,uBAAuB,CAClCnB,IAAI,CAACG,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;QACxC,MAAM,IAAIzC,UAAU,CAChB,0GAC+BkD,IAAI,CAACC,SAAS,CAACb,IAAI,CAACG,UAAU,CAAC,MAAG,CAAC;;IAE1E;EAAC;EAAA;AAAA,EAvByBiB,IAAI;AAC9B;AACOgC,gBAAS,GAAG,QAAQ;AAuB7BxG,aAAa,CAACyG,aAAa,CAACD,MAAM,CAAC;AAEnC,WAAaE,MAAO;EAAA;EAAA;EAGlB,gBAAYtD,IAAmB;IAAA;IAAA;IAC7B,4BAAM,CAAC,EAAEA,IAAI;IACbsD,MAAM,CAACrD,UAAU,CAACD,IAAI,CAAC;IAAC;EAC1B;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMc,MAAM,wEAAoB;MAChC,OAAOA,MAAM,CAAC,MAAM,CAAC;MACrB,OAAOA,MAAM;IACf;EAAC;IAAA;IAAA,OAES,oBAA2Bd,IAAmB;MACtD;MACA,IAAI,OAAOA,IAAI,CAACG,UAAU,KAAK,QAAQ,EAAE;QACvC,IAAI,EAAEO,KAAK,CAACC,OAAO,CAACX,IAAI,CAACG,UAAU,CAAC,KAC7BH,IAAI,CAACG,UAAU,CAAClB,MAAM,KAAK,CAAC,IAAIe,IAAI,CAACG,UAAU,CAAClB,MAAM,KAAK,CAAC,CAAC,CAAC,EAAE;UACrE,MAAM,IAAIvB,UAAU,CAChB,uGAEIkD,IAAI,CAACC,SAAS,CAACb,IAAI,CAACG,UAAU,CAAC,MAAG,CAAC;;;IAGjD;EAAC;EAAA;AAAA,EAzByBiB,IAAI;AAC9B;AACOkC,gBAAS,GAAG,QAAQ;AAyB7B1G,aAAa,CAACyG,aAAa,CAACC,MAAM,CAAC;AAEnC,WAAaC,eAAgB;EAAA;EAAA;EAI3B,yBAAYvD,IAAmB;IAAA;IAAA;IAC7B,4BAAMA,IAAI;IACV,OAAKgC,SAAS,GAAG,CAAC,IAAIzE,SAAS,CAAC;MAAC0E,IAAI,EAAE;IAAC,CAAC,CAAC,CAAC;IAE3C,IAAI,OAAKnD,OAAO,KAAK,MAAM,IAAI,OAAKA,OAAO,KAAK,OAAO,EAAE;MACvD,MAAM,IAAIpB,UAAU,CAChB,mHAC0C,OAAKoB,OAAO,CAAE,CAAC;;IAC9D;EACH;EAAC;IAAA;IAAA,OAEQ,eAAM4C,UAAyB;MACtCA,UAAU,GAAGvD,kBAAkB,CAACuD,UAAU,CAAC;MAE3C,IAAIA,UAAU,CAACzC,MAAM,KAAK,CAAC,EAAE;QAC3B,MAAM,IAAIvB,UAAU,CAChB,kDAAkD,GAClDkD,IAAI,CAACC,SAAS,CAACa,UAAU,CAAC,CAAC;;MAGjC,IAAMC,WAAW,GACb,IAAI,CAACpD,UAAU,KAAK,eAAe,GAAG,CAAC,GAAGmD,UAAU,CAACzC,MAAM,GAAG,CAAC;MACnE,IAAIyC,UAAU,CAACC,WAAW,CAAC,IAAI,IAAI,EAAE;QACnC,MAAM,IAAIjE,UAAU,CAChB,yDAAyD,GACzD,eAAe,CAAC;;MAEtB,IAAMkE,QAAQ,GAAGF,UAAU,CAACC,WAAW,CAAC;MACxC,IAAME,WAAW,GAAG,IAAI,CAAC1B,UAAU,CAAC2B,MAAM,CAAC,CAAC,IAAI,CAACT,OAAO,EAAEO,QAAQ,CAAC,CAAC;MAEpE,IAAI,CAACjD,MAAM,GAAG,IAAI,CAACoD,SAAS,CACxB,QAAQ,EAAEF,WAAW,EAAE,SAAS,EAAE,IAAI,CAACP,iBAAiB,EACxD,IAAI,CAACG,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAACD,gBAAgB,CAAC;MACxD,IAAI,IAAI,CAACpB,OAAO,EAAE;QAChB,IAAI,CAACxB,IAAI,GAAG,IAAI,CAACmD,SAAS,CACtB,MAAM,EAAE,CAAC,IAAI,CAACV,OAAO,CAAC,EAAE,SAAS,EAAE,IAAI,CAAChB,eAAe,EACvD,IAAI,CAACG,eAAe,EAAE,IAAI,EAAE,IAAI,CAACD,cAAc,CAAC;;MAGtD;MACA,IAAI,CAACyB,SAAS,GACV,CAAC,IAAIzE,SAAS,CAAC;QAAC0E,IAAI,EAAE,CAAC;QAAEC,IAAI,sBAAIP,WAAW,EAAGC,QAAQ;MAAC,CAAC,CAAC,CAAC;MAC/D,IAAI,CAACO,KAAK,GAAG,IAAI;IACnB;EAAC;IAAA;IAAA,OAEQ,cAAKC,MAAuB,EAAEC,MAAc;MAAA;MACnD,OAAO1F,GAAG,CAACE,IAAI,CAAC,YAAK;QACnB,IAAI2G,KAAK,GAAGpF,mBAAmB,CAACgE,MAAM,CAAC;QACvC,IAAIoB,KAAK,CAACxE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;UAC5B,MAAM,IAAIvB,UAAU,CAChB,uGAC6B8F,KAAK,CAACxE,KAAK,CAACC,MAAM,CAAE,CAAC;;QAGxD,IAAMyC,UAAU,GAAG8B,KAAK,CAACxE,KAAK;QAC9B,IAAMyE,SAAS,GAAG/B,UAAU,CAAC,CAAC,CAAC;QAE/B,IAAIgC,KAAa;QACjB,IAAIC,KAAa;QACjB,IAAI,MAAI,CAACpF,UAAU,KAAK,eAAe,EAAE;UACvCmF,KAAK,GAAG,CAAC;UACTC,KAAK,GAAG,CAAC;SACV,MAAM;UACLD,KAAK,GAAG,CAAC;UACTC,KAAK,GAAG,CAAC;;QAGX,IAAMC,MAAM,GAAGlC,UAAU,CAACgC,KAAK,CAAC;QAChC,IAAMG,KAAK,GAAGnC,UAAU,CAACiC,KAAK,CAAC;QAC/B,IAAMG,OAAO,GAAG,MAAI,CAAC3D,UAAU,CAAC,CAAC,CAAC;QAClC,IAAM4D,OAAO,GAAG,MAAI,CAAC5D,UAAU,CAAC,CAAC,CAAC;QAClC,IAAM6D,OAAO,GAAG,MAAI,CAACnF,OAAO,CAAC,CAAC,CAAC;QAC/B,IAAMoF,OAAO,GAAG,MAAI,CAACpF,OAAO,CAAC,CAAC,CAAC;QAE/B;QACA,IAAMqF,SAAS,GAAGlG,YAAY,CAAC4F,MAAM,EAAEI,OAAO,EAAEF,OAAO,EAAE,MAAI,CAAChF,OAAO,CAAC;QACtE,IAAMqF,QAAQ,GAAGnG,YAAY,CAAC6F,KAAK,EAAEI,OAAO,EAAEF,OAAO,EAAE,MAAI,CAACjF,OAAO,CAAC;QAEpE;QACA;QACA;QACA;QACA,IAAMqE,WAAW,GACb,CAACM,SAAS,EAAES,SAAS,EAAEC,QAAQ,EAAE,MAAI,CAAC9C,OAAO,CAAC;QAElD,IAAI,MAAI,CAAC9C,UAAU,KAAK,cAAc,EAAE;UACtCiF,KAAK,GAAG7G,GAAG,CAAC6B,SAAS,CAACgF,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;QAE5C,IAAIlB,OAAO,GAAG3F,GAAG,CAACyH,eAAe,CAC7BZ,KAAiB,EAAE,MAAI,CAAC7E,MAAM,CAAC6D,IAAI,EAAc,EAAEW,WAAW,EAC9D,MAAI,CAACtE,OAA2B,EAAE,MAAI,CAACC,OAA2B,CAAC;QACvE,IAAI,MAAI,CAACP,UAAU,KAAK,cAAc,EAAE;UACtC+D,OAAO,GAAG3F,GAAG,CAAC6B,SAAS,CAAC8D,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;QAGhD,IAAI,MAAI,CAAC1D,IAAI,IAAI,IAAI,EAAE;UACrB0D,OAAO,GACHrF,CAAC,CAACmC,OAAO,CAACkD,OAAO,EAAE,MAAI,CAAC1D,IAAI,CAAC4D,IAAI,EAAE,EAAE,MAAI,CAACjE,UAAU,CAAa;;QAEvE,IAAI,MAAI,CAACgB,UAAU,IAAI,IAAI,EAAE;UAC3B+C,OAAO,GAAG,MAAI,CAAC/C,UAAU,CAACqD,KAAK,CAACN,OAAO,CAAa;;QAEtD,OAAOA,OAAO;MAChB,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAEQ,4BAAmBZ,UAAyB;MACnDA,UAAU,GAAGvD,kBAAkB,CAACuD,UAAU,CAAC;MAC3C,IAAMyB,WAAW,GAAGzB,UAAU,CAACqB,KAAK,EAAE;MAEtC,IAAIpB,WAAmB;MACvB,IAAI0C,UAAkB;MACtB,IAAIC,SAAiB;MACrB,IAAI,IAAI,CAAC/F,UAAU,KAAK,eAAe,EAAE;QACvCoD,WAAW,GAAG,CAAC;QACf0C,UAAU,GAAG,CAAC;QACdC,SAAS,GAAG,CAAC;OACd,MAAM;QACL3C,WAAW,GAAG,CAAC;QACf0C,UAAU,GAAG,CAAC;QACdC,SAAS,GAAG,CAAC;;MAGf,IAAMR,OAAO,GAAG,IAAI,CAAC3D,UAAU,CAAC,CAAC,CAAC;MAClC,IAAM4D,OAAO,GAAG,IAAI,CAAC5D,UAAU,CAAC,CAAC,CAAC;MAClC,IAAM6D,OAAO,GAAG,IAAI,CAACnF,OAAO,CAAC,CAAC,CAAC;MAC/B,IAAMoF,OAAO,GAAG,IAAI,CAACpF,OAAO,CAAC,CAAC,CAAC;MAE/BsE,WAAW,CAACxB,WAAW,CAAC,GAAG,IAAI,CAACN,OAAO;MACvC8B,WAAW,CAACkB,UAAU,CAAC,GACnBrG,YAAY,CAACmF,WAAW,CAACkB,UAAU,CAAC,EAAEL,OAAO,EAAEF,OAAO,EAAE,IAAI,CAAChF,OAAO,CAAC;MACzEqE,WAAW,CAACmB,SAAS,CAAC,GAClBtG,YAAY,CAACmF,WAAW,CAACmB,SAAS,CAAC,EAAEL,OAAO,EAAEF,OAAO,EAAE,IAAI,CAACjF,OAAO,CAAC;MACxE,OAAOqE,WAAW;IACpB;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMrC,MAAM,iFAAoB;MAChC,OAAOA,MAAM,CAAC,cAAc,CAAC;MAC7B,OAAOA,MAAM;IACf;EAAC;EAAA;AAAA,EAhJkCsC,MAAM;AACzC;AACgBG,yBAAS,GAAG,iBAAiB;AAgJ/C3G,aAAa,CAACyG,aAAa,CAACE,eAAe,CAAC;AAE5C,WAAagB,eAAgB;EAAA;EAAA;EAI3B,yBAAYvE,IAAmB;IAAA;IAAA;IAC7B,4BAAMA,IAAI;IACV,OAAKgC,SAAS,GAAG,CAAC,IAAIzE,SAAS,CAAC;MAAC0E,IAAI,EAAE;IAAC,CAAC,CAAC,CAAC;IAE3C,IAAI,OAAKnD,OAAO,KAAK,MAAM,IAAI,OAAKA,OAAO,KAAK,OAAO,EAAE;MACvD,MAAM,IAAIpB,UAAU,CAChB,mHAC0C,OAAKoB,OAAO,CAAE,CAAC;;IAC9D;EACH;EAAC;IAAA;IAAA,OAEQ,eAAM4C,UAAyB;MACtCA,UAAU,GAAGvD,kBAAkB,CAACuD,UAAU,CAAC;MAE3C,IAAIA,UAAU,CAACzC,MAAM,KAAK,CAAC,EAAE;QAC3B,MAAM,IAAIvB,UAAU,CAChB,kDAAkD,GAClDkD,IAAI,CAACC,SAAS,CAACa,UAAU,CAAC,CAAC;;MAGjC,IAAMC,WAAW,GACb,IAAI,CAACpD,UAAU,KAAK,eAAe,GAAG,CAAC,GAAGmD,UAAU,CAACzC,MAAM,GAAG,CAAC;MACnE,IAAIyC,UAAU,CAACC,WAAW,CAAC,IAAI,IAAI,EAAE;QACnC,MAAM,IAAIjE,UAAU,CAChB,yDAAyD,GACzD,eAAe,CAAC;;MAEtB,IAAMkE,QAAQ,GAAGF,UAAU,CAACC,WAAW,CAAC;MACxC,IAAME,WAAW,GAAG,IAAI,CAAC1B,UAAU,CAAC2B,MAAM,CAAC,CAAC,IAAI,CAACT,OAAO,EAAEO,QAAQ,CAAC,CAAC;MAEpE,IAAI,CAACjD,MAAM,GAAG,IAAI,CAACoD,SAAS,CACxB,QAAQ,EAAEF,WAAW,EAAE,SAAS,EAAE,IAAI,CAACP,iBAAiB,EACxD,IAAI,CAACG,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAACD,gBAAgB,CAAC;MACxD,IAAI,IAAI,CAACpB,OAAO,EAAE;QAChB,IAAI,CAACxB,IAAI,GAAG,IAAI,CAACmD,SAAS,CACtB,MAAM,EAAE,CAAC,IAAI,CAACV,OAAO,CAAC,EAAE,SAAS,EAAE,IAAI,CAAChB,eAAe,EACvD,IAAI,CAACG,eAAe,EAAE,IAAI,EAAE,IAAI,CAACD,cAAc,CAAC;;MAGtD;MACA,IAAI,CAACyB,SAAS,GACV,CAAC,IAAIzE,SAAS,CAAC;QAAC0E,IAAI,EAAE,CAAC;QAAEC,IAAI,sBAAIP,WAAW,EAAGC,QAAQ;MAAC,CAAC,CAAC,CAAC;MAC/D,IAAI,CAACO,KAAK,GAAG,IAAI;IACnB;EAAC;IAAA;IAAA,OAEQ,cAAKC,MAAuB,EAAEC,MAAc;MAAA;MACnD,OAAO1F,GAAG,CAACE,IAAI,CAAe,YAAK;QACjC,IAAI2G,KAAK,GAAGpF,mBAAmB,CAACgE,MAAM,CAAC;QACvC,IAAIoB,KAAK,CAACxE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;UAC5B,MAAM,IAAIvB,UAAU,CAChB,uGAC6B8F,KAAK,CAACxE,KAAK,CAACC,MAAM,CAAE,CAAC;;QAGxD,IAAMyC,UAAU,GAAG8B,KAAK,CAACxE,KAAK;QAC9B,IAAMyE,SAAS,GAAG/B,UAAU,CAAC,CAAC,CAAC;QAE/B,IAAIgC,KAAa;QACjB,IAAIC,KAAa;QACjB,IAAIa,KAAa;QAEjB,IAAI,MAAI,CAACjG,UAAU,KAAK,eAAe,EAAE;UACvCiG,KAAK,GAAG,CAAC;UACTd,KAAK,GAAG,CAAC;UACTC,KAAK,GAAG,CAAC;SACV,MAAM;UACLa,KAAK,GAAG,CAAC;UACTd,KAAK,GAAG,CAAC;UACTC,KAAK,GAAG,CAAC;;QAGX,IAAMc,KAAK,GAAG/C,UAAU,CAAC8C,KAAK,CAAC;QAC/B,IAAMZ,MAAM,GAAGlC,UAAU,CAACgC,KAAK,CAAC;QAChC,IAAMG,KAAK,GAAGnC,UAAU,CAACiC,KAAK,CAAC;QAC/B,IAAMe,OAAO,GAAG,MAAI,CAACvE,UAAU,CAAC,CAAC,CAAC;QAClC,IAAM2D,OAAO,GAAG,MAAI,CAAC3D,UAAU,CAAC,CAAC,CAAC;QAClC,IAAM4D,OAAO,GAAG,MAAI,CAAC5D,UAAU,CAAC,CAAC,CAAC;QAClC,IAAMwE,OAAO,GAAG,MAAI,CAAC9F,OAAO,CAAC,CAAC,CAAC;QAC/B,IAAMmF,OAAO,GAAG,MAAI,CAACnF,OAAO,CAAC,CAAC,CAAC;QAC/B,IAAMoF,OAAO,GAAG,MAAI,CAACpF,OAAO,CAAC,CAAC,CAAC;QAE/B;QACA,IAAM+F,QAAQ,GAAG5G,YAAY,CAACyG,KAAK,EAAEE,OAAO,EAAED,OAAO,EAAE,MAAI,CAAC5F,OAAO,CAAC;QACpE,IAAMoF,SAAS,GAAGlG,YAAY,CAAC4F,MAAM,EAAEI,OAAO,EAAEF,OAAO,EAAE,MAAI,CAAChF,OAAO,CAAC;QACtE,IAAMqF,QAAQ,GAAGnG,YAAY,CAAC6F,KAAK,EAAEI,OAAO,EAAEF,OAAO,EAAE,MAAI,CAACjF,OAAO,CAAC;QAEpE;QACA,IAAMqE,WAAW,GACb,CAACM,SAAS,EAAEmB,QAAQ,EAAEV,SAAS,EAAEC,QAAQ,EAAE,MAAI,CAAC9C,OAAO,CAAC;QAC5D,IAAI,MAAI,CAAC9C,UAAU,KAAK,cAAc,EAAE;UACtCiF,KAAK,GAAG7G,GAAG,CAAC6B,SAAS,CAACgF,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;QAE/C,IAAIlB,OAAO,GAAG3F,GAAG,CAACkI,eAAe,CAC7BrB,KAAiB,EAAE,MAAI,CAAC7E,MAAM,CAAC6D,IAAI,EAAc,EAAEW,WAAW,EAC9D,MAAI,CAACtE,OAAmC,EACxC,MAAI,CAACC,OAA2B,CAAC;QACrC,IAAI,MAAI,CAACP,UAAU,KAAK,cAAc,EAAE;UACtC+D,OAAO,GAAG3F,GAAG,CAAC6B,SAAS,CAAC8D,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;QAGnD,IAAI,MAAI,CAAC1D,IAAI,KAAK,IAAI,EAAE;UACtB0D,OAAO,GACHrF,CAAC,CAACmC,OAAO,CAACkD,OAAO,EAAE,MAAI,CAAC1D,IAAI,CAAC4D,IAAI,EAAE,EAAE,MAAI,CAACjE,UAAU,CAAa;;QAEvE,IAAI,MAAI,CAACgB,UAAU,KAAK,IAAI,EAAE;UAC5B+C,OAAO,GAAG,MAAI,CAAC/C,UAAU,CAACqD,KAAK,CAACN,OAAO,CAAa;;QAEtD,OAAOA,OAAO;MAChB,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAEQ,4BAAmBZ,UAAyB;MACnDA,UAAU,GAAGvD,kBAAkB,CAACuD,UAAU,CAAC;MAC3C,IAAMyB,WAAW,GAAGzB,UAAU,CAACqB,KAAK,EAAE;MAEtC,IAAIpB,WAAmB;MACvB,IAAImD,SAAiB;MACrB,IAAIT,UAAkB;MACtB,IAAIC,SAAiB;MACrB,IAAI,IAAI,CAAC/F,UAAU,KAAK,eAAe,EAAE;QACvCoD,WAAW,GAAG,CAAC;QACfmD,SAAS,GAAG,CAAC;QACbT,UAAU,GAAG,CAAC;QACdC,SAAS,GAAG,CAAC;OACd,MAAM;QACL3C,WAAW,GAAG,CAAC;QACfmD,SAAS,GAAG,CAAC;QACbT,UAAU,GAAG,CAAC;QACdC,SAAS,GAAG,CAAC;;MAGf,IAAMI,OAAO,GAAG,IAAI,CAACvE,UAAU,CAAC,CAAC,CAAC;MAClC,IAAM2D,OAAO,GAAG,IAAI,CAAC3D,UAAU,CAAC,CAAC,CAAC;MAClC,IAAM4D,OAAO,GAAG,IAAI,CAAC5D,UAAU,CAAC,CAAC,CAAC;MAClC,IAAMwE,OAAO,GAAG,IAAI,CAAC9F,OAAO,CAAC,CAAC,CAAC;MAC/B,IAAMmF,OAAO,GAAG,IAAI,CAACnF,OAAO,CAAC,CAAC,CAAC;MAC/B,IAAMoF,OAAO,GAAG,IAAI,CAACpF,OAAO,CAAC,CAAC,CAAC;MAE/BsE,WAAW,CAACxB,WAAW,CAAC,GAAG,IAAI,CAACN,OAAO;MACvC8B,WAAW,CAAC2B,SAAS,CAAC,GAClB9G,YAAY,CAACmF,WAAW,CAAC2B,SAAS,CAAC,EAAEH,OAAO,EAAED,OAAO,EAAE,IAAI,CAAC5F,OAAO,CAAC;MACxEqE,WAAW,CAACkB,UAAU,CAAC,GACnBrG,YAAY,CAACmF,WAAW,CAACkB,UAAU,CAAC,EAAEL,OAAO,EAAEF,OAAO,EAAE,IAAI,CAAChF,OAAO,CAAC;MACzEqE,WAAW,CAACmB,SAAS,CAAC,GAClBtG,YAAY,CAACmF,WAAW,CAACmB,SAAS,CAAC,EAAEL,OAAO,EAAEF,OAAO,EAAE,IAAI,CAACjF,OAAO,CAAC;MACxE,OAAOqE,WAAW;IACpB;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMrC,MAAM,iFAAoB;MAChC,OAAOA,MAAM,CAAC,cAAc,CAAC;MAC7B,OAAOA,MAAM;IACf;EAAC;EAAA;AAAA,EA5JkCwC,MAAM;AACzC;AACgBiB,yBAAS,GAAG,iBAAiB;AA4J/C3H,aAAa,CAACyG,aAAa,CAACkB,eAAe,CAAC;AA0C5C,WAAaQ,aAAc;EAAA;EAAA;EAqBzB,uBAAYvF,IAAY,EAAEsB,MAA+B;IAAA;IAAA;IACvD,6BAAMtB,IAAI,EAAEsB,MAAM;IATX,qCAA6B,GAClC,eAAe;IACV,qCAA6B,GAClC,eAAe;IAET,uBAAe,GAAkB,IAAI;IACrC,uBAAe,GAAkB,IAAI;IAK7C,IAAIA,MAAM,CAACO,OAAO,IAAI,IAAI,EAAE;MAC1B,MAAM,IAAI3D,UAAU,CAChB,kEAAkE,GAClE,qBAAqB,CAAC;;IAE5B,IAAIoD,MAAM,CAACQ,iBAAiB,IAAI,IAAI,IAAIR,MAAM,CAACW,iBAAiB,IAAI,IAAI,IACpEX,MAAM,CAACU,gBAAgB,IAAI,IAAI,EAAE;MACnC,MAAM,IAAI9D,UAAU,CAChB,mEAAmE,GACnE,6DAA6D,GAC7D,mEAAmE,GACnE,uDAAuD,CAAC;;IAE9D,IAAIoD,MAAM,CAAChC,OAAO,IAAI,IAAI,IAAIgC,MAAM,CAAChC,OAAO,KAAK,MAAM,IACnDgC,MAAM,CAAChC,OAAO,KAAK,OAAO,EAAE;MAC9B,MAAM,IAAIpB,UAAU,CAChB,uBAAgB,QAAK8B,IAAI,kFACWoB,IAAI,CAACC,SAAS,CAACC,MAAM,CAAChC,OAAO,CAAC,CAAE,CAAC;;IAG3E,QAAKkG,eAAe,GAChBlE,MAAM,CAACkE,eAAe,IAAI,IAAI,GAAG,CAAC,GAAGlE,MAAM,CAACkE,eAAe;IAC/D,QAAKC,oBAAoB,GAAGtH,cAAc,CACtCmD,MAAM,CAACmE,oBAAoB,IAAI,QAAKC,6BAA6B,CAAC;IACtE,QAAKC,oBAAoB,GAAGtH,cAAc,CAACiD,MAAM,CAACqE,oBAAoB,CAAC;IACvE,QAAKC,mBAAmB,GAAG/H,aAAa,CAACyD,MAAM,CAACsE,mBAAmB,CAAC;IACpE,QAAKC,oBAAoB,GAAG1H,cAAc,CACtCmD,MAAM,CAACmE,oBAAoB,IAAI,QAAKK,6BAA6B,CAAC;IACtE,QAAKC,oBAAoB,GAAG1H,cAAc,CAACiD,MAAM,CAACyE,oBAAoB,CAAC;IACvE,QAAKC,mBAAmB,GAAGnI,aAAa,CAACyD,MAAM,CAAC0E,mBAAmB,CAAC;IAAC;EACvE;EAAC;IAAA;IAAA,OAEQ,eAAM9D,UAAyB;MACtCA,UAAU,GAAGvD,kBAAkB,CAACuD,UAAU,CAAC;MAC3C,IAAIA,UAAU,CAACzC,MAAM,GAAG,IAAI,CAACO,IAAI,GAAG,CAAC,EAAE;QACrC,MAAM,IAAI9B,UAAU,CAChB,iCAA0B,IAAI,CAAC8B,IAAI,qCAChC,IAAI,CAACA,IAAI,GAAG,CAAC,iCAA8B,aAC3CoB,IAAI,CAACC,SAAS,CAACa,UAAU,CAAC,CAAE,CAAC;;MAEtC,IAAMC,WAAW,GACb,IAAI,CAACpD,UAAU,KAAK,eAAe,GAAG,CAAC,GAAGmD,UAAU,CAACzC,MAAM,GAAG,CAAC;MACnE,IAAIyC,UAAU,CAACC,WAAW,CAAC,IAAI,IAAI,IAAID,UAAU,CAACC,WAAW,CAAC,GAAG,CAAC,EAAE;QAClE,MAAM,IAAIjE,UAAU,CAChB,gFACakD,IAAI,CAACC,SAAS,CAACa,UAAU,CAACC,WAAW,CAAC,CAAC,CAAE,CAAC;;MAG7D,IAAMC,QAAQ,GAAGF,UAAU,CAACC,WAAW,CAAC;MACxC,IAAM8D,oBAAoB,GACtB,IAAI,CAACtF,UAAU,CAAC2B,MAAM,CAAC,CAACF,QAAQ,EAAE,IAAI,CAACoD,eAAe,CAAC,CAAC;MAC5D,IAAMU,oBAAoB,GAAG,EAAE;MAC/B,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACxD,IAAI,EAAE,EAAEwD,CAAC,EAAE;QAClC0C,oBAAoB,CAACxC,IAAI,CAAC,CAAC,CAAC;;MAE9BwC,oBAAoB,CAACxC,IAAI,CAACtB,QAAQ,GAAG,IAAI,CAACoD,eAAe,EAAE,IAAI,CAAC3D,OAAO,CAAC;MAExE,IAAMsE,SAAS,GAAG,IAAI;MACtB,IAAI,CAACC,eAAe,GAAG,IAAI,CAAC7D,SAAS,CACjC,kBAAkB,EAAE0D,oBAAoB,EAAE,SAAS,EACnD,IAAI,CAACR,oBAAoB,EAAE,IAAI,CAACE,oBAAoB,EAAEQ,SAAS,EAC/D,IAAI,CAACP,mBAAmB,CAAC;MAC7B,IAAI,CAACS,eAAe,GAAG,IAAI,CAAC9D,SAAS,CACjC,kBAAkB,EAAE2D,oBAAoB,EAAE,SAAS,EACnD,IAAI,CAACL,oBAAoB,EAAE,IAAI,CAACE,oBAAoB,EAAEI,SAAS,EAC/D,IAAI,CAACH,mBAAmB,CAAC;MAC7B,IAAI,IAAI,CAACpF,OAAO,EAAE;QAChB,IAAI,CAACxB,IAAI,GAAG,IAAI,CAACmD,SAAS,CACtB,MAAM,EAAE,CAAC,IAAI,CAACV,OAAO,CAAC,EAAE,SAAS,EAAE,IAAI,CAAChB,eAAe,EACvD,IAAI,CAACG,eAAe,EAAEmF,SAAS,EAAE,IAAI,CAACpF,cAAc,CAAC;OAC1D,MAAM;QACL,IAAI,CAAC3B,IAAI,GAAG,IAAI;;MAGlB,IAAI,CAACoD,SAAS,GACV,CAAC,IAAIzE,SAAS,CAAC;QAAC0E,IAAI,EAAE,IAAI,CAACzC,IAAI,GAAG,CAAC;QAAE0C,IAAI,sBAAIP,WAAW,EAAGC,QAAQ;MAAC,CAAC,CAAC,CAAC;MAC3E,IAAI,CAACO,KAAK,GAAG,IAAI;IACnB;EAAC;IAAA;IAAA,OAEQ,cAAKC,MAAuB,EAAEC,MAAc;MAAA;MACnD,OAAOxF,IAAI,CAAC,YAAK;QACfuF,MAAM,GAAGhE,mBAAmB,CAACgE,MAAM,CAAC;QAEpC,IAAI0D,MAAc;QAClB,IAAI,OAAI,CAACtG,IAAI,KAAK,CAAC,EAAE;UACnB,MAAM,IAAI/B,mBAAmB,CACzB,kDAAkD,CAAC;SACxD,MAAM,IAAI,OAAI,CAAC+B,IAAI,KAAK,CAAC,EAAE;UAC1B,IAAI,OAAI,CAACjB,UAAU,KAAK,eAAe,EAAE;YACvC6D,MAAM,GAAGzF,GAAG,CAAC6B,SAAS,CAAC4D,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE;;;UAGjD0D,MAAM,GAAGnJ,GAAG,CAACoJ,eAAe,CACxB3D,MAAkB,EAAE,OAAI,CAACwD,eAAe,CAACpD,IAAI,EAAc,EAC3D,OAAI,CAACqD,eAAe,CAACrD,IAAI,EAAc,EACvC,OAAI,CAAC3D,OAA2B,EAAE,OAAI,CAACC,OAA2B,EAClE,OAAI,CAACC,YAAgC,EAAE,MAAM,CAAC;;QAGpD,IAAI,OAAI,CAACqB,OAAO,EAAE;UAChB0F,MAAM,GAAG7I,CAAC,CAACmC,OAAO,CAAC0G,MAAM,EAAE,OAAI,CAAClH,IAAI,CAAC4D,IAAI,EAAE,EAAE,OAAI,CAACjE,UAAU,CAAC;;QAE/D,IAAI,OAAI,CAACgB,UAAU,IAAI,IAAI,EAAE;UAC3BuG,MAAM,GAAG,OAAI,CAACvG,UAAU,CAACqD,KAAK,CAACkD,MAAM,CAAC;;QAGxC,IAAI,OAAI,CAACvH,UAAU,KAAK,eAAe,EAAE;UACvCuH,MAAM,GAAGnJ,GAAG,CAAC6B,SAAS,CAACsH,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE;;;QAEjD,OAAOA,MAAM;MACf,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMhF,MAAM,+EAAoB;MAChC,OAAOA,MAAM,CAAC,MAAM,CAAC;MACrB,OAAOA,MAAM,CAAC,mBAAmB,CAAC;MAClC,OAAOA,MAAM,CAAC,mBAAmB,CAAC;MAClC,OAAOA,MAAM,CAAC,kBAAkB,CAAC;MACjCA,MAAM,CAAC,sBAAsB,CAAC,GAC1BlD,oBAAoB,CAAC,IAAI,CAACqH,oBAAoB,CAAC;MACnDnE,MAAM,CAAC,sBAAsB,CAAC,GAC1BlD,oBAAoB,CAAC,IAAI,CAACyH,oBAAoB,CAAC;MACnDvE,MAAM,CAAC,sBAAsB,CAAC,GAC1BhD,oBAAoB,CAAC,IAAI,CAACqH,oBAAoB,CAAC;MACnDrE,MAAM,CAAC,sBAAsB,CAAC,GAC1BhD,oBAAoB,CAAC,IAAI,CAACyH,oBAAoB,CAAC;MACnDzE,MAAM,CAAC,qBAAqB,CAAC,GACzBxD,mBAAmB,CAAC,IAAI,CAAC8H,mBAAmB,CAAC;MACjDtE,MAAM,CAAC,qBAAqB,CAAC,GACzBxD,mBAAmB,CAAC,IAAI,CAACkI,mBAAmB,CAAC;MACjD,OAAO1E,MAAM;IACf;EAAC;EAAA;AAAA,EA5JgCM,IAAI;AACrC;AACO2D,uBAAS,GAAG,eAAe;AA6JpC,WAAaiB,eAAgB;EAAA;EAAA;EAG3B,yBAAYhG,IAA6B;IAAA;IAAA,0BACjC,CAAC,EAAEA,IAAI;EACf;EAAC;AAAA,EALkC+E,aAAa;AAChD;AACgBiB,yBAAS,GAAG,iBAAiB;AAK/CpJ,aAAa,CAACyG,aAAa,CAAC2C,eAAe,CAAC;AAE5C,WAAaC,MAAO;EAAA;EAAA;EAGlB,gBAAYjG,IAAmB;IAAA;IAAA;IAC7B,6BAAM,CAAC,EAAEA,IAAI;IACbiG,MAAM,CAAChG,UAAU,CAACD,IAAI,CAAC;IACvB,QAAKgC,SAAS,GAAG,CAAC;MAACC,IAAI,EAAE;IAAC,CAAC,CAAC;IAAC;EAC/B;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMnB,MAAM,wEAAoB;MAChC,OAAOA,MAAM,CAAC,MAAM,CAAC;MACrB,OAAOA,MAAM,CAAC,YAAY,CAAC;MAC3B,OAAOA,MAAM;IACf;EAAC;IAAA;IAAA,OAES,oBAA2Bd,IAAmB;MACtD;MACA,IAAI,OAAOA,IAAI,CAACG,UAAU,KAAK,QAAQ,IACnC,CAACjC,aAAa,CAACiD,uBAAuB,CAClCnB,IAAI,CAACG,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;QACxC,MAAM,IAAIzC,UAAU,CAChB,qGAC0BkD,IAAI,CAACC,SAAS,CAACb,IAAI,CAACG,UAAU,CAAC,MAAG,CAAC;;IAErE;EAAC;EAAA;AAAA,EAzByBiB,IAAI;AAC9B;AACO6E,gBAAS,GAAG,QAAQ;AAyB7BrJ,aAAa,CAACyG,aAAa,CAAC4C,MAAM,CAAC;AAgCnC,WAAaC,UAAW;EAAA;EAAA;EAMtB,oBAAYlG,IAAyB;IAAA;IAAA;IACnC,8BAAMA,IAAI;IACV,IAAI,OAAOA,IAAI,CAACmG,QAAQ,KAAK,QAAQ,EAAE;MACrC,QAAKA,QAAQ,GACT,CAAC,CAACnG,IAAI,CAACmG,QAAQ,EAAEnG,IAAI,CAACmG,QAAQ,CAAC,EAAE,CAACnG,IAAI,CAACmG,QAAQ,EAAEnG,IAAI,CAACmG,QAAQ,CAAC,CAAC;KACrE,MAAM,IAAI,OAAOnG,IAAI,CAACmG,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC/C,QAAKA,QAAQ,GAAG,CACd,CAACnG,IAAI,CAACmG,QAAQ,CAAC,CAAC,CAAC,EAAEnG,IAAI,CAACmG,QAAQ,CAAC,CAAC,CAAC,CAAC,EACpC,CAACnG,IAAI,CAACmG,QAAQ,CAAC,CAAC,CAAW,EAAEnG,IAAI,CAACmG,QAAQ,CAAC,CAAC,CAAW,CAAC,CACzD;KACF,MAAM;MACL,QAAKA,QAAQ,GAAGnG,IAAI,CAACmG,QAAgD;;IAEvE,QAAK5H,UAAU,GACXyB,IAAI,CAACzB,UAAU,KAAK6H,SAAS,GAAG,cAAc,GAAGpG,IAAI,CAACzB,UAAU;IACpE,QAAKyD,SAAS,GAAG,CAAC;MAACC,IAAI,EAAE;IAAC,CAAC,CAAC;IAAC;EAC/B;EAAC;IAAA;IAAA,OAEQ,4BAAmBP,UAAiB;MAC3C,IAAI,IAAI,CAACnD,UAAU,KAAK,eAAe,EAAE;QACvC,OAAO,CACLmD,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAC5BA,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAACyE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACzDzE,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAACyE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1D;OACF,MAAM;QACL,OAAO,CACLzE,UAAU,CAAC,CAAC,CAAC,EACbA,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAACyE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACzDzE,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAACyE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEzE,UAAU,CAAC,CAAC,CAAC,CACzE;;IAEL;EAAC;IAAA;IAAA,OAEQ,cAAKU,MAAuB,EAAEC,MAAc;MAAA;MACnD,OAAOxF,IAAI,CAAC,YAAK;QACfuF,MAAM,GAAGhE,mBAAmB,CAACgE,MAAM,CAAC;QAEpC,IAAI,OAAI,CAAC7D,UAAU,KAAK,cAAc,EAAE;UACtC,IAAM8H,OAAO,GAAGpJ,CAAC,CAACqJ,cAAc,CAC5BlE,MAAM,EAAE,OAAI,CAAC+D,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC3B/D,MAAM,CAACpD,KAAK,CAAC,CAAC,CAAC,GAAG,OAAI,CAACmH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;UACnE,OAAOlJ,CAAC,CAACqJ,cAAc,CACnBD,OAAO,EAAE,OAAI,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5B/D,MAAM,CAACpD,KAAK,CAAC,CAAC,CAAC,GAAG,OAAI,CAACmH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACpE,MAAM;UACL,IAAME,QAAO,GAAGpJ,CAAC,CAACqJ,cAAc,CAC5BlE,MAAM,EAAE,OAAI,CAAC+D,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC3B/D,MAAM,CAACpD,KAAK,CAAC,CAAC,CAAC,GAAG,OAAI,CAACmH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;UACnE,OAAOlJ,CAAC,CAACqJ,cAAc,CACnBD,QAAO,EAAE,OAAI,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC5B/D,MAAM,CAACpD,KAAK,CAAC,CAAC,CAAC,GAAG,OAAI,CAACmH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAI,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEvE,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMrF,MAAM,GAAG;QAACqF,QAAQ,EAAE,IAAI,CAACA,QAAQ;QAAE5H,UAAU,EAAE,IAAI,CAACA;MAAU,CAAC;MACrE,IAAMwC,UAAU,4EAAoB;MACpCC,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;MACjC,OAAOD,MAAM;IACf;EAAC;EAAA;AAAA,EAnE6BtD,KAAK;AACnC;AACO0I,oBAAS,GAAG,YAAY;AAmEjCtJ,aAAa,CAACyG,aAAa,CAAC6C,UAAU,CAAC;AA6BvC,WAAaK,YAAa;EAAA;EAAA;EAQxB,sBAAYvG,IAA2B;IAAA;IAAA;IACrC,8BAAMA,IAAI;IANO,oBAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAOtC,QAAKgC,SAAS,GAAG,CAAC;MAACC,IAAI,EAAE;IAAC,CAAC,CAAC;IAC5B,QAAKuE,IAAI,GAAGxG,IAAI,CAACwG,IAAI,IAAI,IAAI,GAAG,QAAKC,YAAY,GAAGzG,IAAI,CAACwG,IAAI;IAC7D,QAAKjI,UAAU,GACXyB,IAAI,CAACzB,UAAU,IAAI,IAAI,GAAG,cAAc,GAAGyB,IAAI,CAACzB,UAAU;IAC9DrB,eAAe,CAAC,QAAKqB,UAAU,CAAC;IAChC,QAAKmI,aAAa,GACd1G,IAAI,CAAC0G,aAAa,IAAI,IAAI,GAAG,SAAS,GAAG1G,IAAI,CAAC0G,aAAa;IAC/DvJ,wBAAwB,CAAC,QAAKuJ,aAAa,CAAC;IAAC;EAC/C;EAAC;IAAA;IAAA,OAEQ,4BAAmBhF,UAAiB;MAC3C,IAAI,IAAI,CAACnD,UAAU,KAAK,eAAe,EAAE;QACvC,IAAMqF,MAAM,GACRlC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC8E,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;QAC/D,IAAMmC,KAAK,GAAGnC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC8E,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;QACzE,OAAO,CAACA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEkC,MAAM,EAAEC,KAAK,CAAC;OACrD,MAAM;QACL,IAAMD,OAAM,GACRlC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC8E,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;QAC/D,IAAMmC,MAAK,GAAGnC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC8E,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;QACzE,OAAO,CAACA,UAAU,CAAC,CAAC,CAAC,EAAEkC,OAAM,EAAEC,MAAK,EAAEnC,UAAU,CAAC,CAAC,CAAC,CAAC;;IAExD;EAAC;IAAA;IAAA,OAEQ,cAAKU,MAAuB,EAAEC,MAAc;MAAA;MACnD,OAAO1F,GAAG,CAACE,IAAI,CAAC,YAAK;QACnB,IAAI2G,KAAK,GAAGpF,mBAAmB,CAACgE,MAAM,CAAa;QACnD,IAAMV,UAAU,GAAG8B,KAAK,CAACxE,KAAK;QAE9B,IAAI,OAAI,CAACT,UAAU,KAAK,eAAe,EAAE;UACvCiF,KAAK,GAAG7G,GAAG,CAAC6B,SAAS,CAACgF,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;UAC1C,IAAMI,MAAM,GAAG,OAAI,CAAC4C,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;UAC3C,IAAMmC,KAAK,GAAG,OAAI,CAAC2C,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;UAE1C,IAAMiF,OAAO,GAAG,OAAI,CAACD,aAAa,KAAK,SAAS,GAC5C/J,GAAG,CAACiK,KAAK,CAACC,qBAAqB,CAACrD,KAAK,EAAE,CAACI,MAAM,EAAEC,KAAK,CAAC,CAAC,GACvDlH,GAAG,CAACiK,KAAK,CAACE,cAAc,CAACtD,KAAK,EAAE,CAACI,MAAM,EAAEC,KAAK,CAAC,CAAC;UACpD,OAAOlH,GAAG,CAAC6B,SAAS,CAACmI,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAC5C,MAAM;UACL,IAAM/C,QAAM,GAAG,OAAI,CAAC4C,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;UAC3C,IAAMmC,OAAK,GAAG,OAAI,CAAC2C,IAAI,CAAC,CAAC,CAAC,GAAG9E,UAAU,CAAC,CAAC,CAAC;UAC1C,OAAO,OAAI,CAACgF,aAAa,KAAK,SAAS,GACnC/J,GAAG,CAACiK,KAAK,CAACC,qBAAqB,CAACrD,KAAK,EAAE,CAACI,QAAM,EAAEC,OAAK,CAAC,CAAC,GACvDlH,GAAG,CAACiK,KAAK,CAACE,cAAc,CAACtD,KAAK,EAAE,CAACI,QAAM,EAAEC,OAAK,CAAC,CAAC;;MAExD,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAM/C,MAAM,GAAG;QACX0F,IAAI,EAAE,IAAI,CAACA,IAAI;QACfjI,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BmI,aAAa,EAAE,IAAI,CAACA;OACvB;MACD,IAAM3F,UAAU,8EAAoB;MACpCC,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;MACjC,OAAOD,MAAM;IACf;EAAC;EAAA;AAAA,EAnE+BtD,KAAK;AACrC;AACO+I,sBAAS,GAAG,cAAc;AAmEnC3J,aAAa,CAACyG,aAAa,CAACkD,YAAY,CAAC","names":["tfc","serialization","tidy","getActivation","serializeActivation","imageDataFormat","K","checkDataFormat","checkInterpolationFormat","checkPaddingMode","getConstraint","serializeConstraint","InputSpec","Layer","NotImplementedError","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","convOutputLength","deconvLength","normalizeArray","generic_utils","getExactlyOneShape","getExactlyOneTensor","preprocessConv2DInput","x","dataFormat","transpose","preprocessConv3DInput","conv1dWithBias","kernel","bias","strides","padding","dilationRate","shape","length","y","conv1d","biasAdd","conv2d","conv2dWithBiasActivation","activation","rank","fused","filter","pad","dilations","conv3d","conv3dWithBias","BaseConv","args","verifyArgs","assertPositiveInteger","kernelSize","useBias","biasInitializer","DEFAULT_BIAS_INITIALIZER","biasConstraint","biasRegularizer","activityRegularizer","Array","isArray","JSON","stringify","config","baseConfig","Object","assign","assert","checkArrayTypeAndLength","Conv","filters","kernelInitializer","DEFAULT_KERNEL_INITIALIZER","kernelConstraint","kernelRegularizer","inputShape","channelAxis","inputDim","kernelShape","concat","addWeight","inputSpec","ndim","axes","built","inputs","kwargs","outputs","biasValue","read","fusedActivationName","mapActivationToFusedKernel","getClassName","apply","newSpace","space","slice","i","newDim","push","outputShape","Conv2D","registerClass","Conv3D","Conv2DTranspose","input","batchSize","hAxis","wAxis","height","width","kernelH","kernelW","strideH","strideW","outHeight","outWidth","conv2dTranspose","heightAxis","widthAxis","Conv3DTranspose","dAxis","depth","kernelD","strideD","outDepth","conv3dTranspose","depthAxis","SeparableConv","depthMultiplier","depthwiseInitializer","DEFAULT_DEPTHWISE_INITIALIZER","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","DEFAULT_POINTWISE_INITIALIZER","pointwiseRegularizer","pointwiseConstraint","depthwiseKernelShape","pointwiseKernelShape","trainable","depthwiseKernel","pointwiseKernel","output","separableConv2d","SeparableConv2D","Conv1D","Cropping2D","cropping","undefined","hSliced","sliceAlongAxis","UpSampling2D","size","DEFAULT_SIZE","interpolation","resized","image","resizeNearestNeighbor","resizeBilinear"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\convolutional.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {fused, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkInterpolationFormat, checkPaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, InterpolationFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat, dilationRate?: [number, number],\n    activation: fused.Activation = null): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y as Tensor3D | Tensor4D,\n      filter: kernel as Tensor4D,\n      strides: strides as [number, number],\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(\n    x: Tensor, kernel: Tensor, strides = [1, 1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv3dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv3d(\n        y as Tensor4D | tfc.Tensor<tfc.Rank.R5>,\n        kernel as tfc.Tensor<tfc.Rank.R5>, strides as [number, number, number],\n        padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport declare interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number]|[number, number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D,\n * Conv3D).\n */\nexport declare interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1, 2, or 3 (${\n              this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate =\n            [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(\n            `dilationRate must be a number or array of three numbers for 3D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1, 2, or 3, but received ${\n              JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(\n          this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number],\n            fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides[0],\n              this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number]);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number, number]);\n        } else {\n          throw new NotImplementedError(\n              'convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\nexport class Conv2D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv2D);\n\nexport class Conv3D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv3D';\n  constructor(args: ConvLayerArgs) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) &&\n            (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(\n            `Conv3D expects config.kernelSize to be number or` +\n            ` [number, number, number], but received ${\n                JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\nserialization.registerClass(Conv3D);\n\nexport class Conv2DTranspose extends Conv2D {\n  /** @nocollapse */\n  static override className = 'Conv2DTranspose';\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport class Conv3DTranspose extends Conv3D {\n  /** @nocollapse */\n  static override className = 'Conv3DTranspose';\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 5})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv3DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError(\n          'Input should have rank 5; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 5, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy<tfc.Tensor5D>(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 5) {\n        throw new ValueError(\n            `Conv3DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      let dAxis: number;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2];\n\n      // Infer the dynamic output shape.\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Same as `conv2dTranspose`. We always assumes channelsLast.\n      const outputShape: [number, number, number, number, number] =\n          [batchSize, outDepth, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n      let outputs = tfc.conv3dTranspose(\n          input as Tensor5D, this.kernel.read() as Tensor5D, outputShape,\n          this.strides as [number, number, number],\n          this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor5D;\n      }\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs) as Tensor5D;\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let depthAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] =\n        deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv3DTranspose);\n\nexport declare interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\nexport class SeparableConv extends Conv {\n  /** @nocollapse */\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\nexport class SeparableConv2D extends SeparableConv {\n  /** @nocollapse */\n  static override className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\nexport class Conv1D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static override verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport declare interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 lists of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   * `channels_first` corresponds to inputs with shape\n   *   `(batch, channels, ...)`\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class Cropping2D extends Layer {\n  /** @nocollapse */\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    } else {\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    }\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport declare interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n  /**\n   * The interpolation mechanism, one of `\"nearest\"` or `\"bilinear\"`, default\n   * to `\"nearest\"`.\n   */\n  interpolation?: InterpolationFormat;\n}\n\nexport class UpSampling2D extends Layer {\n  /** @nocollapse */\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n  protected readonly interpolation: InterpolationFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation =\n        args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  override computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n\n        const resized = this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n        size: this.size,\n        dataFormat: this.dataFormat,\n        interpolation: this.interpolation\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}