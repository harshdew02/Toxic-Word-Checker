{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var params = inputs.params,\n    indices = inputs.indices;\n  var indicesShape = indices.shape;\n  var sliceRank = indicesShape[indicesShape.length - 1];\n  var paramsSize = util.sizeFromShape(params.shape);\n  var _backend_util$prepare = backend_util.prepareAndValidate(params, indices),\n    _backend_util$prepare2 = _slicedToArray(_backend_util$prepare, 4),\n    resultShape = _backend_util$prepare2[0],\n    numSlices = _backend_util$prepare2[1],\n    sliceSize = _backend_util$prepare2[2],\n    strides = _backend_util$prepare2[3];\n  var flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  var flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend: backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {\n    var indicesData = backend.readSync(indices.dataId);\n    var paramsBuf = backend.bufferSync(params);\n    var outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  var program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], params.shape);\n  var res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n  var reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend: backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport var gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd\n};","map":{"version":3,"mappings":"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","names":["backend_util","GatherNd","util","GatherNDProgram","gatherNdImplCPU","reshape","gatherNd","args","inputs","backend","params","indices","indicesShape","shape","sliceRank","length","paramsSize","sizeFromShape","prepareAndValidate","resultShape","numSlices","sliceSize","strides","flattenIndices","x","attrs","flattenX","shouldExecuteOnCPU","dtype","indicesData","readSync","dataId","paramsBuf","bufferSync","outValue","makeTensorInfo","values","program","res","runWebGLProgram","reshaped","disposeIntermediateTensorInfo","gatherNdConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\GatherNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}