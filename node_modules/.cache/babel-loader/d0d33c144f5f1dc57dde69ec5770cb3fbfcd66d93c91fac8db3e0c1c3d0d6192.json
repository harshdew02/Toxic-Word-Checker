{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x,\n    filter = inputs.filter;\n  var strides = attrs.strides,\n    pad = attrs.pad,\n    dataFormat = attrs.dataFormat,\n    dilations = attrs.dilations,\n    dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([x, filter], 'conv2d');\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var padLeft = convInfo.padInfo.left;\n  var padTop = convInfo.padInfo.top;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  var y = new TensorBuffer(convInfo.outShape, x.dtype);\n  var xStrides = util.computeStrides(x.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var xBatchStride = xStrides[0];\n  var xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  var xColStride = isChannelsLast ? xStrides[2] : 1;\n  var xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  var yBatchStride = y.strides[0];\n  var yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  var yColStride = isChannelsLast ? y.strides[2] : 1;\n  var yChannelStride = isChannelsLast ? 1 : y.strides[1];\n  var xVals = backend.data.get(x.dataId).values;\n  var wVals = backend.data.get(filter.dataId).values;\n  var yVals = y.values;\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    var xOffset1 = b * xBatchStride;\n    var yOffset1 = b * yBatchStride;\n    for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n      var yOffset2 = yOffset1 + yR * yRowStride;\n      var xRCorner = yR * convInfo.strideHeight - padTop;\n      for (var wR = 0; wR < filterHeight; ++wR) {\n        var xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        var wOffset1 = wR * filterStrides[0];\n        var xOffset2 = xOffset1 + xR * xRowStride;\n        for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n          var yOffset3 = yOffset2 + yC * yColStride;\n          var xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (var wC = 0; wC < filterWidth; ++wC) {\n            var xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            var wOffset2 = wOffset1 + wC * filterStrides[1];\n            var xOffset3 = xOffset2 + xC * xColStride;\n            var wOffset3 = wOffset2;\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              var xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport var conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D\n};","map":{"version":3,"mappings":"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","names":["backend_util","Conv2D","TensorBuffer","util","assertNotComplex","conv2D","args","inputs","backend","attrs","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","filterHeight","filterWidth","dilationHeight","dilationWidth","padLeft","padInfo","left","padTop","top","isChannelsLast","y","outShape","dtype","xStrides","computeStrides","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","xVals","data","get","dataId","values","wVals","yVals","b","batchSize","xOffset1","yOffset1","yR","outHeight","yOffset2","xRCorner","strideHeight","wR","xR","inHeight","wOffset1","xOffset2","yC","outWidth","yOffset3","xCCorner","strideWidth","wC","xC","inWidth","wOffset2","xOffset3","wOffset3","d1","inChannels","xVal","d2","outChannels","makeTensorInfo","conv2DConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Conv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}