{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var BatchNormProgram = /*#__PURE__*/_createClass(function BatchNormProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n  _classCallCheck(this, BatchNormProgram);\n  this.outputShape = [];\n  this.variableNames = ['x', 'mean', 'variance'];\n  backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n  backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n  var offsetSnippet = '0.0';\n  if (offsetShape != null) {\n    backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n    this.variableNames.push('offset');\n    offsetSnippet = 'getOffsetAtOutCoords()';\n  }\n  var scaleSnippet = '1.0';\n  if (scaleShape != null) {\n    backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n    this.variableNames.push('scale');\n    scaleSnippet = 'getScaleAtOutCoords()';\n  }\n  this.outputShape = xShape;\n  this.userCode = \"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \".concat(offsetSnippet, \";\\n        float scale = \").concat(scaleSnippet, \";\\n        float inv = scale * inversesqrt(variance + float(\").concat(varianceEpsilon, \"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAAO,uBAAuB;AAGlD,WAAaC,gBAAgB,6BAK3B,0BACIC,MAAgB,EAAEC,SAAmB,EAAEC,aAAuB,EAC9DC,WAA0B,EAAEC,UAAyB,EACrDC,eAAuB;EAAA;EAN3B,gBAAW,GAAa,EAAE;EAOxB,IAAI,CAACC,aAAa,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,CAAC;EAC9CR,YAAY,CAACS,0BAA0B,CAACP,MAAM,EAAEC,SAAS,CAAC;EAC1DH,YAAY,CAACS,0BAA0B,CAACP,MAAM,EAAEE,aAAa,CAAC;EAE9D,IAAIM,aAAa,GAAG,KAAK;EACzB,IAAIL,WAAW,IAAI,IAAI,EAAE;IACvBL,YAAY,CAACS,0BAA0B,CAACP,MAAM,EAAEG,WAAW,CAAC;IAC5D,IAAI,CAACG,aAAa,CAACG,IAAI,CAAC,QAAQ,CAAC;IACjCD,aAAa,GAAG,wBAAwB;;EAG1C,IAAIE,YAAY,GAAG,KAAK;EACxB,IAAIN,UAAU,IAAI,IAAI,EAAE;IACtBN,YAAY,CAACS,0BAA0B,CAACP,MAAM,EAAEI,UAAU,CAAC;IAC3D,IAAI,CAACE,aAAa,CAACG,IAAI,CAAC,OAAO,CAAC;IAChCC,YAAY,GAAG,uBAAuB;;EAGxC,IAAI,CAACC,WAAW,GAAGX,MAAM;EACzB,IAAI,CAACY,QAAQ,iMAKQJ,aAAa,sCACdE,YAAY,yEACuBL,eAAe,2FAGrE;AACH,CAAC","names":["backend_util","BatchNormProgram","xShape","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","variableNames","assertAndGetBroadcastShape","offsetSnippet","push","scaleSnippet","outputShape","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\batchnorm_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}