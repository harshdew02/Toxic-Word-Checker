{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x,\n    filter = inputs.filter,\n    bias = inputs.bias,\n    preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n    pad = attrs.pad,\n    dataFormat = attrs.dataFormat,\n    dilations = attrs.dilations,\n    dimRoundingMode = attrs.dimRoundingMode,\n    activation = attrs.activation,\n    leakyreluAlpha = attrs.leakyreluAlpha;\n  var result = depthwiseConv2dNative({\n    inputs: {\n      x: x,\n      filter: filter\n    },\n    backend: backend,\n    attrs: {\n      strides: strides,\n      pad: pad,\n      dataFormat: dataFormat,\n      dilations: dilations,\n      dimRoundingMode: dimRoundingMode\n    }\n  });\n  if (bias) {\n    var oldResult = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend: backend\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    var _oldResult = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(_oldResult);\n  }\n  return result;\n}\nexport var fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,oBAAoB,QAAoG,uBAAuB;AAGvJ,SAAQC,eAAe,QAAO,sBAAsB;AACpD,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,qBAAqB,QAAO,yBAAyB;AAE7D,OAAM,SAAUC,oBAAoB,CAACC,IAIpC;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,CAAC,GAA0CH,MAAM,CAAjDG,CAAC;IAAEC,MAAM,GAAkCJ,MAAM,CAA9CI,MAAM;IAAEC,IAAI,GAA4BL,MAAM,CAAtCK,IAAI;IAAEC,sBAAsB,GAAIN,MAAM,CAAhCM,sBAAsB;EAC9C,IACEC,OAAO,GAOLL,KAAK,CAPPK,OAAO;IACPC,GAAG,GAMDN,KAAK,CANPM,GAAG;IACHC,UAAU,GAKRP,KAAK,CALPO,UAAU;IACVC,SAAS,GAIPR,KAAK,CAJPQ,SAAS;IACTC,eAAe,GAGbT,KAAK,CAHPS,eAAe;IACfC,UAAU,GAERV,KAAK,CAFPU,UAAU;IACVC,cAAc,GACZX,KAAK,CADPW,cAAc;EAGhB,IAAIC,MAAM,GAAGjB,qBAAqB,CAAC;IACjCG,MAAM,EAAE;MAACG,CAAC,EAADA,CAAC;MAAEC,MAAM,EAANA;IAAM,CAAC;IACnBH,OAAO,EAAPA,OAAO;IACPC,KAAK,EAAE;MAACK,OAAO,EAAPA,OAAO;MAAEC,GAAG,EAAHA,GAAG;MAAEC,UAAU,EAAVA,UAAU;MAAEC,SAAS,EAATA,SAAS;MAAEC,eAAe,EAAfA;IAAe;GAC7D,CAAC;EAEF,IAAIN,IAAI,EAAE;IACR,IAAMU,SAAS,GAAGD,MAAM;IACxBA,MAAM,GAAGlB,GAAG,CAAC;MAACI,MAAM,EAAE;QAACgB,CAAC,EAAEF,MAAM;QAAEG,CAAC,EAAEZ;MAAI,CAAC;MAAEJ,OAAO,EAAPA;IAAO,CAAC,CAAe;IACnEA,OAAO,CAACiB,6BAA6B,CAACH,SAAS,CAAC;;EAElD,IAAIH,UAAU,EAAE;IACd,IAAMG,UAAS,GAAGD,MAAM;IACxBA,MAAM,GAAGnB,eAAe,CACpBM,OAAO,EAAEa,MAAM,EAAEF,UAAU,EAAEN,sBAAsB,EAAEO,cAAc,CAAC;IACxEZ,OAAO,CAACiB,6BAA6B,CAACH,UAAS,CAAC;;EAGlD,OAAOD,MAAM;AACf;AAEA,OAAO,IAAMK,0BAA0B,GAAiB;EACtDC,UAAU,EAAE1B,oBAAoB;EAChC2B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAExB;CACb","names":["FusedDepthwiseConv2D","applyActivation","add","depthwiseConv2dNative","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","result","oldResult","a","b","disposeIntermediateTensorInfo","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\FusedDepthwiseConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}