{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'LowerBound':\n      {\n        var sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        var values = getParamValue('values', node, tensorMap, context);\n        return [ops.lowerBound(sortedSequence, values)];\n      }\n    case 'TopKV2':\n      {\n        var x = getParamValue('x', node, tensorMap, context);\n        var k = getParamValue('k', node, tensorMap, context);\n        var sorted = getParamValue('sorted', node, tensorMap, context);\n        var result = ops.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n    case 'UpperBound':\n      {\n        var _sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        var _values = getParamValue('values', node, tensorMap, context);\n        return [ops.upperBound(_sortedSequence, _values)];\n      }\n    case 'Unique':\n      {\n        var _x = getParamValue('x', node, tensorMap, context);\n        var _result = ops.unique(_x);\n        return [_result.values, _result.indices];\n      }\n    case 'UniqueV2':\n      {\n        var _x2 = getParamValue('x', node, tensorMap, context);\n        var axis = getParamValue('axis', node, tensorMap, context);\n        var _result2 = ops.unique(_x2, axis);\n        return [_result2.values, _result2.indices];\n      }\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'evaluation';","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA;AACA,OAAO,KAAKA,KAAK,MAAM,kDAAkD;AAMzE,SAAQC,aAAa,QAAO,SAAS;AAErC,OAAO,IAAMC,SAAS,GAClB,SADSA,SAAS,CACjBC,IAAU,EAAEC,SAA0B,EAAEC,OAAyB,EAEnD;EAAA,IADdC,GAAG,uEAAGN,KAAK;EAEN,QAAQG,IAAI,CAACI,EAAE;IACb,KAAK,YAAY;MAAE;QACjB,IAAMC,cAAc,GAChBP,aAAa,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAClD;QACV,IAAMI,MAAM,GACRR,aAAa,CAAC,QAAQ,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAC/D,OAAO,CAACC,GAAG,CAACI,UAAU,CAACF,cAAc,EAAEC,MAAM,CAAC,CAAC;;IAEjD,KAAK,QAAQ;MAAE;QACb,IAAME,CAAC,GAAGV,aAAa,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAChE,IAAMO,CAAC,GAAGX,aAAa,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAChE,IAAMQ,MAAM,GACRZ,aAAa,CAAC,QAAQ,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAY;QAChE,IAAMS,MAAM,GAAGR,GAAG,CAACS,IAAI,CAACJ,CAAC,EAAEC,CAAC,EAAEC,MAAM,CAAC;QACrC,OAAO,CAACC,MAAM,CAACL,MAAM,EAAEK,MAAM,CAACE,OAAO,CAAC;;IAExC,KAAK,YAAY;MAAE;QACjB,IAAMR,eAAc,GAChBP,aAAa,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAClD;QACV,IAAMI,OAAM,GACRR,aAAa,CAAC,QAAQ,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAC/D,OAAO,CAACC,GAAG,CAACW,UAAU,CAACT,eAAc,EAAEC,OAAM,CAAC,CAAC;;IAEjD,KAAK,QAAQ;MAAE;QACb,IAAME,EAAC,GAAGV,aAAa,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAChE,IAAMS,OAAM,GAAGR,GAAG,CAACY,MAAM,CAACP,EAAC,CAAC;QAC5B,OAAO,CAACG,OAAM,CAACL,MAAM,EAAEK,OAAM,CAACE,OAAO,CAAC;;IAExC,KAAK,UAAU;MAAE;QACf,IAAML,GAAC,GAAGV,aAAa,CAAC,GAAG,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAChE,IAAMc,IAAI,GACNlB,aAAa,CAAC,MAAM,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAC7D,IAAMS,QAAM,GAAGR,GAAG,CAACY,MAAM,CAACP,GAAC,EAAEQ,IAAI,CAAC;QAClC,OAAO,CAACL,QAAM,CAACL,MAAM,EAAEK,QAAM,CAACE,OAAO,CAAC;;IAExC;MACE,MAAMI,SAAS,qBAAcjB,IAAI,CAACI,EAAE,yBAAsB;EAAC;AAEjE,CAAC;AAET,OAAO,IAAMc,QAAQ,GAAG,YAAY","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","ops","op","sortedSequence","values","lowerBound","x","k","sorted","result","topk","indices","upperBound","unique","axis","TypeError","CATEGORY"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\evaluation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps):\n        Tensor[] => {\n          switch (node.op) {\n            case 'LowerBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.lowerBound(sortedSequence, values)];\n            }\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = ops.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'UpperBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.upperBound(sortedSequence, values)];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = ops.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = ops.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}