{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var AddNPackedProgram = /*#__PURE__*/_createClass(function AddNPackedProgram(outputShape, shapes) {\n  _classCallCheck(this, AddNPackedProgram);\n  this.outputShape = [];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = outputShape;\n  this.variableNames = shapes.map(function (_, i) {\n    return \"T\".concat(i);\n  });\n  var snippets = [];\n  // Get target elements from every input tensor.\n  this.variableNames.forEach(function (variable) {\n    snippets.push(\"vec4 v\".concat(variable, \" = get\").concat(variable, \"AtOutCoords();\"));\n  });\n  // Calculate the sum of all elements.\n  var operation = this.variableNames.map(function (variable) {\n    return \"v\".concat(variable);\n  }).join(' + ');\n  this.userCode = \"\\n      void main() {\\n        \".concat(snippets.join('\\n        '), \"\\n\\n        vec4 result = \").concat(operation, \";\\n        setOutput(result);\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAmBA,WAAaA,iBAAiB,6BAO5B,2BAAYC,WAAqB,EAAEC,MAAkB;EAAA;EALrD,gBAAW,GAAa,EAAE;EAE1B,iBAAY,GAAG,IAAI;EACnB,iBAAY,GAAG,IAAI;EAGjB,IAAI,CAACD,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACE,aAAa,GAAGD,MAAM,CAACE,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,kBAASA,CAAC;EAAA,CAAE,CAAC;EAElD,IAAMC,QAAQ,GAAa,EAAE;EAC7B;EACA,IAAI,CAACJ,aAAa,CAACK,OAAO,CAAC,kBAAQ,EAAG;IACpCD,QAAQ,CAACE,IAAI,iBAAUC,QAAQ,mBAASA,QAAQ,oBAAiB;EACnE,CAAC,CAAC;EAEF;EACA,IAAMC,SAAS,GAAG,IAAI,CAACR,aAAa,CACbC,GAAG,CAAC,kBAAQ,EAAG;IACd,kBAAWM,QAAQ;EACrB,CAAC,CAAC,CACDE,IAAI,CAAC,KAAK,CAAC;EAElC,IAAI,CAACC,QAAQ,4CAEPN,QAAQ,CAACK,IAAI,CAAC,YAAY,CAAC,uCAEbD,SAAS,iDAG5B;AACH,CAAC","names":["AddNPackedProgram","outputShape","shapes","variableNames","map","_","i","snippets","forEach","push","variable","operation","join","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\addn_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}