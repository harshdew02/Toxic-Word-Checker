{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n    end = attrs.end,\n    strides = attrs.strides,\n    beginMask = attrs.beginMask,\n    endMask = attrs.endMask,\n    ellipsisMask = attrs.ellipsisMask,\n    newAxisMask = attrs.newAxisMask,\n    shrinkAxisMask = attrs.shrinkAxisMask;\n  assertNotComplex(x, 'stridedSlice');\n  var _slice_util$sliceInfo = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask),\n    finalShapeSparse = _slice_util$sliceInfo.finalShapeSparse,\n    finalShape = _slice_util$sliceInfo.finalShape,\n    isIdentity = _slice_util$sliceInfo.isIdentity,\n    sliceDim0 = _slice_util$sliceInfo.sliceDim0,\n    isSimpleSlice = _slice_util$sliceInfo.isSimpleSlice,\n    $begin = _slice_util$sliceInfo.begin,\n    $end = _slice_util$sliceInfo.end,\n    $strides = _slice_util$sliceInfo.strides;\n  var result;\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, function () {\n      return \"Input must have rank at least 1, got: \".concat(x.shape.length);\n    });\n    var size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    var sliced = slice({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        begin: $begin,\n        size: size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend: backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    var xBuf = backend.bufferSync(x);\n    var outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n  return result;\n}\nexport var stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"mappings":"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","names":["slice_util","StridedSlice","util","assertNotComplex","reshape","slice","stridedSliceImpl","stridedSlice","args","inputs","backend","attrs","x","begin","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","sliceInfo","shape","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$begin","$end","$strides","result","assert","length","size","computeOutShape","sliced","disposeIntermediateTensorInfo","xBuf","bufferSync","outBuf","makeTensorInfo","dtype","values","stridedSliceConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\StridedSlice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}