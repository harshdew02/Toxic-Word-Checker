{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport function max(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var reductionIndices = attrs.reductionIndices,\n    keepDims = attrs.keepDims;\n  var xRank = x.shape.length;\n  var origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  var maxInputIsTransposed = permutedAxes != null;\n  var shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n  var maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      var xTexData = backend.texData.get(maxInput.dataId);\n      var values = xTexData.values;\n      var newShape = new Array(xRank);\n      for (var i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      var maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      var maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes(maxInput.shape, axes),\n    _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n    maxOutShape = _backend_util$compute2[0],\n    reduceShape = _backend_util$compute2[1];\n  var outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n  var out;\n  if (shouldExecuteOnCPU) {\n    var _xTexData = backend.texData.get(maxInput.dataId);\n    var _values = _xTexData.values;\n    var outValues = maxImplCPU(_values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    var outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n  return out;\n}\nexport var maxConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max\n};","map":{"version":3,"mappings":"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","names":["Max","backend_util","util","maxImplCPU","maxImpl","transposeImpl","transposeImplCPU","max","args","inputs","backend","attrs","x","reductionIndices","keepDims","xRank","shape","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","maxInputIsTransposed","shouldExecuteOnCPU","maxInput","xTexData","texData","get","dataId","values","newShape","Array","i","maxInputValues","dtype","makeTensorInfo","maxInputData","getInnerMostAxes","assertAxesAreInnerMostDims","computeOutAndReduceShapes","maxOutShape","reduceShape","outShape","expandShapeToKeepDim","out","outValues","sizeFromShape","outData","disposeIntermediateTensorInfo","maxConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Max.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}