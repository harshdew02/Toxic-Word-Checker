{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { gatherV2Impl } from './GatherV2_impl';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x,\n    indices = inputs.indices;\n  var axis = attrs.axis,\n    batchDims = attrs.batchDims;\n  assertNotComplex([x, indices], 'gatherV2');\n  // Throw error when any index is out of bound.\n  var parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  var indicesVals = backend.data.get(indices.dataId).values;\n  var axisDim = x.shape[parsedAxis];\n  var _loop = function _loop() {\n    var index = indicesVals[i];\n    util.assert(index <= axisDim - 1 && index >= 0, function () {\n      return \"GatherV2: the index value \".concat(index, \" is not in [0, \").concat(axisDim - 1, \"]\");\n    });\n  };\n  for (var i = 0; i < indicesVals.length; ++i) {\n    _loop();\n  }\n  var $batchDims = batchDims;\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n  var indicesSize = util.sizeFromShape(indices.shape);\n  var shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);\n  var flattenX = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  var flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend: backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  var flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n  var indicesBuf = backend.bufferSync(flattenIndex);\n  var xBuf = backend.bufferSync(flattenX);\n  var outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n  return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\nexport var gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2\n};","map":{"version":3,"mappings":"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","names":["backend_util","GatherV2","util","assertNotComplex","gatherV2Impl","reshape","gatherV2","args","inputs","backend","attrs","x","indices","axis","batchDims","parsedAxis","parseAxisParam","shape","indicesVals","data","get","dataId","values","axisDim","index","i","assert","length","$batchDims","indicesSize","sizeFromShape","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","batchSize","outerSize","dimSize","sliceSize","flattenIndex","flattenOutputShape","indicesBuf","bufferSync","xBuf","outBuf","disposeIntermediateTensorInfo","makeTensorInfo","outputShape","dtype","gatherV2Config","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\GatherV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}