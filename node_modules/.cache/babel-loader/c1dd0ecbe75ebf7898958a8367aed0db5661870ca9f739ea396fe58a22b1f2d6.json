{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: engine/training.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { io, Optimizer, scalar, serialization, Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { nameScope } from '../common';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize } from '../layers/serialization';\nimport { disposeTensorsInLogs } from '../logs';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport { checkUserDefinedMetadata } from '../user_defined_metadata';\nimport { count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique } from '../utils/generic_utils';\nimport { printSummary } from '../utils/layer_utils';\nimport { range } from '../utils/math_utils';\nimport { convertPythonicToTs } from '../utils/serialization_utils';\nimport { version } from '../version';\nimport { Container } from './container';\nimport { execute as _execute, FeedDict } from './executor';\nimport { evaluateDataset as _evaluateDataset, fitDataset as _fitDataset } from './training_dataset';\nimport { checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, makeBatches, sliceArrays, sliceArraysByIndices } from './training_tensors';\nimport { computeWeightedLoss, standardizeClassWeights, standardizeWeights } from './training_utils';\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x) {\n  return x instanceof Tensor;\n}\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x) {\n  return Array.isArray(x);\n}\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x) {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(data, names, shapes) {\n  var checkBatchAxis = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var exceptionPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      var gotUnexpectedData = false;\n      if (isDataArray(data) && data.length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(\"Error when checking model \".concat(exceptionPrefix, \" expected no data, \") + \"but got \".concat(data));\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map(function (name) {\n      return null;\n    });\n  }\n  var arrays;\n  if (isDataDict(data)) {\n    data = data;\n    arrays = [];\n    var _iterator = _createForOfIteratorHelper(names),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var name = _step.value;\n        if (data[name] == null) {\n          throw new ValueError(\"No data provided for \\\"\".concat(name, \"\\\". Need data for each key in: \") + \"\".concat(names));\n        }\n        arrays.push(data[name]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (isDataArray(data)) {\n    data = data;\n    if (data.length !== names.length) {\n      throw new ValueError(\"Error when checking model \".concat(exceptionPrefix, \": the Array of \") + \"Tensors that you are passing to your model is not the size the \" + \"model expected. Expected to see \".concat(names.length, \" Tensor(s), but \") + \"instead got the following list of Tensor(s): \".concat(data));\n    }\n    arrays = data;\n  } else {\n    data = data;\n    if (names.length > 1) {\n      throw new ValueError(\"The model \".concat(exceptionPrefix, \" expects \").concat(names.length, \" Tensor(s), \") + \"but only received one Tensor. Found: Tensor with shape \".concat(data.shape));\n    }\n    arrays = [data];\n  }\n  arrays = ensureTensorsRank2OrHigher(arrays);\n  // Check shape compatibility.\n  if (shapes != null) {\n    for (var i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      var array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\"Error when checking \".concat(exceptionPrefix, \": expected \").concat(names[i], \" \") + \"to have \".concat(shapes[i].length, \" dimension(s). but got array with \") + \"shape \".concat(array.shape));\n      }\n      for (var j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n        var dim = array.shape[j];\n        var refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(\"\".concat(exceptionPrefix, \" expected a batch of elements where each \") + \"example has shape [\".concat(shapes[i].slice(1, shapes[i].length), \"] \") + \"(i.e.,tensor shape [*,\".concat(shapes[i].slice(1, shapes[i].length), \"])\") + \" but the \".concat(exceptionPrefix, \" received an input with \").concat(array.shape[0]) + \" examples, each with shape [\".concat(array.shape.slice(1, array.shape.length), \"]\") + \" (tensor shape [\".concat(array.shape, \"])\"));\n        }\n      }\n    }\n  }\n  return arrays;\n}\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(inputs, targets, weights) {\n  var setX = unique(inputs.map(function (input) {\n    return input.shape[0];\n  }));\n  setX.sort();\n  var setY = unique(targets.map(function (target) {\n    return target.shape[0];\n  }));\n  setY.sort();\n  // TODO(cais): Check `weights` as well.\n  if (setX.length > 1) {\n    throw new ValueError(\"All input Tensors (x) should have the same number of samples. \" + \"Got array shapes: \" + \"\".concat(JSON.stringify(inputs.map(function (input) {\n      return input.shape;\n    }))));\n  }\n  if (setY.length > 1) {\n    throw new ValueError(\"All target Tensors (y) should have the same number of samples. \" + \"Got array shapes: \" + \"\".concat(JSON.stringify(targets.map(function (target) {\n      return target.shape;\n    }))));\n  }\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(\"Input Tensors should have the same number of samples as target \" + \"Tensors. Found \".concat(setX[0], \" input sample(s) and \").concat(setY[0], \" target \") + \"sample(s).\");\n  }\n}\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n  // TODO(cais): Dedicated test coverage?\n  var keyLosses = [losses.meanSquaredError, losses.binaryCrossentropy, losses.categoricalCrossentropy];\n  for (var i = 0; i < targets.length; ++i) {\n    var y = targets[i];\n    var loss = lossFns[i];\n    var shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(\"You are passing a target array of shape \".concat(y.shape, \" while using \") + \"a loss 'categorical_crossentropy'. 'categorical_crossentropy'\" + \"expects targets to be binary matrices (1s and 0s) of shape \" + \"[samples, classes].\");\n        // TODO(cais): Example code in error message.\n      }\n    }\n\n    if (keyLosses.indexOf(loss) !== -1) {\n      var slicedYShape = y.shape.slice(1);\n      var slicedShape = shape.slice(1);\n      for (var j = 0; j < slicedYShape.length; ++j) {\n        var targetDim = slicedYShape[j];\n        var outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(\"A target Tensor with shape \".concat(y.shape, \" was passed for an \") + \"output of shape \".concat(shape, \", while using a loss function that \") + \"expects targets to have the same shape as the output.\");\n        }\n      }\n    }\n  }\n}\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(data, names, shapes) {\n  var checkBatchAxis = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var exceptionPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var arrays;\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(\"Error when checking model \".concat(exceptionPrefix, \": the Array of \") + \"Tensors that you are passing to your model is not the size the \" + \"the model expected. Expected to see \".concat(names.length, \" Tensor(s),\") + \" but instead got \".concat(data.length, \" Tensors(s).\"));\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(\"The model expects \".concat(names.length, \" \").concat(exceptionPrefix, \" Tensors, \") + \"but only received one Tensor. Found: array with shape \" + \"\".concat(JSON.stringify(data.shape), \".\"));\n    }\n    arrays = [data];\n  }\n  if (shapes != null) {\n    for (var i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      var array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\"Error when checking \".concat(exceptionPrefix, \": expected \").concat(names[i], \" \") + \"to have \".concat(shapes[i].length, \" dimension(s), but got array with \") + \"shape \".concat(JSON.stringify(array.shape)));\n      }\n      for (var j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        var dim = array.shape[j];\n        var refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(\"Error when checking \".concat(exceptionPrefix, \": expected \") + \"\".concat(names[i], \" to have shape \").concat(JSON.stringify(shapes[i]), \" but \") + \"got array with shape \".concat(JSON.stringify(array.shape), \".\"));\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(metrics, outputNames) {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(function (name) {\n      return [];\n    });\n  }\n  var wrappedMetrics;\n  if (typeof metrics === 'string' || typeof metrics === 'function') {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === 'object') {\n    wrappedMetrics = metrics;\n  } else {\n    throw new TypeError('Type of metrics argument not understood. Expected an string,' + \"function, Array, or Object, found: \".concat(metrics));\n  }\n  if (Array.isArray(wrappedMetrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(function (name) {\n      return wrappedMetrics;\n    });\n  } else {\n    // In this case, metrics is a dict.\n    var nestedMetrics = [];\n    var _iterator2 = _createForOfIteratorHelper(outputNames),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var name = _step2.value;\n        var outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n        if (!Array.isArray(outputMetrics)) {\n          outputMetrics = [outputMetrics];\n        }\n        nestedMetrics.push(outputMetrics);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return nestedMetrics;\n  }\n}\nvar LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport var LayersModel = /*#__PURE__*/function (_Container) {\n  _inherits(LayersModel, _Container);\n  var _super = _createSuper(LayersModel);\n  function LayersModel(args) {\n    var _this;\n    _classCallCheck(this, LayersModel);\n    _this = _super.call(this, args);\n    _this.isTraining = false;\n    return _this;\n  }\n  /**\n   * Print a text summary of the model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - If the model has non-sequential-like topology, the inputs each layer\n   *   receives\n   * - The total number of trainable and non-trainable parameters of the model.\n   *\n   * ```js\n   * const input1 = tf.input({shape: [10]});\n   * const input2 = tf.input({shape: [20]});\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n   * const output =\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n   *\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  _createClass(LayersModel, [{\n    key: \"summary\",\n    value: function summary(lineLength, positions) {\n      var printFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console.log;\n      if (!this.built) {\n        throw new ValueError(\"This model has never been called, thus its weights have not been \" + \"created yet. So no summary can be displayed. Build the model \" + \"first (e.g., by calling it on some test data).\");\n      }\n      printSummary(this, lineLength, positions, printFn);\n    }\n    /**\n     * Configures and prepares the model for training and evaluation.  Compiling\n     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n     * or `evaluate` on an un-compiled model will throw an error.\n     *\n     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n     * metrics to be used for fitting and evaluating this model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"compile\",\n    value: function compile(args) {\n      var _this2 = this;\n      if (args.loss == null) {\n        args.loss = [];\n      }\n      this.loss = args.loss;\n      if (typeof args.optimizer === 'string') {\n        this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n        this.isOptimizerOwned = true;\n      } else {\n        if (!(args.optimizer instanceof Optimizer)) {\n          throw new ValueError(\"User-defined optimizer must be an instance of tf.Optimizer.\");\n        }\n        this.optimizer_ = args.optimizer;\n        this.isOptimizerOwned = false;\n      }\n      // TODO(cais): Add lossWeights.\n      // TODO(cais): Add sampleWeightMode.\n      // Prepare loss functions.\n      var lossFunctions = [];\n      if (!Array.isArray(args.loss) && typeof args.loss !== 'string' && typeof args.loss !== 'function') {\n        args.loss = args.loss;\n        for (var name in args.loss) {\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new ValueError(\"Unknown entry in loss dictionary: \\\"\".concat(name, \"\\\". \") + \"Only expected the following keys: \".concat(this.outputNames));\n          }\n        }\n        var _iterator3 = _createForOfIteratorHelper(this.outputNames),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _name = _step3.value;\n            if (args.loss[_name] == null) {\n              console.warn(\"Output \\\"\".concat(_name, \"\\\" is missing from loss dictionary. We assume \") + \"this was done on purpose, and we will not be expecting data \" + \"to be passed to \".concat(_name, \" during training\"));\n            }\n            lossFunctions.push(losses.get(args.loss[_name]));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else if (Array.isArray(args.loss)) {\n        if (args.loss.length !== this.outputs.length) {\n          throw new ValueError(\"When passing an Array as loss, it should have one entry per \" + \"model output. The model has \".concat(this.outputs.length, \" output(s), \") + \"but you passed loss=\".concat(args.loss, \".\"));\n        }\n        var theLosses = args.loss;\n        lossFunctions = theLosses.map(function (l) {\n          return losses.get(l);\n        });\n      } else {\n        var lossFunction = losses.get(args.loss);\n        this.outputs.forEach(function (_) {\n          lossFunctions.push(lossFunction);\n        });\n      }\n      this.lossFunctions = lossFunctions;\n      this.feedOutputNames = [];\n      this.feedOutputShapes = [];\n      this.feedLossFns = [];\n      for (var i = 0; i < this.outputs.length; ++i) {\n        // TODO(cais): Logic for skipping target(s).\n        var shape = this.internalOutputShapes[i];\n        var _name2 = this.outputNames[i];\n        this.feedOutputNames.push(_name2);\n        this.feedOutputShapes.push(shape);\n        this.feedLossFns.push(this.lossFunctions[i]);\n      }\n      // TODO(cais): Add logic for output masks.\n      // TODO(cais): Add logic for sample weights.\n      var skipTargetIndices = [];\n      // Prepare metrics.\n      this.metrics = args.metrics;\n      // TODO(cais): Add weightedMetrics.\n      this.metricsNames = ['loss'];\n      this.metricsTensors = [];\n      // Compute total loss.\n      // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n      //   Here, metricsTensors are TypeScript functions. This difference is due\n      //   to the difference in symbolic/imperative property of the backends.\n      nameScope('loss', function () {\n        for (var _i = 0; _i < _this2.outputs.length; ++_i) {\n          if (skipTargetIndices.indexOf(_i) !== -1) {\n            continue;\n          }\n          // TODO(cais): Add weightedLoss, sampleWeight and mask.\n          //   The following line should be weightedLoss\n          var weightedLoss = _this2.lossFunctions[_i];\n          if (_this2.outputs.length > 1) {\n            _this2.metricsTensors.push([weightedLoss, _i]);\n            _this2.metricsNames.push(_this2.outputNames[_i] + '_loss');\n          }\n        }\n        // Porting Note: Due to the imperative nature of the backend, we calculate\n        //   the regularizer penalties in the totalLossFunction, instead of here.\n      });\n\n      var nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n      // TODO(cais): Add nestedWeightedMetrics.\n      /**\n       * Helper function used in loop below.\n       */\n      var appendMetric = function appendMetric(outputIndex, metricName, metricTensor) {\n        if (_this2.outputNames.length > 1) {\n          metricName = _this2.outputNames[outputIndex] + '_' + metricName;\n        }\n        _this2.metricsNames.push(metricName);\n        _this2.metricsTensors.push([metricTensor, outputIndex]);\n      };\n      nameScope('metric', function () {\n        var _loop = function _loop(i) {\n          if (skipTargetIndices.indexOf(i) !== -1) {\n            return \"continue\";\n          }\n          var outputMetrics = nestedMetrics[i];\n          // TODO(cais): Add weights and outputWeightedMetrics.\n          // TODO(cais): Add optional arg `weights` to the following function.\n          var handleMetrics = function handleMetrics(metrics) {\n            var metricNamePrefix = '';\n            var metricName;\n            var accFn;\n            var weightedMetricFn;\n            //  TODO(cais): Use 'weights_' for weighted metrics.\n            var _iterator4 = _createForOfIteratorHelper(metrics),\n              _step4;\n            try {\n              var _loop2 = function _loop2() {\n                var metric = _step4.value;\n                if (typeof metric === 'string' && ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  var outputShape = _this2.internalOutputShapes[i];\n                  if (outputShape[outputShape.length - 1] === 1 || _this2.lossFunctions[i] === losses.binaryCrossentropy) {\n                    // case: binary accuracy/crossentropy.\n                    if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                      accFn = Metrics.binaryAccuracy;\n                    } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                      accFn = Metrics.binaryCrossentropy;\n                    }\n                  } else if (_this2.lossFunctions[i] === losses.sparseCategoricalCrossentropy) {\n                    // case: categorical accuracy / crossentropy with sparse\n                    // targets.\n                    if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                      accFn = Metrics.sparseCategoricalAccuracy;\n                    } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                      accFn = Metrics.sparseCategoricalCrossentropy;\n                    }\n                  } else {\n                    // case: categorical accuracy / crossentropy.\n                    if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                      accFn = Metrics.categoricalAccuracy;\n                    } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                      accFn = Metrics.categoricalCrossentropy;\n                    }\n                  }\n                  var suffix;\n                  if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                    suffix = 'acc';\n                  } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                    suffix = 'ce';\n                  }\n                  // TODO(cais): Add weighting actually.\n                  weightedMetricFn = accFn;\n                  metricName = metricNamePrefix + suffix;\n                } else {\n                  var metricFn = Metrics.get(metric);\n                  // TODO(cais): Add weighting actually.\n                  weightedMetricFn = metricFn;\n                  metricName = metricNamePrefix + Metrics.getLossOrMetricName(metric);\n                }\n                // TODO(cais): Add weighting and masking to metricResult.\n                var metricResult;\n                nameScope(metricName, function () {\n                  metricResult = weightedMetricFn;\n                });\n                appendMetric(i, metricName, metricResult);\n              };\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                _loop2();\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          };\n          handleMetrics(outputMetrics);\n          // TODO(cais): Call handleMetrics with weights.\n        };\n        for (var _i2 = 0; _i2 < _this2.outputs.length; ++_i2) {\n          var _ret = _loop(_i2);\n          if (_ret === \"continue\") continue;\n        }\n      });\n      // Porting Notes: Given the imperative backend of tfjs-core,\n      //   there is no need for constructing the symbolic graph and placeholders.\n      this.collectedTrainableWeights = this.trainableWeights;\n    }\n    /**\n     * Check trainable weights count consistency.\n     *\n     * This will raise a warning if `this.trainableWeights` and\n     * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n     * numbers of parameters).\n     * Inconsistency will typically arise when one modifies `model.trainable`\n     * without calling `model.compile()` again.\n     */\n  }, {\n    key: \"checkTrainableWeightsConsistency\",\n    value: function checkTrainableWeightsConsistency() {\n      if (this.collectedTrainableWeights == null) {\n        return;\n      }\n      if (this.trainableWeights.length !== this.collectedTrainableWeights.length) {\n        console.warn('Discrepancy between trainableweights and collected trainable ' + 'weights. Did you set `model.trainable` without calling ' + '`model.compile()` afterwards?');\n      }\n    }\n    /**\n     * Returns the loss value & metrics values for the model in test mode.\n     *\n     * Loss and metrics are specified during `compile()`, which needs to happen\n     * before calls to `evaluate()`.\n     *\n     * Computation is done in batches.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const result = model.evaluate(\n     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n     * result.print();\n     * ```\n     *\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple inputs.\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple outputs.\n     * @param args A `ModelEvaluateArgs`, containing optional fields.\n     *\n     * @return `Scalar` test loss (if the model has a single output and no\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n     *   and/or metrics). The attribute `model.metricsNames`\n     *   will give you the display labels for the scalar outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(x, y) {\n      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      // TODO(cais): Standardize `config.sampleWeights` as well.\n      // Validate user data.\n      var checkBatchAxis = true;\n      var standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n      try {\n        // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n        // of the input to 0.\n        var ins = standardizedOuts[0].concat(standardizedOuts[1]);\n        this.makeTestFunction();\n        var f = this.testFunction;\n        var testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n        return singletonOrArray(testOuts);\n      } finally {\n        disposeNewTensors(standardizedOuts[0], x);\n        disposeNewTensors(standardizedOuts[1], y);\n      }\n    }\n    // TODO(cais): Add code snippet below once real dataset objects are\n    //   available.\n    /**\n     * Evaluate model using a dataset object.\n     *\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`).\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for evaluation. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g.\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs. Of the two items in the array, the\n     *   first is the input feature(s) and the second is the output target(s).\n     * @param args A configuration object for the dataset-based evaluation.\n     * @returns Loss and metric values as an Array of `Scalar` objects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"evaluateDataset\",\n    value: function () {\n      var _evaluateDataset2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dataset, args) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.makeTestFunction();\n              return _context.abrupt(\"return\", _evaluateDataset(this, dataset, args));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function evaluateDataset(_x, _x2) {\n        return _evaluateDataset2.apply(this, arguments);\n      }\n      return evaluateDataset;\n    }()\n    /**\n     * Get number of samples provided for training, evaluation or prediction.\n     *\n     * @param ins Input `tf.Tensor`.\n     * @param batchSize Integer batch size, optional.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring loop finished. Optional.\n     * @param stepsName The public API's parameter name for `steps`.\n     * @returns Number of samples provided.\n     */\n  }, {\n    key: \"checkNumSamples\",\n    value: function checkNumSamples(ins, batchSize, steps) {\n      var stepsName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'steps';\n      var numSamples;\n      if (steps != null) {\n        numSamples = null;\n        if (batchSize != null) {\n          throw new ValueError(\"If \".concat(stepsName, \" is set, batchSize must be null or undefined.\") + \"Got batchSize = \".concat(batchSize));\n        }\n      } else if (ins != null) {\n        if (Array.isArray(ins)) {\n          numSamples = ins[0].shape[0];\n        } else {\n          numSamples = ins.shape[0];\n        }\n      } else {\n        throw new ValueError(\"Either the input data should have a defined shape, or \" + \"\".concat(stepsName, \" shoud be specified.\"));\n      }\n      return numSamples;\n    }\n    /**\n     * Execute internal tensors of the model with input data feed.\n     * @param inputs Input data feed. Must match the inputs of the model.\n     * @param outputs Names of the output tensors to be fetched. Must match\n     *   names of the SymbolicTensors that belong to the graph.\n     * @returns Fetched values for `outputs`.\n     */\n  }, {\n    key: \"execute\",\n    value: function execute(inputs, outputs) {\n      if (Array.isArray(outputs) && outputs.length === 0) {\n        throw new ValueError('`outputs` is an empty Array, which is not allowed.');\n      }\n      var outputsIsArray = Array.isArray(outputs);\n      var outputNames = outputsIsArray ? outputs : [outputs];\n      var outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n      // Format the input into a FeedDict.\n      var feedDict = new FeedDict();\n      if (inputs instanceof Tensor) {\n        inputs = [inputs];\n      }\n      if (Array.isArray(inputs)) {\n        if (inputs.length !== this.inputs.length) {\n          throw new ValueError(\"The number of inputs provided (\".concat(inputs.length, \") \") + \"does not match the number of inputs of this model \" + \"(\".concat(this.inputs.length, \").\"));\n        }\n        for (var i = 0; i < this.inputs.length; ++i) {\n          feedDict.add(this.inputs[i], inputs[i]);\n        }\n      } else {\n        var _iterator5 = _createForOfIteratorHelper(this.inputs),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var input = _step5.value;\n            var tensorValue = inputs[input.name];\n            if (tensorValue == null) {\n              throw new ValueError(\"No value is provided for the model's input \".concat(input.name));\n            }\n            feedDict.add(input, tensorValue);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n      // Run execution.\n      var executeOutputs = _execute(outputSymbolicTensors, feedDict);\n      return outputsIsArray ? executeOutputs : executeOutputs[0];\n    }\n    /**\n     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n     */\n  }, {\n    key: \"retrieveSymbolicTensors\",\n    value: function retrieveSymbolicTensors(symbolicTensorNames) {\n      var outputSymbolicTensors = pyListRepeat(null, symbolicTensorNames.length);\n      var outputsRemaining = symbolicTensorNames.length;\n      var _iterator6 = _createForOfIteratorHelper(this.layers),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var layer = _step6.value;\n          var layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n          var layerOutputNames = layerOutputs.map(function (output) {\n            return output.name;\n          });\n          for (var i = 0; i < symbolicTensorNames.length; ++i) {\n            var index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n            if (index !== -1) {\n              outputSymbolicTensors[i] = layerOutputs[index];\n              outputsRemaining--;\n            }\n            if (outputsRemaining === 0) {\n              break;\n            }\n          }\n          if (outputsRemaining === 0) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      if (outputsRemaining > 0) {\n        var remainingNames = [];\n        outputSymbolicTensors.forEach(function (tensor, i) {\n          if (tensor == null) {\n            remainingNames.push(symbolicTensorNames[i]);\n          }\n        });\n        throw new ValueError(\"Cannot find SymbolicTensors for output name(s): \" + \"\".concat(JSON.stringify(remainingNames)));\n      }\n      return outputSymbolicTensors;\n    }\n    /**\n     * Helper method to loop over some data in batches.\n     *\n     * Porting Note: Not using the functional approach in the Python equivalent\n     *   due to the imperative backend.\n     * Porting Note: Does not support step mode currently.\n     *\n     * @param ins: input data\n     * @param batchSize: integer batch size.\n     * @param verbose: verbosity model\n     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n     *   `tf.Tensor` (if multipe outputs).\n     */\n  }, {\n    key: \"predictLoop\",\n    value: function predictLoop(ins) {\n      var _this3 = this;\n      var batchSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return tfc.tidy(function () {\n        var numSamples = _this3.checkNumSamples(ins);\n        if (verbose) {\n          throw new NotImplementedError('Verbose predictLoop() is not implemented yet.');\n        }\n        // Sample-based predictions.\n        // Porting Note: Tensor currently does not support sliced assignments as\n        //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n        //   iterating over the batches.\n        var batches = makeBatches(numSamples, batchSize);\n        var outsBatches = _this3.outputs.map(function (output) {\n          return [];\n        });\n        // TODO(cais): Can the scope() be pushed down inside the for loop?\n        var _loop3 = function _loop3(batchIndex) {\n          var batchOuts = tfc.tidy(function () {\n            var batchStart = batches[batchIndex][0];\n            var batchEnd = batches[batchIndex][1];\n            // TODO(cais): Take care of the case of the last element is a flag for\n            //   training/test.\n            var insBatch = sliceArrays(ins, batchStart, batchEnd);\n            // Construct the feeds for execute();\n            var feeds = [];\n            if (Array.isArray(insBatch)) {\n              for (var i = 0; i < insBatch.length; ++i) {\n                feeds.push({\n                  key: _this3.inputs[i],\n                  value: insBatch[i]\n                });\n              }\n            } else {\n              feeds.push({\n                key: _this3.inputs[0],\n                value: insBatch\n              });\n            }\n            var feedDict = new FeedDict(feeds);\n            return _execute(_this3.outputs, feedDict);\n          });\n          batchOuts.forEach(function (batchOut, i) {\n            return outsBatches[i].push(batchOut);\n          });\n        };\n        for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          _loop3(batchIndex);\n        }\n        return singletonOrArray(outsBatches.map(function (batches) {\n          return tfc.concat(batches, 0);\n        }));\n      });\n    }\n    /**\n     * Generates output predictions for the input samples.\n     *\n     * Computation is done in batches.\n     *\n     * Note: the \"step\" mode of predict() is currently not supported.\n     *   This is because the TensorFlow.js core backend is imperative only.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n     * ```\n     *\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n     *   the model has multiple inputs.\n     * @param args A `ModelPredictArgs` object containing optional fields.\n     *\n     * @return Prediction results as a `tf.Tensor`(s).\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and the model's expectations, or in case a stateful model receives a\n     *   number of samples that is not a multiple of the batch size.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"predict\",\n    value: function predict(x) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n      checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n      try {\n        // TODO(cais): Take care of stateful models.\n        //   if (this.stateful) ...\n        // TODO(cais): Take care of the learning_phase boolean flag.\n        //   if (this.useLearningPhase) ...\n        var batchSize = args.batchSize == null ? 32 : args.batchSize;\n        checkBatchSize(batchSize);\n        return this.predictLoop(xsRank2OrHigher, batchSize);\n      } finally {\n        disposeNewTensors(xsRank2OrHigher, x);\n      }\n    }\n    /**\n     * Returns predictions for a single batch of samples.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predictOnBatch(tf.ones([8, 10])).print();\n     * ```\n     * @param x: Input samples, as a Tensor (for models with exactly one\n     *   input) or an array of Tensors (for models with more than one input).\n     * @return Tensor(s) of predictions\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"predictOnBatch\",\n    value: function predictOnBatch(x) {\n      checkInputData(x, this.inputNames, this.feedInputShapes, true);\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      var batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n      return this.predictLoop(x, batchSize);\n    }\n  }, {\n    key: \"standardizeUserDataXY\",\n    value: function standardizeUserDataXY(x, y) {\n      var checkBatchAxis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var batchSize = arguments.length > 3 ? arguments[3] : undefined;\n      // TODO(cais): Add sampleWeight, classWeight\n      if (this.optimizer_ == null) {\n        throw new RuntimeError('You must compile a model before training/testing. Use ' + 'LayersModel.compile(modelCompileArgs).');\n      }\n      var outputShapes = [];\n      for (var i = 0; i < this.feedOutputShapes.length; ++i) {\n        var outputShape = this.feedOutputShapes[i];\n        var lossFn = this.feedLossFns[i];\n        if (lossFn === losses.sparseCategoricalCrossentropy) {\n          outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n        } else {\n          // Porting Note: Because of strong typing `lossFn` must be a function.\n          outputShapes.push(outputShape);\n        }\n      }\n      x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n      y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n      // TODO(cais): Standardize sampleWeights & classWeights.\n      checkArrayLengths(x, y, null);\n      // TODO(cais): Check sampleWeights as well.\n      checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n      if (this.stateful && batchSize != null && batchSize > 0) {\n        if (x[0].shape[0] % batchSize !== 0) {\n          throw new ValueError(\"In a stateful network, you should only pass inputs with a \" + \"number of samples that is divisible by the batch size \" + \"\".concat(batchSize, \". Found: \").concat(x[0].shape[0], \" sample(s).\"));\n        }\n      }\n      return [x, y];\n    }\n  }, {\n    key: \"standardizeUserData\",\n    value: function () {\n      var _standardizeUserData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(x, y, sampleWeight, classWeight) {\n        var checkBatchAxis,\n          batchSize,\n          _this$standardizeUser,\n          _this$standardizeUser2,\n          standardXs,\n          standardYs,\n          standardSampleWeights,\n          classWeights,\n          i,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              checkBatchAxis = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : true;\n              batchSize = _args2.length > 5 ? _args2[5] : undefined;\n              _this$standardizeUser = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize), _this$standardizeUser2 = _slicedToArray(_this$standardizeUser, 2), standardXs = _this$standardizeUser2[0], standardYs = _this$standardizeUser2[1]; // TODO(cais): Handle sampleWeights.\n              if (!(sampleWeight != null)) {\n                _context2.next = 5;\n                break;\n              }\n              throw new Error('sample weight is not supported yet.');\n            case 5:\n              standardSampleWeights = null;\n              if (!(classWeight != null)) {\n                _context2.next = 19;\n                break;\n              }\n              classWeights = standardizeClassWeights(classWeight, this.outputNames);\n              standardSampleWeights = [];\n              i = 0;\n            case 10:\n              if (!(i < classWeights.length)) {\n                _context2.next = 19;\n                break;\n              }\n              _context2.t0 = standardSampleWeights;\n              _context2.next = 14;\n              return standardizeWeights(standardYs[i], null, classWeights[i]);\n            case 14:\n              _context2.t1 = _context2.sent;\n              _context2.t0.push.call(_context2.t0, _context2.t1);\n            case 16:\n              ++i;\n              _context2.next = 10;\n              break;\n            case 19:\n              return _context2.abrupt(\"return\", [standardXs, standardYs, standardSampleWeights]);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function standardizeUserData(_x3, _x4, _x5, _x6) {\n        return _standardizeUserData.apply(this, arguments);\n      }\n      return standardizeUserData;\n    }()\n    /**\n     * Loop over some test data in batches.\n     * @param f A Function returning a list of tensors.\n     * @param ins Array of tensors to be fed to `f`.\n     * @param batchSize Integer batch size or `null` / `undefined`.\n     * @param verbose verbosity mode.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring test finished. Ignored with the default value of `null` /\n     * `undefined`.\n     * @returns Array of Scalars.\n     */\n  }, {\n    key: \"testLoop\",\n    value: function testLoop(f, ins, batchSize) {\n      var _this4 = this;\n      var verbose = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var steps = arguments.length > 4 ? arguments[4] : undefined;\n      return tfc.tidy(function () {\n        var numSamples = _this4.checkNumSamples(ins, batchSize, steps, 'steps');\n        var outs = [];\n        if (verbose > 0) {\n          throw new NotImplementedError('Verbose mode is not implemented yet.');\n        }\n        // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n        if (steps != null) {\n          throw new NotImplementedError('steps mode in testLoop() is not implemented yet');\n        } else {\n          var batches = makeBatches(numSamples, batchSize);\n          var indexArray = tensor1d(range(0, numSamples));\n          for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n            var batchStart = batches[batchIndex][0];\n            var batchEnd = batches[batchIndex][1];\n            var batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n            // TODO(cais): In ins, train flag can be a number, instead of an\n            //   Tensor? Do we need to handle this in tfjs-layers?\n            var insBatch = sliceArraysByIndices(ins, batchIds);\n            var batchOuts = f(insBatch);\n            if (batchIndex === 0) {\n              for (var i = 0; i < batchOuts.length; ++i) {\n                outs.push(scalar(0));\n              }\n            }\n            for (var _i3 = 0; _i3 < batchOuts.length; ++_i3) {\n              var batchOut = batchOuts[_i3];\n              outs[_i3] = tfc.add(outs[_i3], tfc.mul(batchEnd - batchStart, batchOut));\n            }\n          }\n          for (var _i4 = 0; _i4 < outs.length; ++_i4) {\n            outs[_i4] = tfc.div(outs[_i4], numSamples);\n          }\n        }\n        return outs;\n      });\n    }\n  }, {\n    key: \"getDedupedMetricsNames\",\n    value: function getDedupedMetricsNames() {\n      var outLabels = this.metricsNames;\n      // Rename duplicated metrics names (can happen with an output layer\n      // shared among multiple dataflows).\n      var dedupedOutLabels = [];\n      for (var i = 0; i < outLabels.length; ++i) {\n        var label = outLabels[i];\n        var newLabel = label;\n        if (count(outLabels, label) > 1) {\n          var dupIndex = count(outLabels.slice(0, i), label);\n          newLabel += \"_\".concat(dupIndex);\n        }\n        dedupedOutLabels.push(newLabel);\n      }\n      return dedupedOutLabels;\n    }\n    /**\n     * Creates a function that performs the following actions:\n     *\n     * 1. computes the losses\n     * 2. sums them to get the total loss\n     * 3. call the optimizer computes the gradients of the LayersModel's\n     *    trainable weights w.r.t. the total loss and update the variables\n     * 4. calculates the metrics\n     * 5. returns the values of the losses and metrics.\n     */\n  }, {\n    key: \"makeTrainFunction\",\n    value: function makeTrainFunction() {\n      var _this5 = this;\n      return function (data) {\n        var lossValues = [];\n        var inputs = data.slice(0, _this5.inputs.length);\n        var targets = data.slice(_this5.inputs.length, _this5.inputs.length + _this5.outputs.length);\n        var sampleWeights = data.slice(_this5.inputs.length + _this5.outputs.length, _this5.inputs.length + _this5.outputs.length * 2);\n        var metricsValues = [];\n        // Create a function that computes the total loss based on the\n        // inputs. This function is used for obtaining gradients through\n        // backprop.\n        var totalLossFunction = function totalLossFunction() {\n          var feeds = [];\n          for (var i = 0; i < _this5.inputs.length; ++i) {\n            feeds.push({\n              key: _this5.inputs[i],\n              value: inputs[i]\n            });\n          }\n          var feedDict = new FeedDict(feeds);\n          var outputs = _execute(_this5.outputs, feedDict, {\n            'training': true\n          });\n          // TODO(cais): Take care of the case of multiple outputs from a\n          //   single layer?\n          var totalLoss;\n          for (var _i5 = 0; _i5 < _this5.lossFunctions.length; ++_i5) {\n            var lossFunction = _this5.lossFunctions[_i5];\n            var loss = lossFunction(targets[_i5], outputs[_i5]);\n            if (sampleWeights[_i5] != null) {\n              loss = computeWeightedLoss(loss, sampleWeights[_i5]);\n            }\n            // TODO(cais): push Scalar instead.\n            var meanLoss = tfc.mean(loss);\n            // TODO(cais): Use a scope() instead, to avoid ownership.\n            lossValues.push(meanLoss);\n            if (_i5 === 0) {\n              totalLoss = loss;\n            } else {\n              totalLoss = tfc.add(totalLoss, loss);\n            }\n          }\n          // Compute the metrics.\n          // TODO(cais): These should probably be calculated outside\n          //   totalLossFunction to benefit speed?\n          for (var _i6 = 0; _i6 < _this5.metricsTensors.length; ++_i6) {\n            var weightedMetric = void 0;\n            if (_this5.outputs.length > 1 && _i6 < _this5.outputs.length) {\n              weightedMetric = lossValues[_i6];\n            } else {\n              var metric = _this5.metricsTensors[_i6][0];\n              var outputIndex = _this5.metricsTensors[_i6][1];\n              weightedMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n            }\n            tfc.keep(weightedMetric);\n            // TODO(cais): Use a scope() instead, to avoid ownership.\n            metricsValues.push(weightedMetric);\n          }\n          totalLoss = tfc.mean(totalLoss);\n          // Add regularizer penalties.\n          _this5.calculateLosses().forEach(function (regularizerLoss) {\n            totalLoss = tfc.add(totalLoss, regularizerLoss);\n          });\n          return totalLoss;\n        };\n        var variables = _this5.collectedTrainableWeights.map(function (param) {\n          return param.read();\n        });\n        var returnCost = true;\n        var totalLossValue = _this5.optimizer_.minimize(totalLossFunction, returnCost, variables);\n        return [totalLossValue].concat(metricsValues);\n      };\n    }\n    /**\n     * Create a function which, when invoked with an array of `tf.Tensor`s as a\n     * batch of inputs, returns the prespecified loss and metrics of the model\n     * under the batch of input data.\n     */\n  }, {\n    key: \"makeTestFunction\",\n    value: function makeTestFunction() {\n      var _this6 = this;\n      this.testFunction = function (data) {\n        return tfc.tidy(function () {\n          var valOutputs = [];\n          var totalLoss;\n          var inputs = data.slice(0, _this6.inputs.length);\n          var targets = data.slice(_this6.inputs.length, _this6.inputs.length + _this6.outputs.length);\n          var feeds = [];\n          for (var i = 0; i < _this6.inputs.length; ++i) {\n            feeds.push({\n              key: _this6.inputs[i],\n              value: inputs[i]\n            });\n          }\n          var feedDict = new FeedDict(feeds);\n          var outputs = _execute(_this6.outputs, feedDict);\n          // Compute total loss.\n          for (var _i7 = 0; _i7 < _this6.lossFunctions.length; ++_i7) {\n            var lossFunction = _this6.lossFunctions[_i7];\n            // TODO(cais): Add sample weighting and replace the simple\n            // averaging.\n            var loss = tfc.mean(lossFunction(targets[_i7], outputs[_i7]));\n            if (_i7 === 0) {\n              totalLoss = loss;\n            } else {\n              totalLoss = tfc.add(totalLoss, loss);\n            }\n            valOutputs.push(totalLoss);\n          }\n          // Compute the metrics.\n          for (var _i8 = 0; _i8 < _this6.metricsTensors.length; ++_i8) {\n            var metric = _this6.metricsTensors[_i8][0];\n            var outputIndex = _this6.metricsTensors[_i8][1];\n            // TODO(cais): Replace K.mean() with a proper weighting function.\n            var meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n            valOutputs.push(meanMetric);\n          }\n          return valOutputs;\n        });\n      };\n    }\n    /**\n     * Trains the model for a fixed number of epochs (iterations on a\n     * dataset).\n     *\n     * ```js\n     * const model = tf.sequential({\n     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * for (let i = 1; i < 5 ; ++i) {\n     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *       batchSize: 4,\n     *       epochs: 3\n     *   });\n     *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n     * }\n     * ```\n     *\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n     * model has multiple inputs. If all inputs in the model are named, you\n     * can also pass a dictionary mapping input names to `tf.Tensor`s.\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n     * the model has multiple outputs. If all outputs in the model are named,\n     * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n     * @param args A `ModelFitArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @exception ValueError In case of mismatch between the provided input\n     * data and what the model expects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"fit\",\n    value: function () {\n      var _fit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(x, y) {\n        var args,\n          inputs,\n          targets,\n          originalInputs,\n          originalTargets,\n          inputValX,\n          inputValY,\n          valX,\n          valY,\n          sampleWeights,\n          batchSize,\n          checkBatchAxis,\n          standardizedOuts,\n          doValidation,\n          valIns,\n          _checkBatchAxis,\n          valStandardized,\n          splitAt,\n          originalBatchSize,\n          ins,\n          trainFunction,\n          outLabels,\n          valFunction,\n          callbackMetrics,\n          callbacks,\n          out,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              args = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n              if (!this.isTraining) {\n                _context3.next = 3;\n                break;\n              }\n              throw new Error('Cannot start training because another fit() call is ongoing.');\n            case 3:\n              this.isTraining = true;\n              _context3.prev = 4;\n              batchSize = args.batchSize == null ? 32 : args.batchSize;\n              checkBatchSize(batchSize);\n              // Validate user data.\n              // TODO(cais): Support sampleWeight.\n              checkBatchAxis = false;\n              _context3.next = 10;\n              return this.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n            case 10:\n              standardizedOuts = _context3.sent;\n              inputs = standardizedOuts[0];\n              targets = standardizedOuts[1];\n              sampleWeights = standardizedOuts[2];\n              // Prepare validation data.\n              doValidation = false;\n              if (!(args.validationData != null && args.validationData.length > 0)) {\n                _context3.next = 36;\n                break;\n              }\n              doValidation = true;\n              if (!(args.validationData.length === 2)) {\n                _context3.next = 22;\n                break;\n              }\n              // config.validationData consists of valX and valY.\n              inputValX = args.validationData[0];\n              inputValY = args.validationData[1];\n              _context3.next = 27;\n              break;\n            case 22:\n              if (!(args.validationData.length === 3)) {\n                _context3.next = 26;\n                break;\n              }\n              throw new NotImplementedError('validationData including sample weights is not supported yet.');\n            case 26:\n              throw new ValueError(\"When passing validation data, it must contain 2 (valX, valY) \" + \"or 3 (valX, valY, valSampleWeight) items; \" + \"\".concat(args.validationData, \" is invalid.\"));\n            case 27:\n              _checkBatchAxis = true;\n              _context3.next = 30;\n              return this.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */null, /** Unused class weights. */_checkBatchAxis, batchSize);\n            case 30:\n              valStandardized = _context3.sent;\n              valX = valStandardized[0];\n              valY = valStandardized[1];\n              valIns = valX.concat(valY);\n              // TODO(cais): Add useLearningPhase data properly.\n              _context3.next = 37;\n              break;\n            case 36:\n              if (args.validationSplit != null && args.validationSplit > 0 && args.validationSplit < 1) {\n                doValidation = true;\n                // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n                splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n                originalBatchSize = inputs[0].shape[0];\n                valX = sliceArrays(inputs, splitAt, originalBatchSize);\n                originalInputs = inputs;\n                inputs = sliceArrays(inputs, 0, splitAt);\n                valY = sliceArrays(targets, splitAt, originalBatchSize);\n                originalTargets = targets;\n                targets = sliceArrays(targets, 0, splitAt);\n                // TODO(cais): Once sampleWeights becomes available, slice it to get\n                //   valSampleWeights.\n                valIns = valX.concat(valY);\n                // TODO(cais): Add useLearningPhase data properly.\n              } else if (args.validationSteps != null) {\n                doValidation = true;\n                // TODO(cais): Add useLearningPhase.\n              }\n            case 37:\n              ins = inputs.concat(targets).concat(sampleWeights);\n              this.checkTrainableWeightsConsistency();\n              // TODO(cais): Handle use_learning_phase and learning_phase?\n              // Porting Note: Here we see a key deviation of tfjs-layers from\n              // Keras.\n              //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n              //  we do not construct symbolic computation graphs to embody the\n              //  training process. Instead, we define a function that performs the\n              //  training action. In PyKeras, the data (inputs and targets) are fed\n              //  through graph placeholders. In tfjs-layers, the data are fed as\n              //  function arguments. Since the function are defined below in the\n              //  scope, we don't have equivalents of PyKeras's\n              //  `_make_train_funciton`.\n              trainFunction = this.makeTrainFunction();\n              outLabels = this.getDedupedMetricsNames();\n              if (doValidation) {\n                this.makeTestFunction();\n                valFunction = this.testFunction;\n                callbackMetrics = outLabels.slice().concat(outLabels.map(function (n) {\n                  return 'val_' + n;\n                }));\n              } else {\n                valFunction = null;\n                valIns = [];\n                callbackMetrics = outLabels.slice();\n              }\n              callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n              _context3.next = 45;\n              return this.fitLoop(trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n            case 45:\n              out = _context3.sent;\n              return _context3.abrupt(\"return\", out);\n            case 47:\n              _context3.prev = 47;\n              this.isTraining = false;\n              // Memory clean up.\n              disposeNewTensors(inputs, x);\n              disposeNewTensors(targets, y);\n              disposeNewTensors(originalInputs, x);\n              disposeNewTensors(originalTargets, y);\n              disposeNewTensors(valX, inputValX);\n              disposeNewTensors(valY, inputValY);\n              if (sampleWeights != null) {\n                tfc.dispose(sampleWeights);\n              }\n              return _context3.finish(47);\n            case 57:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4,, 47, 57]]);\n      }));\n      function fit(_x7, _x8) {\n        return _fit.apply(this, arguments);\n      }\n      return fit;\n    }()\n    /**\n     * Abstract fit function for `f(ins)`.\n     * @param f A Function returning a list of tensors. For training, this\n     *   function is expected to perform the updates to the variables.\n     * @param ins List of tensors to be fed to `f`.\n     * @param outLabels List of strings, display names of the outputs of `f`.\n     * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n     * @param epochs Number of times to iterate over the data. Default : 1.\n     * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n     * @param callbacks List of callbacks to be called during training.\n     * @param valF Function to call for validation.\n     * @param valIns List of tensors to be fed to `valF`.\n     * @param shuffle Whether to shuffle the data at the beginning of every\n     * epoch. Default : true.\n     * @param callbackMetrics List of strings, the display names of the metrics\n     *   passed to the callbacks. They should be the concatenation of the\n     *   display names of the outputs of `f` and the list of display names\n     *   of the outputs of `valF`.\n     * @param initialEpoch Epoch at which to start training (useful for\n     *   resuming a previous training run). Default : 0.\n     * @param stepsPerEpoch Total number of steps (batches on samples) before\n     *   declaring one epoch finished and starting the next epoch. Ignored with\n     *   the default value of `undefined` or `null`.\n     * @param validationSteps Number of steps to run validation for (only if\n     *   doing validation from data tensors). Not applicable for tfjs-layers.\n     * @returns A `History` object.\n     */\n  }, {\n    key: \"fitLoop\",\n    value: function () {\n      var _fitLoop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n        var _this7 = this;\n        var doValidation, numTrainSamples, indexArray, _configureCallbacks, callbackList, history, _loop4, epoch, _ret2;\n        return _regeneratorRuntime().wrap(function _callee4$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (batchSize == null) {\n                batchSize = 32;\n              }\n              if (epochs == null) {\n                epochs = 1;\n              }\n              if (shuffle == null) {\n                shuffle = true;\n              }\n              if (initialEpoch == null) {\n                initialEpoch = 0;\n              }\n              // TODO(cais): Change const to let below when implementing validation.\n              doValidation = false;\n              if (valF != null && valIns != null) {\n                doValidation = true;\n                // TODO(cais): verbose message.\n              }\n              if (!(validationSteps != null)) {\n                _context6.next = 10;\n                break;\n              }\n              doValidation = true;\n              if (!(stepsPerEpoch == null)) {\n                _context6.next = 10;\n                break;\n              }\n              throw new ValueError('Can only use `validationSteps` when doing step-wise training, ' + 'i.e., `stepsPerEpoch` must be set.');\n            case 10:\n              numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n              if (numTrainSamples != null) {\n                indexArray = range(0, numTrainSamples);\n              }\n              if (verbose == null) {\n                verbose = 1;\n              }\n              _configureCallbacks = configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics), callbackList = _configureCallbacks.callbackList, history = _configureCallbacks.history;\n              callbackList.setModel(this);\n              this.history = history;\n              _context6.next = 18;\n              return callbackList.onTrainBegin();\n            case 18:\n              this.stopTraining_ = false;\n              // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n              // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n              _loop4 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop4() {\n                var epochLogs, epochIndexArray1D, batches, _loop5, batchIndex, _ret3;\n                return _regeneratorRuntime().wrap(function _loop4$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _context5.next = 2;\n                      return callbackList.onEpochBegin(epoch);\n                    case 2:\n                      epochLogs = {};\n                      if (!(stepsPerEpoch != null)) {\n                        _context5.next = 7;\n                        break;\n                      }\n                      throw new NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n                    case 7:\n                      if (!(shuffle === 'batch')) {\n                        _context5.next = 11;\n                        break;\n                      }\n                      throw new NotImplementedError('batch shuffling is not implemneted' + ' yet');\n                    case 11:\n                      if (shuffle) {\n                        util.shuffle(indexArray);\n                      }\n                    case 12:\n                      // Convert the potentially shuffled indices to Tensor1D, to avoid the\n                      // cost of repeated creation of Array1Ds later on.\n                      epochIndexArray1D = tensor1d(indexArray);\n                      batches = makeBatches(numTrainSamples, batchSize);\n                      _loop5 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop5(batchIndex) {\n                        var batchLogs;\n                        return _regeneratorRuntime().wrap(function _loop5$(_context4) {\n                          while (1) switch (_context4.prev = _context4.next) {\n                            case 0:\n                              batchLogs = {};\n                              _context4.next = 3;\n                              return callbackList.onBatchBegin(batchIndex, batchLogs);\n                            case 3:\n                              tfc.tidy(function () {\n                                var batchStart = batches[batchIndex][0];\n                                var batchEnd = batches[batchIndex][1];\n                                var batchIds = K.sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);\n                                batchLogs['batch'] = batchIndex;\n                                batchLogs['size'] = batchEnd - batchStart;\n                                // TODO(cais): In ins, train flag can be a number, instead of an\n                                //   Tensor? Do we need to handle this in tfjs-layers?\n                                var insBatch = sliceArraysByIndices(ins, batchIds);\n                                var outs = f(insBatch);\n                                for (var i = 0; i < outLabels.length; ++i) {\n                                  var label = outLabels[i];\n                                  var out = outs[i];\n                                  batchLogs[label] = out;\n                                  tfc.keep(out);\n                                  // TODO(cais): Use scope() to avoid ownership.\n                                }\n\n                                if (batchIndex === batches.length - 1) {\n                                  // Last batch.\n                                  if (doValidation) {\n                                    var valOuts = _this7.testLoop(valF, valIns, batchSize);\n                                    // Porting Notes: In tfjs-layers, valOuts is always an Array.\n                                    for (var _i9 = 0; _i9 < outLabels.length; ++_i9) {\n                                      var _label = outLabels[_i9];\n                                      var _out = valOuts[_i9];\n                                      tfc.keep(_out);\n                                      // TODO(cais): Use scope() to avoid ownership.\n                                      epochLogs['val_' + _label] = _out;\n                                    }\n                                  }\n                                }\n                              });\n                              _context4.next = 6;\n                              return callbackList.onBatchEnd(batchIndex, batchLogs);\n                            case 6:\n                              disposeTensorsInLogs(batchLogs);\n                              if (!_this7.stopTraining_) {\n                                _context4.next = 9;\n                                break;\n                              }\n                              return _context4.abrupt(\"return\", \"break\");\n                            case 9:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }, _loop5);\n                      });\n                      batchIndex = 0;\n                    case 16:\n                      if (!(batchIndex < batches.length)) {\n                        _context5.next = 24;\n                        break;\n                      }\n                      return _context5.delegateYield(_loop5(batchIndex), \"t0\", 18);\n                    case 18:\n                      _ret3 = _context5.t0;\n                      if (!(_ret3 === \"break\")) {\n                        _context5.next = 21;\n                        break;\n                      }\n                      return _context5.abrupt(\"break\", 24);\n                    case 21:\n                      ++batchIndex;\n                      _context5.next = 16;\n                      break;\n                    case 24:\n                      epochIndexArray1D.dispose();\n                    case 25:\n                      _context5.next = 27;\n                      return callbackList.onEpochEnd(epoch, epochLogs);\n                    case 27:\n                      if (!_this7.stopTraining_) {\n                        _context5.next = 29;\n                        break;\n                      }\n                      return _context5.abrupt(\"return\", \"break\");\n                    case 29:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, _loop4);\n              });\n              epoch = initialEpoch;\n            case 21:\n              if (!(epoch < epochs)) {\n                _context6.next = 29;\n                break;\n              }\n              return _context6.delegateYield(_loop4(), \"t0\", 23);\n            case 23:\n              _ret2 = _context6.t0;\n              if (!(_ret2 === \"break\")) {\n                _context6.next = 26;\n                break;\n              }\n              return _context6.abrupt(\"break\", 29);\n            case 26:\n              ++epoch;\n              _context6.next = 21;\n              break;\n            case 29:\n              _context6.next = 31;\n              return callbackList.onTrainEnd();\n            case 31:\n              _context6.next = 33;\n              return this.history.syncData();\n            case 33:\n              return _context6.abrupt(\"return\", this.history);\n            case 34:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee4, this);\n      }));\n      function fitLoop(_x9, _x10, _x11, _x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21, _x22) {\n        return _fitLoop.apply(this, arguments);\n      }\n      return fitLoop;\n    }() // TODO(cais): Add code snippet below when it's possible to instantiate\n    //   actual dataset objects.\n    /**\n     * Trains the model using a dataset object.\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for training. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g.\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs.\n     *   Of the two items in the array, the first is the input feature(s) and\n     *   the second is the output target(s).\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"fitDataset\",\n    value: function () {\n      var _fitDataset2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(dataset, args) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", _fitDataset(this, dataset, args));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee5, this);\n      }));\n      function fitDataset(_x23, _x24) {\n        return _fitDataset2.apply(this, arguments);\n      }\n      return fitDataset;\n    }()\n    /**\n     * Runs a single gradient update on a single batch of data.\n     *\n     * This method differs from `fit()` and `fitDataset()` in the following\n     * regards:\n     *   - It operates on exactly one batch of data.\n     *   - It returns only the loss and metric values, instead of\n     *     returning the batch-by-batch loss and metric values.\n     *   - It doesn't support fine-grained options such as verbosity and\n     *     callbacks.\n     *\n     * @param x Input data. It could be one of the following:\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n     *     multiple inputs).\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n     *     model has named inputs).\n     * @param y Target data. It could be either a `tf.Tensor` or multiple\n     *   `tf.Tensor`s. It should be consistent with `x`.\n     * @returns Training loss or losses (in case the model has\n     *   multiple outputs), along with metrics (if any), as numbers.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n  }, {\n    key: \"trainOnBatch\",\n    value: function () {\n      var _trainOnBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(x, y) {\n        var standardizeOut, inputs, targets, trainFunction, losses, lossValues, _iterator7, _step7, loss, v;\n        return _regeneratorRuntime().wrap(function _callee6$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.standardizeUserData(x, y);\n            case 2:\n              standardizeOut = _context8.sent;\n              inputs = standardizeOut[0];\n              targets = standardizeOut[1];\n              trainFunction = this.makeTrainFunction();\n              losses = trainFunction(inputs.concat(targets));\n              lossValues = [];\n              _iterator7 = _createForOfIteratorHelper(losses);\n              _context8.prev = 9;\n              _iterator7.s();\n            case 11:\n              if ((_step7 = _iterator7.n()).done) {\n                _context8.next = 19;\n                break;\n              }\n              loss = _step7.value;\n              _context8.next = 15;\n              return loss.data();\n            case 15:\n              v = _context8.sent;\n              lossValues.push(v[0]);\n            case 17:\n              _context8.next = 11;\n              break;\n            case 19:\n              _context8.next = 24;\n              break;\n            case 21:\n              _context8.prev = 21;\n              _context8.t0 = _context8[\"catch\"](9);\n              _iterator7.e(_context8.t0);\n            case 24:\n              _context8.prev = 24;\n              _iterator7.f();\n              return _context8.finish(24);\n            case 27:\n              tfc.dispose(losses);\n              disposeNewTensors(standardizeOut[0], x);\n              disposeNewTensors(standardizeOut[1], y);\n              return _context8.abrupt(\"return\", singletonOrArray(lossValues));\n            case 31:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee6, this, [[9, 21, 24, 27]]);\n      }));\n      function trainOnBatch(_x25, _x26) {\n        return _trainOnBatch.apply(this, arguments);\n      }\n      return trainOnBatch;\n    }()\n    /**\n     * Extract weight values of the model.\n     *\n     * @param config: An instance of `io.SaveConfig`, which specifies\n     * model-saving options such as whether only trainable weights are to be\n     * saved.\n     * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n     *   non-uniqueified weight names) to their values.\n     */\n  }, {\n    key: \"getNamedWeights\",\n    value: function getNamedWeights(config) {\n      var namedWeights = [];\n      var trainableOnly = config != null && config.trainableOnly;\n      var weights = trainableOnly ? this.trainableWeights : this.weights;\n      var weightValues = this.getWeights(trainableOnly);\n      for (var i = 0; i < weights.length; ++i) {\n        if (trainableOnly && !weights[i].trainable) {\n          // Optionally skip non-trainable weights.\n          continue;\n        }\n        namedWeights.push({\n          name: weights[i].originalName,\n          tensor: weightValues[i]\n        });\n      }\n      return namedWeights;\n    }\n    /**\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\n     *\n     * Example:\n     *\n     * ```js\n     * const input = tf.input({shape: [10]});\n     * const output = tf.layers.dense({units: 1}).apply(input);\n     * const model = tf.model({inputs: [input], outputs: [output]});\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n     * const xs = tf.ones([8, 10]);\n     * const ys = tf.zeros([8, 1]);\n     *\n     * const history = await model.fit(xs, ys, {\n     *   epochs: 10,\n     *   callbacks: {\n     *     onEpochEnd: async (epoch, logs) => {\n     *       if (epoch === 2) {\n     *         model.stopTraining = true;\n     *       }\n     *     }\n     *   }\n     * });\n     *\n     * // There should be only 3 values in the loss array, instead of 10\n     * values,\n     * // due to the stopping after 3 epochs.\n     * console.log(history.history.loss);\n     * ```\n     */\n  }, {\n    key: \"stopTraining\",\n    get: function get() {\n      return this.stopTraining_;\n    },\n    set: function set(stop) {\n      this.stopTraining_ = stop;\n    }\n  }, {\n    key: \"optimizer\",\n    get: function get() {\n      return this.optimizer_;\n    },\n    set: function set(optimizer) {\n      if (this.optimizer_ !== optimizer) {\n        this.optimizer_ = optimizer;\n        this.isOptimizerOwned = false;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var result = _get(_getPrototypeOf(LayersModel.prototype), \"dispose\", this).call(this);\n      if (result.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {\n        var numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n        this.optimizer_.dispose();\n        result.numDisposedVariables += numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n      }\n      return result;\n    }\n  }, {\n    key: \"getLossIdentifiers\",\n    value: function getLossIdentifiers() {\n      var lossNames;\n      if (typeof this.loss === 'string') {\n        lossNames = toSnakeCase(this.loss);\n      } else if (Array.isArray(this.loss)) {\n        var _iterator8 = _createForOfIteratorHelper(this.loss),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var loss = _step8.value;\n            if (typeof loss !== 'string') {\n              throw new Error('Serialization of non-string loss is not supported.');\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        lossNames = this.loss.map(function (name) {\n          return toSnakeCase(name);\n        });\n      } else {\n        var outputNames = Object.keys(this.loss);\n        lossNames = {};\n        var _losses = this.loss;\n        for (var _i10 = 0, _outputNames = outputNames; _i10 < _outputNames.length; _i10++) {\n          var outputName = _outputNames[_i10];\n          if (typeof _losses[outputName] === 'string') {\n            lossNames[outputName] = toSnakeCase(_losses[outputName]);\n          } else {\n            throw new Error('Serialization of non-string loss is not supported.');\n          }\n        }\n      }\n      return lossNames;\n    }\n  }, {\n    key: \"getMetricIdentifiers\",\n    value: function getMetricIdentifiers() {\n      if (typeof this.metrics === 'string' || typeof this.metrics === 'function') {\n        return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n      } else if (Array.isArray(this.metrics)) {\n        return this.metrics.map(function (metric) {\n          return toSnakeCase(Metrics.getLossOrMetricName(metric));\n        });\n      } else {\n        var metricsIdentifiers = {};\n        for (var key in this.metrics) {\n          metricsIdentifiers[key] = toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n        }\n        return metricsIdentifiers;\n      }\n    }\n  }, {\n    key: \"getTrainingConfig\",\n    value: function getTrainingConfig() {\n      return {\n        loss: this.getLossIdentifiers(),\n        metrics: this.getMetricIdentifiers(),\n        optimizer_config: {\n          class_name: this.optimizer.getClassName(),\n          config: this.optimizer.getConfig()\n        }\n      };\n      // TODO(cais): Add weight_metrics when they are supported.\n      // TODO(cais): Add sample_weight_mode when it's supported.\n      // TODO(cais): Add loss_weights when it's supported.\n    }\n  }, {\n    key: \"loadTrainingConfig\",\n    value: function loadTrainingConfig(trainingConfig) {\n      if (trainingConfig.weighted_metrics != null) {\n        throw new Error('Loading weight_metrics is not supported yet.');\n      }\n      if (trainingConfig.loss_weights != null) {\n        throw new Error('Loading loss_weights is not supported yet.');\n      }\n      if (trainingConfig.sample_weight_mode != null) {\n        throw new Error('Loading sample_weight_mode is not supported yet.');\n      }\n      var tsConfig = convertPythonicToTs(trainingConfig.optimizer_config);\n      var optimizer = deserialize(tsConfig);\n      var loss;\n      if (typeof trainingConfig.loss === 'string') {\n        loss = toCamelCase(trainingConfig.loss);\n      } else if (Array.isArray(trainingConfig.loss)) {\n        loss = trainingConfig.loss.map(function (lossEntry) {\n          return toCamelCase(lossEntry);\n        });\n      } else if (trainingConfig.loss != null) {\n        loss = {};\n        for (var key in trainingConfig.loss) {\n          loss[key] = toCamelCase(trainingConfig.loss[key]);\n        }\n      }\n      var metrics;\n      if (Array.isArray(trainingConfig.metrics)) {\n        metrics = trainingConfig.metrics.map(function (metric) {\n          return toCamelCase(metric);\n        });\n      } else if (trainingConfig.metrics != null) {\n        metrics = {};\n        for (var _key in trainingConfig.metrics) {\n          metrics[_key] = toCamelCase(trainingConfig.metrics[_key]);\n        }\n      }\n      this.compile({\n        loss: loss,\n        metrics: metrics,\n        optimizer: optimizer\n      });\n    }\n    /**\n     * Save the configuration and/or weights of the LayersModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 2. Saving `model`'s topology and weights to browser\n     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('indexeddb://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 3. Saving `model`'s topology and weights as two files\n     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n     * browser.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('downloads://my-model-1');\n     * ```\n     *\n     * Example 4. Send  `model`'s topology and weights to an HTTP server.\n     * See the documentation of `tf.io.http` for more details\n     * including specifying request parameters and implementation of the\n     * server.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('http://my-server/model/upload');\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(handlerOrURL, config) {\n        var handlers, weightDataAndSpecs, returnString, unusedArg, modelConfig, modelArtifacts, includeOptimizer, _weightDataAndSpecs$s, weightType, _yield$io$encodeWeigh, optimizerWeightData, optimizerWeightSpecs, checkSize;\n        return _regeneratorRuntime().wrap(function _callee7$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(typeof handlerOrURL === 'string')) {\n                _context9.next = 9;\n                break;\n              }\n              handlers = io.getSaveHandlers(handlerOrURL);\n              if (!(handlers.length === 0)) {\n                _context9.next = 6;\n                break;\n              }\n              throw new ValueError(\"Cannot find any save handlers for URL '\".concat(handlerOrURL, \"'\"));\n            case 6:\n              if (!(handlers.length > 1)) {\n                _context9.next = 8;\n                break;\n              }\n              throw new ValueError(\"Found more than one (\".concat(handlers.length, \") save handlers for \") + \"URL '\".concat(handlerOrURL, \"'\"));\n            case 8:\n              handlerOrURL = handlers[0];\n            case 9:\n              if (!(handlerOrURL.save == null)) {\n                _context9.next = 11;\n                break;\n              }\n              throw new ValueError('LayersModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n            case 11:\n              _context9.next = 13;\n              return io.encodeWeights(this.getNamedWeights(config));\n            case 13:\n              weightDataAndSpecs = _context9.sent;\n              returnString = false;\n              unusedArg = null;\n              modelConfig = this.toJSON(unusedArg, returnString);\n              modelArtifacts = {\n                modelTopology: modelConfig,\n                format: LAYERS_MODEL_FORMAT_NAME,\n                generatedBy: \"TensorFlow.js tfjs-layers v\".concat(version),\n                convertedBy: null\n              };\n              includeOptimizer = config == null ? false : config.includeOptimizer;\n              if (!(includeOptimizer && this.optimizer != null)) {\n                _context9.next = 34;\n                break;\n              }\n              modelArtifacts.trainingConfig = this.getTrainingConfig();\n              weightType = 'optimizer';\n              _context9.t0 = io;\n              _context9.next = 25;\n              return this.optimizer.getWeights();\n            case 25:\n              _context9.t1 = _context9.sent;\n              _context9.t2 = weightType;\n              _context9.next = 29;\n              return _context9.t0.encodeWeights.call(_context9.t0, _context9.t1, _context9.t2);\n            case 29:\n              _yield$io$encodeWeigh = _context9.sent;\n              optimizerWeightData = _yield$io$encodeWeigh.data;\n              optimizerWeightSpecs = _yield$io$encodeWeigh.specs;\n              (_weightDataAndSpecs$s = weightDataAndSpecs.specs).push.apply(_weightDataAndSpecs$s, _toConsumableArray(optimizerWeightSpecs));\n              weightDataAndSpecs.data = io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n            case 34:\n              if (this.userDefinedMetadata != null) {\n                // Check serialized size of user-defined metadata.\n                checkSize = true;\n                checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n                modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n              }\n              modelArtifacts.weightData = weightDataAndSpecs.data;\n              modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n              return _context9.abrupt(\"return\", handlerOrURL.save(modelArtifacts));\n            case 38:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee7, this);\n      }));\n      function save(_x27, _x28) {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n    /**\n     * Set user-defined metadata.\n     *\n     * The set metadata will be serialized together with the topology\n     * and weights of the model during `save()` calls.\n     *\n     * @param setUserDefinedMetadata\n     */\n  }, {\n    key: \"setUserDefinedMetadata\",\n    value: function setUserDefinedMetadata(userDefinedMetadata) {\n      checkUserDefinedMetadata(userDefinedMetadata, this.name);\n      this.userDefinedMetadata = userDefinedMetadata;\n    }\n    /**\n     * Get user-defined metadata.\n     *\n     * The metadata is supplied via one of the two routes:\n     *   1. By calling `setUserDefinedMetadata()`.\n     *   2. Loaded during model loading (if the model is constructed\n     *      via `tf.loadLayersModel()`.)\n     *\n     * If no user-defined metadata is available from either of the\n     * two routes, this function will return `undefined`.\n     */\n  }, {\n    key: \"getUserDefinedMetadata\",\n    value: function getUserDefinedMetadata() {\n      return this.userDefinedMetadata;\n    }\n  }]);\n  return LayersModel;\n}(Container);\n// The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n/** @nocollapse */\nLayersModel.className = 'Model';\nserialization.registerClass(LayersModel);\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport var Functional = /*#__PURE__*/function (_LayersModel) {\n  _inherits(Functional, _LayersModel);\n  var _super2 = _createSuper(Functional);\n  function Functional() {\n    _classCallCheck(this, Functional);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(Functional);\n}(LayersModel);\nFunctional.className = 'Functional';\nserialization.registerClass(Functional);","map":{"version":3,"mappings":"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","names":["tfc","io","Optimizer","scalar","serialization","Tensor","tensor1d","util","K","configureCallbacks","standardizeCallbacks","nameScope","NotImplementedError","RuntimeError","ValueError","deserialize","disposeTensorsInLogs","losses","Metrics","optimizers","checkUserDefinedMetadata","count","pyListRepeat","singletonOrArray","toCamelCase","toSnakeCase","unique","printSummary","range","convertPythonicToTs","version","Container","execute","FeedDict","evaluateDataset","fitDataset","checkBatchSize","disposeNewTensors","ensureTensorsRank2OrHigher","makeBatches","sliceArrays","sliceArraysByIndices","computeWeightedLoss","standardizeClassWeights","standardizeWeights","isDataTensor","x","isDataArray","Array","isArray","isDataDict","standardizeInputData","data","names","shapes","checkBatchAxis","exceptionPrefix","length","gotUnexpectedData","key","hasOwnProperty","map","arrays","name","push","shape","i","array","j","dim","refDim","slice","checkArrayLengths","inputs","targets","weights","setX","input","sort","setY","target","JSON","stringify","arraysEqual","checkLossAndTargetCompatibility","lossFns","outputShapes","keyLosses","meanSquaredError","binaryCrossentropy","categoricalCrossentropy","y","loss","indexOf","slicedYShape","slicedShape","targetDim","outDim","checkInputData","collectMetrics","metrics","outputNames","wrappedMetrics","TypeError","nestedMetrics","outputMetrics","LAYERS_MODEL_FORMAT_NAME","LayersModel","args","isTraining","lineLength","positions","printFn","console","log","built","optimizer","optimizer_","getOptimizer","isOptimizerOwned","lossFunctions","warn","get","outputs","theLosses","l","lossFunction","forEach","feedOutputNames","feedOutputShapes","feedLossFns","internalOutputShapes","skipTargetIndices","metricsNames","metricsTensors","weightedLoss","appendMetric","outputIndex","metricName","metricTensor","handleMetrics","metricNamePrefix","accFn","weightedMetricFn","metric","outputShape","binaryAccuracy","sparseCategoricalCrossentropy","sparseCategoricalAccuracy","categoricalAccuracy","suffix","metricFn","getLossOrMetricName","metricResult","collectedTrainableWeights","trainableWeights","batchSize","standardizedOuts","standardizeUserDataXY","ins","concat","makeTestFunction","f","testFunction","testOuts","testLoop","verbose","steps","dataset","stepsName","numSamples","outputsIsArray","outputSymbolicTensors","retrieveSymbolicTensors","feedDict","add","tensorValue","executeOutputs","symbolicTensorNames","outputsRemaining","layers","layer","layerOutputs","output","layerOutputNames","index","remainingNames","tensor","tidy","checkNumSamples","batches","outsBatches","batchOuts","batchStart","batchIndex","batchEnd","insBatch","feeds","value","batchOut","xsRank2OrHigher","inputNames","feedInputShapes","predictLoop","lossFn","feedInputNames","stateful","sampleWeight","classWeight","standardXs","standardYs","Error","standardSampleWeights","classWeights","outs","indexArray","batchIds","sliceAlongFirstAxis","mul","div","outLabels","dedupedOutLabels","label","newLabel","dupIndex","lossValues","sampleWeights","metricsValues","totalLossFunction","totalLoss","meanLoss","mean","weightedMetric","keep","calculateLosses","regularizerLoss","variables","param","read","returnCost","totalLossValue","minimize","valOutputs","meanMetric","standardizeUserData","doValidation","validationData","inputValX","inputValY","valStandardized","valX","valY","valIns","validationSplit","splitAt","Math","floor","originalBatchSize","originalInputs","originalTargets","validationSteps","checkTrainableWeightsConsistency","trainFunction","makeTrainFunction","getDedupedMetricsNames","valFunction","callbackMetrics","n","callbacks","yieldEvery","fitLoop","epochs","shuffle","initialEpoch","out","dispose","valF","stepsPerEpoch","numTrainSamples","callbackList","history","setModel","onTrainBegin","stopTraining_","onEpochBegin","epoch","epochLogs","epochIndexArray1D","batchLogs","onBatchBegin","valOuts","onBatchEnd","onEpochEnd","onTrainEnd","syncData","standardizeOut","v","config","namedWeights","trainableOnly","weightValues","getWeights","trainable","originalName","stop","result","refCountAfterDispose","numTensorsBeforeOptmizerDisposal","memory","numTensors","numDisposedVariables","lossNames","Object","keys","outputName","metricsIdentifiers","getLossIdentifiers","getMetricIdentifiers","optimizer_config","class_name","getClassName","getConfig","trainingConfig","weighted_metrics","loss_weights","sample_weight_mode","tsConfig","lossEntry","compile","handlerOrURL","handlers","getSaveHandlers","save","encodeWeights","getNamedWeights","weightDataAndSpecs","returnString","unusedArg","modelConfig","toJSON","modelArtifacts","modelTopology","format","generatedBy","convertedBy","includeOptimizer","getTrainingConfig","weightType","optimizerWeightData","optimizerWeightSpecs","specs","concatenateArrayBuffers","userDefinedMetadata","checkSize","weightData","weightSpecs","registerClass","Functional"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\engine\\training.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: engine/training.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {io, ModelPredictConfig as ModelPredictArgs, NamedTensorMap, Optimizer, Scalar, scalar, serialization, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {BaseCallback, configureCallbacks, History, ModelLoggingVerbosity, standardizeCallbacks} from '../base_callbacks';\nimport {nameScope} from '../common';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {LossIdentifier} from '../keras_format/loss_config';\nimport {OptimizerSerialization} from '../keras_format/optimizer_config';\nimport {MetricsIdentifier, TrainingConfig} from '../keras_format/training_config';\nimport {deserialize} from '../layers/serialization';\nimport { disposeTensorsInLogs, UnresolvedLogs } from '../logs';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport {LossOrMetricFn, NamedTensor} from '../types';\nimport {checkUserDefinedMetadata} from '../user_defined_metadata';\nimport {count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique} from '../utils/generic_utils';\nimport {printSummary} from '../utils/layer_utils';\nimport {range} from '../utils/math_utils';\nimport {convertPythonicToTs} from '../utils/serialization_utils';\nimport {LayerVariable} from '../variables';\nimport {version} from '../version';\n\nimport {Container, ContainerArgs} from './container';\nimport {Dataset} from './dataset_stub';\nimport {execute, FeedDict} from './executor';\nimport {DisposeResult, SymbolicTensor} from './topology';\nimport {evaluateDataset, fitDataset, ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './training_dataset';\nimport {checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, makeBatches, ModelFitArgs, sliceArrays, sliceArraysByIndices} from './training_tensors';\nimport {ClassWeight, ClassWeightMap, computeWeightedLoss, standardizeClassWeights, standardizeWeights} from './training_utils';\n\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x: Tensor|Tensor[]|{[inputName: string]: Tensor}|\n                             {[inputName: string]: Tensor[]}): boolean {\n  return x instanceof Tensor;\n}\n\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x: Tensor|Tensor[]|\n                            {[inputName: string]: Tensor}): boolean {\n  return Array.isArray(x);\n}\n\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x: Tensor|Tensor[]|\n                           {[inputName: string]: Tensor}): boolean {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(\n    data: Tensor|Tensor[]|{[inputName: string]: Tensor}, names: string[],\n    shapes?: Shape[], checkBatchAxis = true, exceptionPrefix = ''): Tensor[] {\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      let gotUnexpectedData = false;\n      if (isDataArray(data) && (data as Tensor[]).length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(\n            `Error when checking model ${exceptionPrefix} expected no data, ` +\n            `but got ${data}`);\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map(name => null);\n  }\n\n  let arrays: Tensor[];\n  if (isDataDict(data)) {\n    data = data as {[inputName: string]: Tensor};\n    arrays = [];\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(\n            `No data provided for \"${name}\". Need data for each key in: ` +\n            `${names}`);\n      }\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data as Tensor[];\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `model expected. Expected to see ${names.length} Tensor(s), but ` +\n          `instead got the following list of Tensor(s): ${data}`);\n    }\n    arrays = data;\n  } else {\n    data = data as Tensor;\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n          `but only received one Tensor. Found: Tensor with shape ${\n              data.shape}`);\n    }\n    arrays = [data];\n  }\n\n  arrays = ensureTensorsRank2OrHigher(arrays);\n\n  // Check shape compatibility.\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s). but got array with ` +\n            `shape ${array.shape}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(\n              `${exceptionPrefix} expected a batch of elements where each ` +\n              `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` +\n              `(i.e.,tensor shape [*,${\n                  shapes[i].slice(1, shapes[i].length)}])` +\n              ` but the ${exceptionPrefix} received an input with ${\n                  array.shape[0]}` +\n              ` examples, each with shape [${\n                  array.shape.slice(1, array.shape.length)}]` +\n              ` (tensor shape [${array.shape}])`);\n        }\n      }\n    }\n  }\n  return arrays;\n}\n\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(\n    inputs: Tensor[], targets: Tensor[], weights?: Tensor[]) {\n  const setX = unique(inputs.map(input => input.shape[0]));\n  setX.sort();\n  const setY = unique(targets.map(target => target.shape[0]));\n  setY.sort();\n  // TODO(cais): Check `weights` as well.\n  if (setX.length > 1) {\n    throw new ValueError(\n        `All input Tensors (x) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(inputs.map(input => input.shape))}`);\n  }\n  if (setY.length > 1) {\n    throw new ValueError(\n        `All target Tensors (y) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(targets.map(target => target.shape))}`);\n  }\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(\n        `Input Tensors should have the same number of samples as target ` +\n        `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n        `sample(s).`);\n  }\n}\n\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(\n    targets: Tensor[], lossFns: LossOrMetricFn[], outputShapes: Shape[]) {\n  // TODO(cais): Dedicated test coverage?\n  const keyLosses = [\n    losses.meanSquaredError, losses.binaryCrossentropy,\n    losses.categoricalCrossentropy\n  ];\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(\n            `You are passing a target array of shape ${y.shape} while using ` +\n            `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n            `expects targets to be binary matrices (1s and 0s) of shape ` +\n            `[samples, classes].`);\n        // TODO(cais): Example code in error message.\n      }\n    }\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(\n              `A target Tensor with shape ${y.shape} was passed for an ` +\n              `output of shape ${shape}, while using a loss function that ` +\n              `expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(\n    data: Tensor|Tensor[], names: string[], shapes?: Shape[],\n    checkBatchAxis = true, exceptionPrefix = '') {\n  let arrays: Tensor[];\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `the model expected. Expected to see ${names.length} Tensor(s),` +\n          ` but instead got ${data.length} Tensors(s).`);\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n          `but only received one Tensor. Found: array with shape ` +\n          `${JSON.stringify(data.shape)}.`);\n    }\n    arrays = [data];\n  }\n\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s), but got array with ` +\n            `shape ${JSON.stringify(array.shape)}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(\n                `Error when checking ${exceptionPrefix}: expected ` +\n                `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                `got array with shape ${JSON.stringify(array.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(\n    metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n    {[outputName: string]: string | LossOrMetricFn},\n    outputNames: string[]): Array<Array<string|LossOrMetricFn>> {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(name => []);\n  }\n\n  let wrappedMetrics: Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  if (typeof metrics === 'string' || typeof metrics === 'function') {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === 'object') {\n    wrappedMetrics = metrics as Array<string|LossOrMetricFn>|\n        {[outputName: string]: string} | {[outputName: string]: LossOrMetricFn};\n  } else {\n    throw new TypeError(\n        'Type of metrics argument not understood. Expected an string,' +\n        `function, Array, or Object, found: ${metrics}`);\n  }\n\n  if (Array.isArray(wrappedMetrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(\n        name => wrappedMetrics as Array<string|LossOrMetricFn>);\n  } else {\n    // In this case, metrics is a dict.\n    const nestedMetrics: Array<Array<string|LossOrMetricFn>> = [];\n    for (const name of outputNames) {\n      let outputMetrics: string|LossOrMetricFn|Array<string|LossOrMetricFn> =\n          wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n      nestedMetrics.push(outputMetrics);\n    }\n    return nestedMetrics;\n  }\n}\n\nexport interface ModelEvaluateArgs {\n  /**\n   * Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * Tensor of weights to weight the contribution of different samples to the\n   * loss and metrics.\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * integer: total number of steps (batches of samples)\n   * before declaring the evaluation round finished. Ignored with the default\n   * value of `undefined`.\n   */\n  steps?: number;\n}\n\n/**\n * Configuration for calls to `LayersModel.compile()`.\n */\nexport interface ModelCompileArgs {\n  /**\n   * An instance of `tf.train.Optimizer` or a string name for an Optimizer.\n   */\n  optimizer: string|Optimizer;\n\n  /**\n   * Object function(s) or name(s) of object function(s).\n   * If the model has multiple outputs, you can use a different loss\n   * on each output by passing a dictionary or an Array of losses.\n   * The loss value that will be minimized by the model will then be the sum\n   * of all individual losses.\n   */\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n\n  /**\n   * List of metrics to be evaluated by the model during training and testing.\n   * Typically you will use `metrics=['accuracy']`.\n   * To specify different metrics for different outputs of a multi-output\n   * model, you could also pass a dictionary.\n   */\n  metrics?: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n\n  // TODO(cais): Add lossWeights, sampleWeightMode, weightedMetrics, and\n  //   targetTensors.\n}\n\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class LayersModel extends Container implements tfc.InferenceModel {\n  // The class name is 'Model' rather than 'LayersModel' for backwards\n  // compatibility since this class name shows up in the serialization format.\n  /** @nocollapse */\n  static className = 'Model';\n  protected optimizer_: Optimizer;\n  // Whether the model instance owns the optimizer: `true` if and only if\n  // `optimizer` is created from a string parameter during `compile()` call.\n  protected isOptimizerOwned: boolean;\n\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n  lossFunctions: LossOrMetricFn[];\n\n  // TODO(cais): These private variables should probably not have the string\n  //   'feed' in their names, because we are not dealing with a symbolic\n  //   backend.\n  private feedOutputShapes: Shape[];\n  private feedLossFns: LossOrMetricFn[];\n  private collectedTrainableWeights: LayerVariable[];\n  private testFunction: (data: Tensor[]) => Scalar[];\n  history: History;\n\n  // A public property that can be set by Callbacks to order early stopping\n  // during `fit()` calls.\n  protected stopTraining_: boolean;\n  protected isTraining: boolean;\n\n  metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  metricsNames: string[];\n  // Porting Note: `metrics_tensors` in PyKeras is a symbolic tensor. But given\n  //   the imperative nature of tfjs-core, `metricsTensors` is a\n  //   TypeScript function here.\n  //   Also note that due to the imperative nature of tfjs-core, `metricsTensor`\n  //   here needs an output index to keep track of which output of the\n  //   LayersModel a metric belongs to. This is unlike `metrics_tensors` in\n  //   PyKeras, which is a `list` of symbolic tensors, each of which has\n  //   implicit \"knowledge\" of the outputs it depends on.\n  metricsTensors: Array<[LossOrMetricFn, number]>;\n\n  // User defind metadata (if any).\n  private userDefinedMetadata: {};\n\n  constructor(args: ContainerArgs) {\n    super(args);\n    this.isTraining = false;\n  }\n\n  /**\n   * Print a text summary of the model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - If the model has non-sequential-like topology, the inputs each layer\n   *   receives\n   * - The total number of trainable and non-trainable parameters of the model.\n   *\n   * ```js\n   * const input1 = tf.input({shape: [10]});\n   * const input2 = tf.input({shape: [20]});\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n   * const output =\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n   *\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      throw new ValueError(\n          `This model has never been called, thus its weights have not been ` +\n          `created yet. So no summary can be displayed. Build the model ` +\n          `first (e.g., by calling it on some test data).`);\n    }\n    printSummary(this, lineLength, positions, printFn);\n  }\n\n  /**\n   * Configures and prepares the model for training and evaluation.  Compiling\n   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n   * or `evaluate` on an un-compiled model will throw an error.\n   *\n   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n   * metrics to be used for fitting and evaluating this model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  compile(args: ModelCompileArgs): void {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n    this.loss = args.loss;\n\n    if (typeof args.optimizer === 'string') {\n      this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n      this.isOptimizerOwned = true;\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(\n            `User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n      this.optimizer_ = args.optimizer;\n      this.isOptimizerOwned = false;\n    }\n\n    // TODO(cais): Add lossWeights.\n    // TODO(cais): Add sampleWeightMode.\n\n    // Prepare loss functions.\n    let lossFunctions: LossOrMetricFn[] = [];\n    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n        typeof args.loss !== 'function') {\n      args.loss = args.loss as {[outputName: string]: string};\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(\n              `Unknown entry in loss dictionary: \"${name}\". ` +\n              `Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(\n              `Output \"${name}\" is missing from loss dictionary. We assume ` +\n              `this was done on purpose, and we will not be expecting data ` +\n              `to be passed to ${name} during training`);\n        }\n        lossFunctions.push(losses.get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(\n            `When passing an Array as loss, it should have one entry per ` +\n            `model output. The model has ${this.outputs.length} output(s), ` +\n            `but you passed loss=${args.loss}.`);\n      }\n      const theLosses = args.loss as Array<string|LossOrMetricFn>;\n      lossFunctions = theLosses.map(l => losses.get(l));\n    } else {\n      const lossFunction = losses.get(args.loss);\n      this.outputs.forEach(_ => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n\n    this.lossFunctions = lossFunctions;\n\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n    for (let i = 0; i < this.outputs.length; ++i) {\n      // TODO(cais): Logic for skipping target(s).\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    }\n\n    // TODO(cais): Add logic for output masks.\n    // TODO(cais): Add logic for sample weights.\n    const skipTargetIndices: number[] = [];\n\n    // Prepare metrics.\n    this.metrics = args.metrics;\n    // TODO(cais): Add weightedMetrics.\n    this.metricsNames = ['loss'];\n    this.metricsTensors = [];\n\n    // Compute total loss.\n    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n    //   Here, metricsTensors are TypeScript functions. This difference is due\n    //   to the difference in symbolic/imperative property of the backends.\n    nameScope('loss', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        // TODO(cais): Add weightedLoss, sampleWeight and mask.\n        //   The following line should be weightedLoss\n        const weightedLoss = this.lossFunctions[i];\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + '_loss');\n        }\n      }\n\n      // Porting Note: Due to the imperative nature of the backend, we calculate\n      //   the regularizer penalties in the totalLossFunction, instead of here.\n    });\n\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n    // TODO(cais): Add nestedWeightedMetrics.\n\n    /**\n     * Helper function used in loop below.\n     */\n    const appendMetric =\n        (outputIndex: number, metricName: string,\n         metricTensor: LossOrMetricFn) => {\n          if (this.outputNames.length > 1) {\n            metricName = this.outputNames[outputIndex] + '_' + metricName;\n          }\n          this.metricsNames.push(metricName);\n          this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n\n    nameScope('metric', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const outputMetrics = nestedMetrics[i];\n        // TODO(cais): Add weights and outputWeightedMetrics.\n\n        // TODO(cais): Add optional arg `weights` to the following function.\n        const handleMetrics = (metrics: Array<string|LossOrMetricFn>) => {\n          const metricNamePrefix = '';\n          let metricName: string;\n          let accFn: LossOrMetricFn;\n          let weightedMetricFn: LossOrMetricFn;\n          //  TODO(cais): Use 'weights_' for weighted metrics.\n\n          for (const metric of metrics) {\n            if (typeof metric === 'string' &&\n                ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                    -1) {\n              const outputShape = this.internalOutputShapes[i];\n\n              if (outputShape[outputShape.length - 1] === 1 ||\n                  this.lossFunctions[i] === losses.binaryCrossentropy) {\n                // case: binary accuracy/crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryCrossentropy;\n                }\n              } else if (\n                  this.lossFunctions[i] ===\n                  losses.sparseCategoricalCrossentropy) {\n                // case: categorical accuracy / crossentropy with sparse\n                // targets.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalCrossentropy;\n                }\n              } else {\n                // case: categorical accuracy / crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalCrossentropy;\n                }\n              }\n              let suffix: string;\n              if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                suffix = 'acc';\n              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                suffix = 'ce';\n              }\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = Metrics.get(metric);\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = metricFn;\n              metricName =\n                  metricNamePrefix + Metrics.getLossOrMetricName(metric);\n            }\n\n            // TODO(cais): Add weighting and masking to metricResult.\n            let metricResult: LossOrMetricFn;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n\n        handleMetrics(outputMetrics);\n        // TODO(cais): Call handleMetrics with weights.\n      }\n    });\n\n    // Porting Notes: Given the imperative backend of tfjs-core,\n    //   there is no need for constructing the symbolic graph and placeholders.\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n\n  /**\n   * Check trainable weights count consistency.\n   *\n   * This will raise a warning if `this.trainableWeights` and\n   * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n   * numbers of parameters).\n   * Inconsistency will typically arise when one modifies `model.trainable`\n   * without calling `model.compile()` again.\n   */\n  protected checkTrainableWeightsConsistency(): void {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n    if (this.trainableWeights.length !==\n        this.collectedTrainableWeights.length) {\n      console.warn(\n          'Discrepancy between trainableweights and collected trainable ' +\n          'weights. Did you set `model.trainable` without calling ' +\n          '`model.compile()` afterwards?');\n    }\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(\n   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateArgs`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // TODO(cais): Standardize `config.sampleWeights` as well.\n    // Validate user data.\n    const checkBatchAxis = true;\n    const standardizedOuts =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    try {\n      // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n      // of the input to 0.\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts =\n          this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g.\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async evaluateDataset(dataset: Dataset<{}>, args?: ModelEvaluateDatasetArgs):\n      Promise<Scalar|Scalar[]> {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n\n  /**\n   * Get number of samples provided for training, evaluation or prediction.\n   *\n   * @param ins Input `tf.Tensor`.\n   * @param batchSize Integer batch size, optional.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring loop finished. Optional.\n   * @param stepsName The public API's parameter name for `steps`.\n   * @returns Number of samples provided.\n   */\n  private checkNumSamples(\n      ins: Tensor|Tensor[], batchSize?: number, steps?: number,\n      stepsName = 'steps'): number {\n    let numSamples: number;\n    if (steps != null) {\n      numSamples = null;\n      if (batchSize != null) {\n        throw new ValueError(\n            `If ${stepsName} is set, batchSize must be null or undefined.` +\n            `Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(\n          `Either the input data should have a defined shape, or ` +\n          `${stepsName} shoud be specified.`);\n    }\n    return numSamples;\n  }\n\n  /**\n   * Execute internal tensors of the model with input data feed.\n   * @param inputs Input data feed. Must match the inputs of the model.\n   * @param outputs Names of the output tensors to be fetched. Must match\n   *   names of the SymbolicTensors that belong to the graph.\n   * @returns Fetched values for `outputs`.\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs: string|string[]):\n      Tensor|Tensor[] {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError(\n          '`outputs` is an empty Array, which is not allowed.');\n    }\n\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames =\n        (outputsIsArray ? outputs : [outputs]);\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n\n    // Format the input into a FeedDict.\n    const feedDict = new FeedDict();\n    if (inputs instanceof Tensor) {\n      inputs = [inputs];\n    }\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== this.inputs.length) {\n        throw new ValueError(\n            `The number of inputs provided (${inputs.length}) ` +\n            `does not match the number of inputs of this model ` +\n            `(${this.inputs.length}).`);\n      }\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n    } else {\n      for (const input of this.inputs) {\n        const tensorValue = inputs[input.name];\n        if (tensorValue == null) {\n          throw new ValueError(\n              `No value is provided for the model's input ${input.name}`);\n        }\n        feedDict.add(input, tensorValue);\n      }\n    }\n\n    // Run execution.\n    const executeOutputs = execute(outputSymbolicTensors, feedDict) as Tensor[];\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n\n  /**\n   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n   */\n  private retrieveSymbolicTensors(symbolicTensorNames: string[]):\n      SymbolicTensor[] {\n    const outputSymbolicTensors: SymbolicTensor[] =\n        pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n    for (const layer of this.layers) {\n      const layerOutputs: SymbolicTensor[] =\n          Array.isArray(layer.output) ? layer.output : [layer.output];\n      const layerOutputNames = layerOutputs.map(output => output.name);\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n\n    if (outputsRemaining > 0) {\n      const remainingNames: string[] = [];\n      outputSymbolicTensors.forEach((tensor, i) => {\n        if (tensor == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(\n          `Cannot find SymbolicTensors for output name(s): ` +\n          `${JSON.stringify(remainingNames)}`);\n    }\n    return outputSymbolicTensors;\n  }\n\n  /**\n   * Helper method to loop over some data in batches.\n   *\n   * Porting Note: Not using the functional approach in the Python equivalent\n   *   due to the imperative backend.\n   * Porting Note: Does not support step mode currently.\n   *\n   * @param ins: input data\n   * @param batchSize: integer batch size.\n   * @param verbose: verbosity model\n   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n   *   `tf.Tensor` (if multipe outputs).\n   */\n  private predictLoop(ins: Tensor|Tensor[], batchSize = 32, verbose = false):\n      Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n      if (verbose) {\n        throw new NotImplementedError(\n            'Verbose predictLoop() is not implemented yet.');\n      }\n\n      // Sample-based predictions.\n      // Porting Note: Tensor currently does not support sliced assignments as\n      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n      //   iterating over the batches.\n\n      const batches = makeBatches(numSamples, batchSize);\n      const outsBatches: Tensor[][] = this.outputs.map(output => []);\n\n      // TODO(cais): Can the scope() be pushed down inside the for loop?\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          // TODO(cais): Take care of the case of the last element is a flag for\n          //   training/test.\n          const insBatch = sliceArrays(ins, batchStart, batchEnd);\n\n          // Construct the feeds for execute();\n          const feeds = [];\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({key: this.inputs[i], value: insBatch[i]});\n            }\n          } else {\n            feeds.push({key: this.inputs[0], value: insBatch});\n          }\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict) as Tensor[];\n        });\n        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n      }\n      return singletonOrArray(\n          outsBatches.map(batches => tfc.concat(batches, 0)));\n    });\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFlow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n   * ```\n   *\n   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param args A `ModelPredictArgs` object containing optional fields.\n   *\n   * @return Prediction results as a `tf.Tensor`(s).\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}): Tensor|Tensor[] {\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(\n        xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n    try {\n      // TODO(cais): Take care of stateful models.\n      //   if (this.stateful) ...\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predictOnBatch(tf.ones([8, 10])).print();\n   * ```\n   * @param x: Input samples, as a Tensor (for models with exactly one\n   *   input) or an array of Tensors (for models with more than one input).\n   * @return Tensor(s) of predictions\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predictOnBatch(x: Tensor|Tensor[]): Tensor|Tensor[] {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true);\n    // TODO(cais): Take care of the learning_phase boolean flag.\n    //   if (this.useLearningPhase) ...\n    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n    return this.predictLoop(x, batchSize);\n  }\n\n  protected standardizeUserDataXY(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor}, checkBatchAxis = true,\n      batchSize?: number): [Tensor[], Tensor[]] {\n    // TODO(cais): Add sampleWeight, classWeight\n    if (this.optimizer_ == null) {\n      throw new RuntimeError(\n          'You must compile a model before training/testing. Use ' +\n          'LayersModel.compile(modelCompileArgs).');\n    }\n    const outputShapes: Shape[] = [];\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n      if (lossFn === losses.sparseCategoricalCrossentropy) {\n        outputShapes.push(\n            outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        // Porting Note: Because of strong typing `lossFn` must be a function.\n        outputShapes.push(outputShape);\n      }\n    }\n    x = standardizeInputData(\n        x, this.feedInputNames, this.feedInputShapes, false, 'input');\n    y = standardizeInputData(\n        y, this.feedOutputNames, outputShapes, false, 'target');\n    // TODO(cais): Standardize sampleWeights & classWeights.\n    checkArrayLengths(x, y, null);\n    // TODO(cais): Check sampleWeights as well.\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(\n            `In a stateful network, you should only pass inputs with a ` +\n            `number of samples that is divisible by the batch size ` +\n            `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n    return [x, y];\n  }\n\n  protected async standardizeUserData(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      sampleWeight?: Tensor|Tensor[]|{[outputName: string]: Tensor},\n      classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap,\n      checkBatchAxis = true,\n      batchSize?: number): Promise<[Tensor[], Tensor[], Tensor[]]> {\n    const [standardXs, standardYs] =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    // TODO(cais): Handle sampleWeights.\n    if (sampleWeight != null) {\n      throw new Error('sample weight is not supported yet.');\n    }\n\n    let standardSampleWeights: Tensor[] = null;\n    if (classWeight != null) {\n      const classWeights =\n          standardizeClassWeights(classWeight, this.outputNames);\n      standardSampleWeights = [];\n      for (let i = 0; i < classWeights.length; ++i) {\n        standardSampleWeights.push(\n            await standardizeWeights(standardYs[i], null, classWeights[i]));\n      }\n    }\n\n    // TODO(cais): Deal with the case of model.stateful == true.\n    return [standardXs, standardYs, standardSampleWeights];\n  }\n\n  /**\n   * Loop over some test data in batches.\n   * @param f A Function returning a list of tensors.\n   * @param ins Array of tensors to be fed to `f`.\n   * @param batchSize Integer batch size or `null` / `undefined`.\n   * @param verbose verbosity mode.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring test finished. Ignored with the default value of `null` /\n   * `undefined`.\n   * @returns Array of Scalars.\n   */\n  private testLoop(\n      f: (data: Tensor[]) => Scalar[], ins: Tensor[], batchSize?: number,\n      verbose = 0, steps?: number): Scalar[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n      const outs: Scalar[] = [];\n      if (verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n      }\n      // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n      if (steps != null) {\n        throw new NotImplementedError(\n            'steps mode in testLoop() is not implemented yet');\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range(0, numSamples));\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds =\n              K.sliceAlongFirstAxis(\n                  indexArray, batchStart, batchEnd - batchStart) as Tensor1D;\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Scalar[];\n          const batchOuts = f(insBatch);\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(scalar(0));\n            }\n          }\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] =\n                tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n          }\n        }\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = tfc.div(outs[i], numSamples);\n        }\n      }\n      return outs;\n    });\n  }\n\n  protected getDedupedMetricsNames(): string[] {\n    const outLabels = this.metricsNames;\n    // Rename duplicated metrics names (can happen with an output layer\n    // shared among multiple dataflows).\n    const dedupedOutLabels = [];\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n      dedupedOutLabels.push(newLabel);\n    }\n    return dedupedOutLabels;\n  }\n\n  /**\n   * Creates a function that performs the following actions:\n   *\n   * 1. computes the losses\n   * 2. sums them to get the total loss\n   * 3. call the optimizer computes the gradients of the LayersModel's\n   *    trainable weights w.r.t. the total loss and update the variables\n   * 4. calculates the metrics\n   * 5. returns the values of the losses and metrics.\n   */\n  protected makeTrainFunction(): (data: Tensor[]) => Scalar[] {\n    return (data: Tensor[]) => {\n      const lossValues: Scalar[] = [];\n\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(\n          this.inputs.length, this.inputs.length + this.outputs.length);\n      const sampleWeights = data.slice(\n          this.inputs.length + this.outputs.length,\n          this.inputs.length + this.outputs.length * 2);\n\n      const metricsValues: Scalar[] = [];\n\n      // Create a function that computes the total loss based on the\n      // inputs. This function is used for obtaining gradients through\n      // backprop.\n      const totalLossFunction = () => {\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs =\n            execute(this.outputs, feedDict, {'training': true}) as Tensor[];\n        // TODO(cais): Take care of the case of multiple outputs from a\n        //   single layer?\n\n        let totalLoss: Tensor;\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          let loss = lossFunction(targets[i], outputs[i]);\n          if (sampleWeights[i] != null) {\n            loss = computeWeightedLoss(loss, sampleWeights[i]);\n          }\n\n          // TODO(cais): push Scalar instead.\n          const meanLoss: Scalar = tfc.mean(loss);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          lossValues.push(meanLoss);\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n        }\n\n        // Compute the metrics.\n        // TODO(cais): These should probably be calculated outside\n        //   totalLossFunction to benefit speed?\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          let weightedMetric: Scalar;\n\n          if (this.outputs.length > 1 && i < this.outputs.length) {\n            weightedMetric = lossValues[i];\n          } else {\n            const metric = this.metricsTensors[i][0];\n            const outputIndex = this.metricsTensors[i][1];\n            weightedMetric =\n                tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          }\n\n          tfc.keep(weightedMetric);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          metricsValues.push(weightedMetric);\n        }\n\n        totalLoss = tfc.mean(totalLoss);\n\n        // Add regularizer penalties.\n        this.calculateLosses().forEach(regularizerLoss => {\n          totalLoss = tfc.add(totalLoss, regularizerLoss);\n        });\n\n        return totalLoss as Scalar;\n      };\n\n      const variables = this.collectedTrainableWeights.map(\n          param => param.read() as tfc.Variable);\n      const returnCost = true;\n      const totalLossValue =\n          this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n\n  /**\n   * Create a function which, when invoked with an array of `tf.Tensor`s as a\n   * batch of inputs, returns the prespecified loss and metrics of the model\n   * under the batch of input data.\n   */\n  private makeTestFunction() {\n    this.testFunction = (data: Tensor[]) => {\n      return tfc.tidy(() => {\n        const valOutputs: Scalar[] = [];\n        let totalLoss: Scalar;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(\n            this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict) as Tensor[];\n        // Compute total loss.\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          // TODO(cais): Add sample weighting and replace the simple\n          // averaging.\n          const loss: Scalar = tfc.mean(lossFunction(targets[i], outputs[i]));\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n          valOutputs.push(totalLoss);\n        }\n        // Compute the metrics.\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          // TODO(cais): Replace K.mean() with a proper weighting function.\n          const meanMetric =\n              tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric as Scalar);\n        }\n        return valOutputs;\n      });\n    };\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a\n   * dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * for (let i = 1; i < 5 ; ++i) {\n   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *       batchSize: 4,\n   *       epochs: 3\n   *   });\n   *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n   * }\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you\n   * can also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named,\n   * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args A `ModelFitArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input\n   * data and what the model expects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    if (this.isTraining) {\n      throw new Error(\n          'Cannot start training because another fit() call is ongoing.');\n    }\n    this.isTraining = true;\n    let inputs: Tensor[];\n    let targets: Tensor[];\n    let originalInputs: Tensor[];\n    let originalTargets: Tensor[];\n    let inputValX: Tensor|Tensor[];\n    let inputValY: Tensor|Tensor[];\n    let valX: Tensor|Tensor[];\n    let valY: Tensor|Tensor[];\n    let sampleWeights: Tensor[];\n    try {\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n\n      // Validate user data.\n      // TODO(cais): Support sampleWeight.\n      const checkBatchAxis = false;\n      const standardizedOuts =\n          await this.standardizeUserData(\n              x, y, args.sampleWeight, args.classWeight, checkBatchAxis,\n              batchSize) as [Tensor[], Tensor[], Tensor[]];\n      inputs = standardizedOuts[0];\n      targets = standardizedOuts[1];\n      sampleWeights = standardizedOuts[2];\n\n      // Prepare validation data.\n      let doValidation = false;\n      let valIns: Tensor[];\n      if (args.validationData != null && args.validationData.length > 0) {\n        doValidation = true;\n        if (args.validationData.length === 2) {\n          // config.validationData consists of valX and valY.\n          inputValX = args.validationData[0];\n          inputValY = args.validationData[1];\n        } else if (args.validationData.length === 3) {\n          throw new NotImplementedError(\n              'validationData including sample weights is not supported yet.');\n        } else {\n          throw new ValueError(\n              `When passing validation data, it must contain 2 (valX, valY) ` +\n              `or 3 (valX, valY, valSampleWeight) items; ` +\n              `${args.validationData} is invalid.`);\n        }\n\n        const checkBatchAxis = true;\n        const valStandardized =\n            await this.standardizeUserData(\n                inputValX, inputValY, null, /** Unused sample weights. */\n                null,                       /** Unused class weights. */\n                checkBatchAxis, batchSize) as [Tensor[], Tensor[], Tensor[]];\n        valX = valStandardized[0];\n        valY = valStandardized[1];\n        valIns = valX.concat(valY);\n        // TODO(cais): Add useLearningPhase data properly.\n      } else if (\n          args.validationSplit != null && args.validationSplit > 0 &&\n          args.validationSplit < 1) {\n        doValidation = true;\n        // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n        const splitAt =\n            Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n        const originalBatchSize = inputs[0].shape[0];\n        valX = sliceArrays(inputs, splitAt, originalBatchSize) as Tensor[];\n        originalInputs = inputs;\n        inputs = sliceArrays(inputs, 0, splitAt) as Tensor[];\n        valY = sliceArrays(targets, splitAt, originalBatchSize) as Tensor[];\n        originalTargets = targets;\n        targets = sliceArrays(targets, 0, splitAt) as Tensor[];\n        // TODO(cais): Once sampleWeights becomes available, slice it to get\n        //   valSampleWeights.\n        valIns = valX.concat(valY);\n\n        // TODO(cais): Add useLearningPhase data properly.\n      } else if (args.validationSteps != null) {\n        doValidation = true;\n        // TODO(cais): Add useLearningPhase.\n      }\n\n      const ins = inputs.concat(targets).concat(sampleWeights);\n\n      this.checkTrainableWeightsConsistency();\n\n      // TODO(cais): Handle use_learning_phase and learning_phase?\n\n      // Porting Note: Here we see a key deviation of tfjs-layers from\n      // Keras.\n      //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n      //  we do not construct symbolic computation graphs to embody the\n      //  training process. Instead, we define a function that performs the\n      //  training action. In PyKeras, the data (inputs and targets) are fed\n      //  through graph placeholders. In tfjs-layers, the data are fed as\n      //  function arguments. Since the function are defined below in the\n      //  scope, we don't have equivalents of PyKeras's\n      //  `_make_train_funciton`.\n      const trainFunction = this.makeTrainFunction();\n      const outLabels = this.getDedupedMetricsNames();\n\n      let valFunction: (data: Tensor[]) => Scalar[];\n      let callbackMetrics: string[];\n      if (doValidation) {\n        this.makeTestFunction();\n        valFunction = this.testFunction;\n        callbackMetrics =\n            outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n      } else {\n        valFunction = null;\n        valIns = [];\n        callbackMetrics = outLabels.slice();\n      }\n\n      const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n      const out = await this.fitLoop(\n          trainFunction, ins, outLabels, batchSize, args.epochs,\n          args.verbose, callbacks, valFunction, valIns, args.shuffle,\n          callbackMetrics, args.initialEpoch, null, null);\n      return out;\n    } finally {\n      this.isTraining = false;\n      // Memory clean up.\n      disposeNewTensors(inputs, x);\n      disposeNewTensors(targets, y);\n      disposeNewTensors(originalInputs, x);\n      disposeNewTensors(originalTargets, y);\n      disposeNewTensors(valX as Tensor[], inputValX);\n      disposeNewTensors(valY as Tensor[], inputValY);\n      if (sampleWeights != null) {\n        tfc.dispose(sampleWeights);\n      }\n    }\n    // TODO(cais): Add value to outLabels.\n  }\n\n  /**\n   * Abstract fit function for `f(ins)`.\n   * @param f A Function returning a list of tensors. For training, this\n   *   function is expected to perform the updates to the variables.\n   * @param ins List of tensors to be fed to `f`.\n   * @param outLabels List of strings, display names of the outputs of `f`.\n   * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n   * @param epochs Number of times to iterate over the data. Default : 1.\n   * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n   * @param callbacks List of callbacks to be called during training.\n   * @param valF Function to call for validation.\n   * @param valIns List of tensors to be fed to `valF`.\n   * @param shuffle Whether to shuffle the data at the beginning of every\n   * epoch. Default : true.\n   * @param callbackMetrics List of strings, the display names of the metrics\n   *   passed to the callbacks. They should be the concatenation of the\n   *   display names of the outputs of `f` and the list of display names\n   *   of the outputs of `valF`.\n   * @param initialEpoch Epoch at which to start training (useful for\n   *   resuming a previous training run). Default : 0.\n   * @param stepsPerEpoch Total number of steps (batches on samples) before\n   *   declaring one epoch finished and starting the next epoch. Ignored with\n   *   the default value of `undefined` or `null`.\n   * @param validationSteps Number of steps to run validation for (only if\n   *   doing validation from data tensors). Not applicable for tfjs-layers.\n   * @returns A `History` object.\n   */\n  async fitLoop(\n      f: (data: Tensor[]) => Scalar[], ins: Tensor[], outLabels?:\n      string[], batchSize?: number, epochs?: number, verbose?: number,\n      callbacks?: BaseCallback[], valF?: (data: Tensor[]) => Scalar[], valIns?:\n      Tensor[], shuffle?: boolean|string, callbackMetrics?: string[],\n      initialEpoch?: number, stepsPerEpoch?: number, validationSteps?: number):\n      Promise<History> {\n    if (batchSize == null) {\n      batchSize = 32;\n    }\n    if (epochs == null) {\n      epochs = 1;\n    }\n    if (shuffle == null) {\n      shuffle = true;\n    }\n    if (initialEpoch == null) {\n      initialEpoch = 0;\n    }\n\n    // TODO(cais): Change const to let below when implementing validation.\n    let doValidation = false;\n    if (valF != null && valIns != null) {\n      doValidation = true;\n      // TODO(cais): verbose message.\n    }\n    if (validationSteps != null) {\n      doValidation = true;\n      if (stepsPerEpoch == null) {\n        throw new ValueError(\n            'Can only use `validationSteps` when doing step-wise training, ' +\n            'i.e., `stepsPerEpoch` must be set.');\n      }\n    }\n\n    const numTrainSamples =\n        this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n    let indexArray: number[];\n    if (numTrainSamples != null) {\n      indexArray = range(0, numTrainSamples);\n    }\n\n    if (verbose == null) {\n      verbose = 1;\n    }\n\n    const {callbackList, history} = configureCallbacks(\n        callbacks, verbose, epochs, initialEpoch, numTrainSamples,\n        stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n    callbackList.setModel(this);\n    this.history = history;\n    await callbackList.onTrainBegin();\n    this.stopTraining_ = false;\n    // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n    // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n\n    for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n      await callbackList.onEpochBegin(epoch);\n      const epochLogs: UnresolvedLogs = {};\n      if (stepsPerEpoch != null) {\n        throw new NotImplementedError(\n            'stepsPerEpoch mode is not implemented yet.');\n      } else {\n        if (shuffle === 'batch') {\n          throw new NotImplementedError('batch shuffling is not implemneted'\n                                        + ' yet');\n        } else if (shuffle) {\n          util.shuffle(indexArray);\n        }\n        // Convert the potentially shuffled indices to Tensor1D, to avoid the\n        // cost of repeated creation of Array1Ds later on.\n        const epochIndexArray1D = tensor1d(indexArray);\n\n        const batches = makeBatches(numTrainSamples, batchSize);\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchLogs: UnresolvedLogs = {};\n          await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n          tfc.tidy(() => {\n            const batchStart = batches[batchIndex][0];\n            const batchEnd = batches[batchIndex][1];\n            const batchIds = K.sliceAlongFirstAxis(\n                                 epochIndexArray1D, batchStart,\n                                 batchEnd - batchStart) as Tensor1D;\n            batchLogs['batch'] = batchIndex;\n            batchLogs['size'] = batchEnd - batchStart;\n\n            // TODO(cais): In ins, train flag can be a number, instead of an\n            //   Tensor? Do we need to handle this in tfjs-layers?\n            const insBatch = sliceArraysByIndices(ins, batchIds) as Tensor[];\n            const outs = f(insBatch);\n            for (let i = 0; i < outLabels.length; ++i) {\n              const label = outLabels[i];\n              const out = outs[i];\n              batchLogs[label] = out;\n              tfc.keep(out);\n              // TODO(cais): Use scope() to avoid ownership.\n            }\n\n            if (batchIndex === batches.length - 1) {  // Last batch.\n              if (doValidation) {\n                const valOuts = this.testLoop(valF, valIns, batchSize);\n                // Porting Notes: In tfjs-layers, valOuts is always an Array.\n                for (let i = 0; i < outLabels.length; ++i) {\n                  const label = outLabels[i];\n                  const out = valOuts[i];\n                  tfc.keep(out);\n                  // TODO(cais): Use scope() to avoid ownership.\n                  epochLogs['val_' + label] = out;\n                }\n              }\n            }\n          });\n\n          await callbackList.onBatchEnd(batchIndex, batchLogs);\n          disposeTensorsInLogs(batchLogs);\n\n          if (this.stopTraining_) {\n            break;\n          }\n          // TODO(cais): return outs as list of Tensor.\n        }\n\n        epochIndexArray1D.dispose();\n      }\n      // TODO(cais): Run validation at the end of the epoch.\n      await callbackList.onEpochEnd(epoch, epochLogs);\n      if (this.stopTraining_) {\n        break;\n      }\n    }\n    await callbackList.onTrainEnd();\n\n    await this.history.syncData();\n    return this.history;\n  }\n\n  // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n  /**\n   * Trains the model using a dataset object.\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for training. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g.\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs.\n   *   Of the two items in the array, the first is the input feature(s) and\n   *   the second is the output target(s).\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fitDataset<T>(dataset: Dataset<T>, args: ModelFitDatasetArgs<T>):\n      Promise<History> {\n    return fitDataset(this, dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and metric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target data. It could be either a `tf.Tensor` or multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    // TODO(cais): Support sampleWeight and classWeight.\n    // TODO(cais): Support Dataset objects.\n    const standardizeOut = await this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses = trainFunction(inputs.concat(targets));\n    const lossValues: number[] = [];\n    for (const loss of losses) {\n      const v = await loss.data();\n      lossValues.push(v[0]);\n    }\n    tfc.dispose(losses);\n    disposeNewTensors(standardizeOut[0], x);\n    disposeNewTensors(standardizeOut[1], y);\n    return singletonOrArray(lossValues);\n  }\n\n  /**\n   * Extract weight values of the model.\n   *\n   * @param config: An instance of `io.SaveConfig`, which specifies\n   * model-saving options such as whether only trainable weights are to be\n   * saved.\n   * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n   *   non-uniqueified weight names) to their values.\n   */\n  protected getNamedWeights(config?: io.SaveConfig): NamedTensor[] {\n    const namedWeights: NamedTensor[] = [];\n\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        // Optionally skip non-trainable weights.\n        continue;\n      }\n      namedWeights.push(\n          {name: weights[i].originalName, tensor: weightValues[i]});\n    }\n    return namedWeights;\n  }\n\n  /**\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const input = tf.input({shape: [10]});\n   * const output = tf.layers.dense({units: 1}).apply(input);\n   * const model = tf.model({inputs: [input], outputs: [output]});\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10\n   * values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  set stopTraining(stop: boolean) {\n    this.stopTraining_ = stop;\n  }\n\n  get stopTraining(): boolean {\n    return this.stopTraining_;\n  }\n\n  get optimizer(): Optimizer {\n    return this.optimizer_;\n  }\n\n  set optimizer(optimizer: Optimizer) {\n    if (this.optimizer_ !== optimizer) {\n      this.optimizer_ = optimizer;\n      this.isOptimizerOwned = false;\n    }\n  }\n\n  override dispose(): DisposeResult {\n    const result = super.dispose();\n    if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n        this.isOptimizerOwned) {\n      const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n      this.optimizer_.dispose();\n      result.numDisposedVariables +=\n          numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n    }\n    return result;\n  }\n\n  private getLossIdentifiers(): LossIdentifier|LossIdentifier[]|\n      {[outputName: string]: LossIdentifier} {\n    let lossNames: LossIdentifier|LossIdentifier[]|\n        {[outputName: string]: LossIdentifier};\n    if (typeof this.loss === 'string') {\n      lossNames = toSnakeCase(this.loss) as LossIdentifier;\n    } else if (Array.isArray(this.loss)) {\n      for (const loss of this.loss) {\n        if (typeof loss !== 'string') {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n      lossNames = (this.loss as string[]).map(name => toSnakeCase(name)) as\n          LossIdentifier[];\n    } else {\n      const outputNames = Object.keys(this.loss);\n      lossNames = {} as {[outputName: string]: LossIdentifier};\n      const losses =\n          this.loss as {[outputName: string]: LossOrMetricFn | string};\n      for (const outputName of outputNames) {\n        if (typeof losses[outputName] === 'string') {\n          lossNames[outputName] =\n              toSnakeCase(losses[outputName] as string) as LossIdentifier;\n        } else {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n    }\n    return lossNames;\n  }\n\n  private getMetricIdentifiers(): MetricsIdentifier[]|\n      {[key: string]: MetricsIdentifier} {\n    if (typeof this.metrics === 'string' ||\n        typeof this.metrics === 'function') {\n      return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n    } else if (Array.isArray(this.metrics)) {\n      return this.metrics.map(\n          metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n    } else {\n      const metricsIdentifiers: {[key: string]: MetricsIdentifier} = {};\n      for (const key in this.metrics) {\n        metricsIdentifiers[key] =\n            toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n      }\n      return metricsIdentifiers;\n    }\n  }\n\n  protected getTrainingConfig(): TrainingConfig {\n    return {\n      loss: this.getLossIdentifiers(),\n      metrics: this.getMetricIdentifiers(),\n      optimizer_config: {\n        class_name: this.optimizer.getClassName(),\n        config: this.optimizer.getConfig()\n      } as OptimizerSerialization\n    };\n    // TODO(cais): Add weight_metrics when they are supported.\n    // TODO(cais): Add sample_weight_mode when it's supported.\n    // TODO(cais): Add loss_weights when it's supported.\n  }\n\n  loadTrainingConfig(trainingConfig: TrainingConfig) {\n    if (trainingConfig.weighted_metrics != null) {\n      throw new Error('Loading weight_metrics is not supported yet.');\n    }\n    if (trainingConfig.loss_weights != null) {\n      throw new Error('Loading loss_weights is not supported yet.');\n    }\n    if (trainingConfig.sample_weight_mode != null) {\n      throw new Error('Loading sample_weight_mode is not supported yet.');\n    }\n\n    const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config) as\n        serialization.ConfigDict;\n    const optimizer = deserialize(tsConfig) as Optimizer;\n\n    let loss;\n    if (typeof trainingConfig.loss === 'string') {\n      loss = toCamelCase(trainingConfig.loss);\n    } else if (Array.isArray(trainingConfig.loss)) {\n      loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n    } else if (trainingConfig.loss != null) {\n      loss = {} as {[outputName: string]: LossIdentifier};\n      for (const key in trainingConfig.loss) {\n        loss[key] = toCamelCase(trainingConfig.loss[key]) as LossIdentifier;\n      }\n    }\n\n    let metrics;\n    if (Array.isArray(trainingConfig.metrics)) {\n      metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n    } else if (trainingConfig.metrics != null) {\n      metrics = {} as {[outputName: string]: MetricsIdentifier};\n      for (const key in trainingConfig.metrics) {\n        metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n      }\n    }\n\n    this.compile({loss, metrics, optimizer});\n  }\n\n  /**\n   * Save the configuration and/or weights of the LayersModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 2. Saving `model`'s topology and weights to browser\n   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('indexeddb://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 3. Saving `model`'s topology and weights as two files\n   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n   * browser.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('downloads://my-model-1');\n   * ```\n   *\n   * Example 4. Send  `model`'s topology and weights to an HTTP server.\n   * See the documentation of `tf.io.http` for more details\n   * including specifying request parameters and implementation of the\n   * server.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('http://my-server/model/upload');\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new ValueError(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new ValueError(\n          'LayersModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    const weightDataAndSpecs =\n        await io.encodeWeights(this.getNamedWeights(config));\n\n    const returnString = false;\n    const unusedArg: {} = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n    const modelArtifacts: io.ModelArtifacts = {\n      modelTopology: modelConfig,\n      format: LAYERS_MODEL_FORMAT_NAME,\n      generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n      convertedBy: null,\n    };\n\n    const includeOptimizer = config == null ? false : config.includeOptimizer;\n    if (includeOptimizer && this.optimizer != null) {\n      modelArtifacts.trainingConfig = this.getTrainingConfig();\n      const weightType = 'optimizer';\n      const {data: optimizerWeightData, specs: optimizerWeightSpecs} =\n          await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n      weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n      weightDataAndSpecs.data = io.concatenateArrayBuffers(\n          [weightDataAndSpecs.data, optimizerWeightData]);\n    }\n\n    if (this.userDefinedMetadata != null) {\n      // Check serialized size of user-defined metadata.\n      const checkSize = true;\n      checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n      modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n    }\n\n    modelArtifacts.weightData = weightDataAndSpecs.data;\n    modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n    return handlerOrURL.save(modelArtifacts);\n  }\n\n  /**\n   * Set user-defined metadata.\n   *\n   * The set metadata will be serialized together with the topology\n   * and weights of the model during `save()` calls.\n   *\n   * @param setUserDefinedMetadata\n   */\n  setUserDefinedMetadata(userDefinedMetadata: {}): void {\n    checkUserDefinedMetadata(userDefinedMetadata, this.name);\n    this.userDefinedMetadata = userDefinedMetadata;\n  }\n\n  /**\n   * Get user-defined metadata.\n   *\n   * The metadata is supplied via one of the two routes:\n   *   1. By calling `setUserDefinedMetadata()`.\n   *   2. Loaded during model loading (if the model is constructed\n   *      via `tf.loadLayersModel()`.)\n   *\n   * If no user-defined metadata is available from either of the\n   * two routes, this function will return `undefined`.\n   */\n  getUserDefinedMetadata(): {} {\n    return this.userDefinedMetadata;\n  }\n}\nserialization.registerClass(LayersModel);\n\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Functional extends LayersModel {\n  static override className = 'Functional';\n}\nserialization.registerClass(Functional);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}