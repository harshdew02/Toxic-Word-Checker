{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, assertShapesMatch, getTypedArrayFromDType } from '../util';\nimport { tensor } from './tensor';\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction inTopKAsync_(_x, _x2) {\n  return _inTopKAsync_.apply(this, arguments);\n}\nfunction _inTopKAsync_() {\n  _inTopKAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(predictions, targets) {\n    var k,\n      $predictions,\n      $targets,\n      lastDim,\n      predictionsVals,\n      targetsVals,\n      batch,\n      size,\n      precision,\n      b,\n      offset,\n      vals,\n      valAndInd,\n      i,\n      _i,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          k = _args.length > 2 && _args[2] !== undefined ? _args[2] : 1;\n          $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n          $targets = convertToTensor(targets, 'targets', 'inTopK');\n          assert($predictions.rank > 1, function () {\n            return 'inTopK() expects the predictions to be of rank 2 or higher, ' + \"but got \".concat($predictions.rank);\n          });\n          assert($predictions.rank - 1 === $targets.rank, function () {\n            return \"predictions rank should be 1 larger than \" + \"targets rank, but got predictions rank \" + \"\".concat($predictions.rank, \" and targets rank \").concat($targets.rank);\n          });\n          assertShapesMatch($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, \"predictions's shape should be align with the targets' shape, \" + 'except the last dimension.');\n          lastDim = $predictions.shape[$predictions.shape.length - 1];\n          assert(k > 0 && k <= lastDim, function () {\n            return \"'k' passed to inTopK() must be > 0 && <= the predictions last \" + \"dimension (\".concat(lastDim, \"), but got \").concat(k);\n          });\n          _context.next = 10;\n          return $predictions.data();\n        case 10:\n          predictionsVals = _context.sent;\n          _context.next = 13;\n          return $targets.data();\n        case 13:\n          targetsVals = _context.sent;\n          // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n          // and look up topK along lastDim.\n          batch = predictionsVals.length / lastDim, size = lastDim;\n          precision = getTypedArrayFromDType('bool', batch);\n          b = 0;\n        case 17:\n          if (!(b < batch)) {\n            _context.next = 35;\n            break;\n          }\n          offset = b * size;\n          vals = predictionsVals.subarray(offset, offset + size);\n          valAndInd = [];\n          for (i = 0; i < vals.length; i++) {\n            valAndInd.push({\n              value: vals[i],\n              index: i\n            });\n          }\n          valAndInd.sort(function (a, b) {\n            return b.value - a.value;\n          });\n          precision[b] = 0;\n          _i = 0;\n        case 25:\n          if (!(_i < k)) {\n            _context.next = 32;\n            break;\n          }\n          if (!(valAndInd[_i].index === targetsVals[b])) {\n            _context.next = 29;\n            break;\n          }\n          precision[b] = 1;\n          return _context.abrupt(\"break\", 32);\n        case 29:\n          _i++;\n          _context.next = 25;\n          break;\n        case 32:\n          b++;\n          _context.next = 17;\n          break;\n        case 35:\n          if (predictions !== $predictions) {\n            $predictions.dispose();\n          }\n          if (targets !== $targets) {\n            $targets.dispose();\n          }\n          // Output precision has the same shape as targets.\n          return _context.abrupt(\"return\", tensor(precision, $targets.shape, 'bool'));\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _inTopKAsync_.apply(this, arguments);\n}\nexport var inTopKAsync = inTopKAsync_;","map":{"version":3,"mappings":"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","names":["convertToTensor","assert","assertShapesMatch","getTypedArrayFromDType","tensor","inTopKAsync_","predictions","targets","k","$predictions","$targets","rank","shape","slice","length","lastDim","data","predictionsVals","targetsVals","batch","size","precision","b","offset","vals","subarray","valAndInd","i","push","value","index","sort","a","dispose","inTopKAsync"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\in_top_k.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch, getTypedArrayFromDType} from '../util';\nimport {tensor} from './tensor';\n\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nasync function inTopKAsync_<T extends Tensor, U extends Tensor>(\n    predictions: T|TensorLike, targets: U|TensorLike, k = 1): Promise<U> {\n  const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n  const $targets = convertToTensor(targets, 'targets', 'inTopK');\n\n  assert(\n      $predictions.rank > 1,\n      () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +\n          `but got ${$predictions.rank}`);\n  assert(\n      $predictions.rank - 1 === $targets.rank,\n      () => `predictions rank should be 1 larger than ` +\n          `targets rank, but got predictions rank ` +\n          `${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch(\n      $predictions.shape.slice(0, $predictions.shape.length - 1),\n      $targets.shape,\n      `predictions's shape should be align with the targets' shape, ` +\n          'except the last dimension.');\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(\n      k > 0 && k <= lastDim,\n      () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +\n          `dimension (${lastDim}), but got ${k}`);\n\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data();\n\n  // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n  // and look up topK along lastDim.\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision = getTypedArrayFromDType('bool', batch);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    precision[b] = 0;\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision[b] = 1;\n        break;\n      }\n    }\n  }\n\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n  if (targets !== $targets) {\n    $targets.dispose();\n  }\n\n  // Output precision has the same shape as targets.\n  return tensor(precision, $targets.shape, 'bool') as U;\n}\n\nexport const inTopKAsync = inTopKAsync_;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}