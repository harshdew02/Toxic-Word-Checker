{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var dy = inputs.dy,\n    filter = inputs.filter;\n  var inputShape = attrs.inputShape,\n    strides = attrs.strides,\n    pad = attrs.pad,\n    dataFormat = attrs.dataFormat,\n    dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n  var filterStrides = util.computeStrides(filter.shape);\n  var dyStrides = util.computeStrides(dy.shape);\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n  var dx = new TensorBuffer(convInfo.inShape, 'float32');\n  var dxValues = dx.values;\n  var dyValues = backend.data.get(dy.dataId).values;\n  var fltValues = backend.data.get(filter.dataId).values;\n  var _filterStrides = _slicedToArray(filterStrides, 3),\n    fltS0 = _filterStrides[0],\n    fltS1 = _filterStrides[1],\n    fltS2 = _filterStrides[2];\n  var batchSize = convInfo.batchSize,\n    filterHeight = convInfo.filterHeight,\n    filterWidth = convInfo.filterWidth,\n    inChannels = convInfo.inChannels,\n    inHeight = convInfo.inHeight,\n    inWidth = convInfo.inWidth,\n    outChannels = convInfo.outChannels,\n    outHeight = convInfo.outHeight,\n    outWidth = convInfo.outWidth,\n    strideHeight = convInfo.strideHeight,\n    strideWidth = convInfo.strideWidth;\n  $dataFormat = convInfo.dataFormat;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  var isChannelsLast = $dataFormat === 'channelsLast';\n  var xBatchStride = dx.strides[0];\n  var xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  var xColStride = isChannelsLast ? dx.strides[2] : 1;\n  var xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  var yBatchStride = dyStrides[0];\n  var yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  var yColStride = isChannelsLast ? dyStrides[2] : 1;\n  var yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n  for (var b = 0; b < batchSize; ++b) {\n    for (var d1 = 0; d1 < inChannels; ++d1) {\n      for (var xR = 0; xR < inHeight; ++xR) {\n        var xRCorner = xR - topPad;\n        var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n        for (var xC = 0; xC < inWidth; ++xC) {\n          var xCCorner = xC - leftPad;\n          var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          var dotProd = 0;\n          for (var yR = xRMin; yR < yRMax; ++yR) {\n            var wR = yR * strideHeight - xRCorner;\n            for (var yC = xCMin; yC < yCMax; ++yC) {\n              var wC = yC * strideWidth - xCCorner;\n              var dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n              var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n              for (var d2 = 0; d2 < outChannels; ++d2) {\n                var pixel = dyValues[dyOffset + yChannelStride * d2];\n                var weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          var dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput\n};","map":{"version":3,"mappings":"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","names":["backend_util","Conv2DBackpropInput","TensorBuffer","util","assertNotComplex","conv2DBackpropInput","args","inputs","backend","attrs","dy","filter","inputShape","strides","pad","dataFormat","dimRoundingMode","filterStrides","computeStrides","shape","dyStrides","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","dx","inShape","dxValues","values","dyValues","data","get","dataId","fltValues","fltS0","fltS1","fltS2","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","isChannelsLast","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","b","d1","xR","xRCorner","xRMin","Math","max","ceil","yRMax","min","xC","xCCorner","xCMin","yCMax","dotProd","yR","wR","yC","wC","dyOffset","fltOffset","d2","pixel","weight","dxOffset","makeTensorInfo","dtype","conv2DBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Conv2DBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}