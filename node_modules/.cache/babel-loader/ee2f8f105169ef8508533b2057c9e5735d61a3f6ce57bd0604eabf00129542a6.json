{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x,\n    filter = inputs.filter,\n    bias = inputs.bias,\n    preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n    pad = attrs.pad,\n    dilations = attrs.dilations,\n    dimRoundingMode = attrs.dimRoundingMode,\n    activation = attrs.activation,\n    leakyreluAlpha = attrs.leakyreluAlpha;\n  var intermediates = [];\n  var $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n    return 'Error in depthwiseConv2d: Either strides or dilations must be ' + \"1. Got strides \".concat(strides, \" and dilations '\").concat($dilations, \"'\");\n  });\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  var shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  var fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n  var programInputs = [x, filter];\n  var hasBias = bias != null;\n  var hasPreluActivationWeights = preluActivationWeights != null;\n  var hasLeakyreluAlpha = activation === 'leakyrelu';\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    var $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  var program;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n  var customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  var result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n  intermediates.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return result;\n}\nexport var fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"mappings":"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","names":["backend_util","env","FusedDepthwiseConv2D","util","DepthwiseConv2DProgram","DepthwiseConvPacked2DProgram","mapActivationToShaderProgram","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dilations","dimRoundingMode","activation","leakyreluAlpha","intermediates","$dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","shape","shouldPackDepthwiseConv","getBool","strideWidth","outChannels","inChannels","fusedActivation","programInputs","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","push","$leakyreluAlpha","makeTensorInfo","createScalarValue","program","customValues","padInfo","top","left","strideHeight","dilationHeight","dilationWidth","inHeight","inWidth","result","runWebGLProgram","forEach","disposeIntermediateTensorInfo","t","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\FusedDepthwiseConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}