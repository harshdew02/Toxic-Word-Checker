{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, reshape, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport var Embedding = /*#__PURE__*/function (_Layer) {\n  _inherits(Embedding, _Layer);\n  var _super = _createSuper(Embedding);\n  function Embedding(args) {\n    var _this;\n    _classCallCheck(this, Embedding);\n    _this = _super.call(this, args);\n    _this.embeddings = null;\n    _this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      var batchSize = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        _this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        _this.batchInputShape = [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    _this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(_this.inputDim, 'inputDim');\n    _this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(_this.outputDim, 'outputDim');\n    _this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || _this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    _this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    _this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    _this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    _this.maskZero = args.maskZero;\n    _this.supportsMasking = args.maskZero;\n    _this.inputLength = args.inputLength;\n    return _this;\n  }\n  _createClass(Embedding, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n      this.built = true;\n    }\n    // Override warnOnIncompatibleInputShape because an embedding layer allows\n    // the input to have varying ranks.\n  }, {\n    key: \"warnOnIncompatibleInputShape\",\n    value: function warnOnIncompatibleInputShape(inputShape) {}\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      var _this2 = this;\n      return tidy(function () {\n        if (!_this2.maskZero) {\n          return null;\n        } else {\n          inputs = getExactlyOneTensor(inputs);\n          return notEqual(inputs, zerosLike(inputs));\n        }\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      if (this.inputLength == null) {\n        return [].concat(_toConsumableArray(inputShape), [this.outputDim]);\n      }\n      // inputLength can be an array if input is 3D or higher.\n      var inLens = generic_utils.toList(this.inputLength);\n      if (inLens.length !== inputShape.length - 1) {\n        throw new ValueError(\"\\\"inputLength\\\" is \".concat(this.inputLength, \", but received \") + \"input shape has shape \".concat(inputShape));\n      } else {\n        var i = 0;\n        for (var k = 0; k < inLens.length; ++k) {\n          var s1 = inLens[k];\n          var s2 = inputShape[k + 1];\n          if (s1 != null && s2 != null && s1 !== s2) {\n            throw new ValueError(\"\\\"inputLength\\\" is \".concat(this.inputLength, \", but received \") + \"input shape has shape \".concat(inputShape));\n          } else if (s1 == null) {\n            inLens[i] = s2;\n          }\n          i++;\n        }\n      }\n      return [inputShape[0]].concat(_toConsumableArray(inLens), [this.outputDim]);\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this3 = this;\n      return tidy(function () {\n        _this3.invokeCallHook(inputs, kwargs);\n        // Embedding layer accepts only a single input.\n        var input = getExactlyOneTensor(inputs);\n        if (input.dtype !== 'int32') {\n          input = K.cast(input, 'int32');\n        }\n        var output = K.gather(_this3.embeddings.read(), reshape(input, [input.size]));\n        return reshape(output, getExactlyOneShape(_this3.computeOutputShape(input.shape)));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        inputDim: this.inputDim,\n        outputDim: this.outputDim,\n        embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n        embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n        maskZero: this.maskZero,\n        inputLength: this.inputLength\n      };\n      var baseConfig = _get(_getPrototypeOf(Embedding.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return Embedding;\n}(Layer);\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);","map":{"version":3,"mappings":"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","names":["notEqual","reshape","serialization","tidy","zerosLike","K","getConstraint","serializeConstraint","Layer","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","generic_utils","getExactlyOneShape","getExactlyOneTensor","Embedding","args","batchInputShape","inputShape","batchSize","inputLength","concat","toList","inputDim","assertPositiveInteger","outputDim","embeddingsInitializer","DEFAULT_EMBEDDINGS_INITIALIZER","embeddingsRegularizer","activityRegularizer","embeddingsConstraint","maskZero","supportsMasking","embeddings","addWeight","dtype","built","inputs","mask","inLens","length","i","k","s1","s2","kwargs","invokeCallHook","input","cast","output","gather","read","size","computeOutputShape","shape","config","baseConfig","Object","assign","registerClass"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\embeddings.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport {notEqual, reshape, serialization, Tensor, tidy, zerosLike} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface EmbeddingLayerArgs extends LayerArgs {\n  /**\n   * Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.\n   */\n  inputDim: number;\n  /**\n   * Integer >= 0. Dimension of the dense embedding.\n   */\n  outputDim: number;\n  /**\n   * Initializer for the `embeddings` matrix.\n   */\n  embeddingsInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Regularizer function applied to the `embeddings` matrix.\n   */\n  embeddingsRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Constraint function applied to the `embeddings` matrix.\n   */\n  embeddingsConstraint?: ConstraintIdentifier|Constraint;\n  /**\n   * Whether the input value 0 is a special \"padding\" value that should be\n   * masked out. This is useful when using recurrent layers which may take\n   * variable length input.\n   *\n   * If this is `True` then all subsequent layers in the model need to support\n   * masking or an exception will be raised. If maskZero is set to `True`, as a\n   * consequence, index 0 cannot be used in the vocabulary (inputDim should\n   * equal size of vocabulary + 1).\n   */\n  maskZero?: boolean;\n  /**\n   * Length of input sequences, when it is constant.\n   *\n   * This argument is required if you are going to connect `flatten` then\n   * `dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed).\n   */\n  inputLength?: number|number[];\n}\n\nexport class Embedding extends Layer {\n  /** @nocollapse */\n  static className = 'Embedding';\n  private inputDim: number;\n  private outputDim: number;\n  private embeddingsInitializer: Initializer;\n  private maskZero: boolean;\n  private inputLength: number|number[];\n\n  private embeddings: LayerVariable = null;\n\n  readonly DEFAULT_EMBEDDINGS_INITIALIZER: InitializerIdentifier =\n      'randomUniform';\n  private readonly embeddingsRegularizer?: Regularizer;\n  private readonly embeddingsConstraint?: Constraint;\n\n  constructor(args: EmbeddingLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape =\n            [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(\n        args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    this.embeddings = this.addWeight(\n        'embeddings', [this.inputDim, this.outputDim], this.dtype,\n        this.embeddingsInitializer, this.embeddingsRegularizer, true,\n        this.embeddingsConstraint);\n    this.built = true;\n  }\n\n  // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n  protected override warnOnIncompatibleInputShape(inputShape: Shape) {}\n\n  override computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]):\n      Tensor {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    // inputLength can be an array if input is 3D or higher.\n    const inLens: number[] = generic_utils.toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(\n          `\"inputLength\" is ${this.inputLength}, but received ` +\n          `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n          throw new ValueError(\n              `\"inputLength\" is ${this.inputLength}, but received ` +\n              `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Embedding layer accepts only a single input.\n      let input = getExactlyOneTensor(inputs);\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n      const output =\n          K.gather(this.embeddings.read(), reshape(input, [input.size]));\n      return reshape(\n          output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Embedding);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}