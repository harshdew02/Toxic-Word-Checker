{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { avgPool } from './avg_pool';\nimport { batchToSpaceND } from './batch_to_space_nd';\nimport * as conv_util from './conv_util';\nimport { maxPool } from './max_pool';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { spaceToBatchND } from './space_to_batch_nd';\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction pool_(input, windowShape, poolingType, pad, dilations, strides, dimRoundingMode) {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  if (strides == null) {\n    strides = 1;\n  }\n  if (pad === 0) {\n    pad = 'valid';\n  }\n  var $x = convertToTensor(input, 'x', 'maxPool');\n  var x4D = $x;\n  var reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in pool: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n  });\n  var convInfo = conv_util.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);\n  var dilation = [convInfo.dilationHeight, convInfo.dilationWidth];\n  // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n  // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n  var basePadding;\n  if (pad === 'same') {\n    basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n  var isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  var _requiredSpaceToBatch = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding),\n    _requiredSpaceToBatch2 = _slicedToArray(_requiredSpaceToBatch, 2),\n    adjustedPadding = _requiredSpaceToBatch2[0],\n    adjustedCrops = _requiredSpaceToBatch2[1];\n  var convertedPad = isDilationOne ? pad : 'valid';\n  var convertedX = isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n  var forwardOp = poolingType === 'avg' ? function () {\n    return avgPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode);\n  } : function () {\n    return maxPool(convertedX, windowShape, strides, convertedPad, dimRoundingMode);\n  };\n  var y = forwardOp();\n  var res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {\n  var padStart = basePadding.map(function (b) {\n    return b[0];\n  });\n  var origPadEnd = basePadding.map(function (b) {\n    return b[1];\n  });\n  var fullInputShape = inputShape.concat(padStart, origPadEnd);\n  var padEndExtra = blockShape.map(function (b, i) {\n    return (b - fullInputShape[i] % b) % b;\n  });\n  var padEnd = origPadEnd.map(function (s, i) {\n    return s + padEndExtra[i];\n  });\n  var paddings = blockShape.map(function (_, i) {\n    return [padStart[i], padEnd[i]];\n  });\n  var crops = blockShape.map(function (_, i) {\n    return [0, padEndExtra[i]];\n  });\n  return [paddings, crops];\n}\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(filterShape, dilation) {\n  // Spatial dimensions of the filters and the upsampled filters in which we\n  // introduce (rate - 1) zeros between consecutive filter values.\n  var dilatedFilterShape = filterShape.map(function (s, i) {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  var padExtraShape = dilatedFilterShape.map(function (s) {\n    return s - 1;\n  });\n  // When padding is odd, we pad more at end, following the same\n  // convention as conv2d.\n  var padExtraStart = padExtraShape.map(function (s) {\n    return Math.floor(s / 2);\n  });\n  var padExtraEnd = padExtraShape.map(function (s, i) {\n    return s - padExtraStart[i];\n  });\n  return padExtraShape.map(function (_, i) {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\nexport var pool = /* @__PURE__ */op({\n  pool_: pool_\n});","map":{"version":3,"mappings":"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","names":["convertToTensor","util","avgPool","batchToSpaceND","conv_util","maxPool","op","reshape","spaceToBatchND","pool_","input","windowShape","poolingType","pad","dilations","strides","dimRoundingMode","$x","x4D","reshapedTo4D","rank","shape","assert","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","dilation","dilationHeight","dilationWidth","basePadding","withSpaceToBatchBasePaddings","filterHeight","filterWidth","isDilationOne","requiredSpaceToBatchPaddings","inHeight","inWidth","adjustedPadding","adjustedCrops","convertedPad","convertedX","forwardOp","y","res","inputShape","blockShape","padStart","map","b","origPadEnd","fullInputShape","concat","padEndExtra","i","padEnd","s","paddings","_","crops","filterShape","dilatedFilterShape","padExtraShape","padExtraStart","Math","floor","padExtraEnd","pool"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\pool.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {avgPool} from './avg_pool';\nimport {batchToSpaceND} from './batch_to_space_nd';\nimport * as conv_util from './conv_util';\nimport {maxPool} from './max_pool';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {spaceToBatchND} from './space_to_batch_nd';\n\n/**\n * Performs an N-D pooling operation\n *\n * @param input The input tensor, of rank 4 or rank 3 of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param windowShape The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param poolingType The type of pooling, either 'max' or 'avg'.\n * @param pad The type of padding algorithm:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *         https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction pool_<T extends Tensor3D|Tensor4D>(\n    input: T|TensorLike, windowShape: [number, number]|number,\n    poolingType: 'avg'|'max',\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dilations?: [number, number]|number, strides?: [number, number]|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil') {\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  if (strides == null) {\n    strides = 1;\n  }\n  if (pad === 0) {\n    pad = 'valid';\n  }\n\n  const $x = convertToTensor(input, 'x', 'maxPool');\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in pool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = conv_util.computePool2DInfo(\n      x4D.shape, windowShape, strides, dilations, pad);\n  const dilation: [number, number] =\n      [convInfo.dilationHeight, convInfo.dilationWidth];\n\n  // The following implementation does batchToSpace(pool(spaceToBatch(x)))\n  // whenever dilation > 1 since the TF kernels do not support dilation > 1.\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037\n\n  let basePadding: number[][];\n  if (pad === 'same') {\n    basePadding = withSpaceToBatchBasePaddings(\n        [convInfo.filterHeight, convInfo.filterWidth], dilation);\n  } else {\n    basePadding = [[0, 0], [0, 0]];\n  }\n\n  const isDilationOne = dilation[0] === 1 && dilation[1] === 1;\n  const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings(\n      [convInfo.inHeight, convInfo.inWidth], dilation, basePadding);\n  const convertedPad = isDilationOne ? pad : 'valid';\n  const convertedX =\n      isDilationOne ? x4D : spaceToBatchND(x4D, dilation, adjustedPadding);\n\n  const forwardOp = poolingType === 'avg' ?\n      () => avgPool(convertedX, windowShape, strides, convertedPad,\n                    dimRoundingMode) :\n      () => maxPool(convertedX, windowShape, strides, convertedPad,\n                    dimRoundingMode);\n  const y = forwardOp();\n\n  const res = isDilationOne ? y : batchToSpaceND(y, dilation, adjustedCrops);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n\n  return res as T;\n}\n\n// Helper function to compute crops and paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184\nfunction requiredSpaceToBatchPaddings(\n    inputShape: [number, number], blockShape: [number, number],\n    basePadding: number[][]) {\n  const padStart = basePadding.map(b => b[0]);\n  const origPadEnd = basePadding.map(b => b[1]);\n  const fullInputShape = inputShape.concat(padStart, origPadEnd);\n  const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);\n  const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);\n  const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);\n  const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);\n  return [paddings, crops];\n}\n\n// Helper function to compute base paddings for pool with dilation > 1.\n// tslint:disable-next-line:max-line-length\n// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524\nfunction withSpaceToBatchBasePaddings(\n    filterShape: [number, number], dilation: [number, number]) {\n  // Spatial dimensions of the filters and the upsampled filters in which we\n  // introduce (rate - 1) zeros between consecutive filter values.\n  const dilatedFilterShape = filterShape.map((s, i) => {\n    return s + (s - 1) * (dilation[i] - 1);\n  });\n  const padExtraShape = dilatedFilterShape.map(s => s - 1);\n\n  // When padding is odd, we pad more at end, following the same\n  // convention as conv2d.\n  const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));\n  const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);\n  return padExtraShape.map((_, i) => {\n    return [padExtraStart[i], padExtraEnd[i]];\n  });\n}\n\nexport const pool = /* @__PURE__ */ op({pool_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}