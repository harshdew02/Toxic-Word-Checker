{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport var rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n      attrs = _ref.attrs,\n      backend = _ref.backend;\n    var image = inputs.image;\n    var radians = attrs.radians,\n      fillValue = attrs.fillValue,\n      center = attrs.center;\n    var cpuBackend = backend;\n    var output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    var _image$shape = _slicedToArray(image.shape, 4),\n      batch = _image$shape[0],\n      imageHeight = _image$shape[1],\n      imageWidth = _image$shape[2],\n      numChannels = _image$shape[3];\n    var _backend_util$getImag = backend_util.getImageCenter(center, imageHeight, imageWidth),\n      _backend_util$getImag2 = _slicedToArray(_backend_util$getImag, 2),\n      centerX = _backend_util$getImag2[0],\n      centerY = _backend_util$getImag2[1];\n    var fullOpacityValue = 255;\n    var sinFactor = Math.sin(radians);\n    var cosFactor = Math.cos(radians);\n    var imageVals = cpuBackend.data.get(image.dataId).values;\n    for (var batchIdx = 0; batchIdx < batch; batchIdx++) {\n      var batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n      for (var row = 0; row < imageHeight; row++) {\n        var rowOffset = row * (imageWidth * numChannels);\n        for (var col = 0; col < imageWidth; col++) {\n          var colOffset = col * numChannels;\n          for (var channel = 0; channel < numChannels; channel++) {\n            var coords = [batch, row, col, channel];\n            var x = coords[2];\n            var y = coords[1];\n            // coordX/coordY are the result of rotating and translating x/y.\n            var coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            var coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n            var outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              var rotatedRowOffset = coordY * (imageWidth * numChannels);\n              var rotatedColOffset = coordX * numChannels;\n              var imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            var outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n    var dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId: dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["backend_util","RotateWithOffset","util","rotateWithOffsetConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","image","radians","fillValue","center","cpuBackend","output","getTypedArrayFromDType","dtype","sizeFromShape","shape","batch","imageHeight","imageWidth","numChannels","getImageCenter","centerX","centerY","fullOpacityValue","sinFactor","Math","sin","cosFactor","cos","imageVals","data","get","dataId","values","batchIdx","batchOffset","row","rowOffset","col","colOffset","channel","coords","x","y","coordX","coordY","round","outputValue","rotatedRowOffset","rotatedColOffset","imageIdx","outIdx","write"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\RotateWithOffset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n      attrs as unknown as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}