{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nvar DEFAULT_FILE_NAME_PREFIX = 'model';\nvar DEFAULT_JSON_EXTENSION_NAME = '.json';\nvar DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve);\n  }).then(f);\n}\nexport var BrowserDownloads = /*#__PURE__*/function () {\n  function BrowserDownloads(fileNamePrefix) {\n    _classCallCheck(this, BrowserDownloads);\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n  _createClass(BrowserDownloads, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(modelArtifacts) {\n        var weightsURL, weightsManifest, modelJSON, modelJsonURL, jsonAnchor, weightDataAnchor;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof document === 'undefined')) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n            case 2:\n              weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n                type: 'application/octet-stream'\n              }));\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context.next = 7;\n                break;\n              }\n              throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n            case 7:\n              weightsManifest = [{\n                paths: ['./' + this.weightDataFileName],\n                weights: modelArtifacts.weightSpecs\n              }];\n              modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n              modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], {\n                type: 'application/json'\n              })); // If anchor elements are not provided, create them without attaching them\n              // to parents, so that the downloaded file names can be controlled.\n              jsonAnchor = this.modelJsonAnchor == null ? document.createElement('a') : this.modelJsonAnchor;\n              jsonAnchor.download = this.modelJsonFileName;\n              jsonAnchor.href = modelJsonURL;\n              // Trigger downloads by evoking a click event on the download anchors.\n              // When multiple downloads are started synchronously, Firefox will only\n              // save the last one.\n              _context.next = 15;\n              return defer(function () {\n                return jsonAnchor.dispatchEvent(new MouseEvent('click'));\n              });\n            case 15:\n              if (!(modelArtifacts.weightData != null)) {\n                _context.next = 21;\n                break;\n              }\n              weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n              weightDataAnchor.download = this.weightDataFileName;\n              weightDataAnchor.href = weightsURL;\n              _context.next = 21;\n              return defer(function () {\n                return weightDataAnchor.dispatchEvent(new MouseEvent('click'));\n              });\n            case 21:\n              return _context.abrupt(\"return\", {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n              });\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n  }]);\n  return BrowserDownloads;\n}();\nBrowserDownloads.URL_SCHEME = 'downloads://';\nvar BrowserFiles = /*#__PURE__*/function () {\n  function BrowserFiles(files) {\n    _classCallCheck(this, BrowserFiles);\n    if (files == null || files.length < 1) {\n      throw new Error(\"When calling browserFiles, at least 1 file is required, \" + \"but received \".concat(files));\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n  _createClass(BrowserFiles, [{\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var jsonReader = new FileReader();\n                jsonReader.onload = function (event) {\n                  // tslint:disable-next-line:no-any\n                  var modelJSON = JSON.parse(event.target.result);\n                  var modelTopology = modelJSON.modelTopology;\n                  if (modelTopology == null) {\n                    reject(new Error(\"modelTopology field is missing from file \".concat(_this.jsonFile.name)));\n                    return;\n                  }\n                  var weightsManifest = modelJSON.weightsManifest;\n                  if (weightsManifest == null) {\n                    reject(new Error(\"weightManifest field is missing from file \".concat(_this.jsonFile.name)));\n                    return;\n                  }\n                  if (_this.weightsFiles.length === 0) {\n                    resolve({\n                      modelTopology: modelTopology\n                    });\n                    return;\n                  }\n                  var modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, function (weightsManifest) {\n                    return _this.loadWeights(weightsManifest);\n                  });\n                  resolve(modelArtifactsPromise);\n                };\n                jsonReader.onerror = function (error) {\n                  return reject(\"Failed to read model topology and weights manifest JSON \" + \"from file '\".concat(_this.jsonFile.name, \"'. BrowserFiles supports loading \") + \"Keras-style tf.Model artifacts only.\");\n                };\n                jsonReader.readAsText(_this.jsonFile);\n              }));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function load() {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }, {\n    key: \"loadWeights\",\n    value: function loadWeights(weightsManifest) {\n      var _this2 = this;\n      var weightSpecs = [];\n      var paths = [];\n      var _iterator = _createForOfIteratorHelper(weightsManifest),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n          weightSpecs.push.apply(weightSpecs, _toConsumableArray(entry.weights));\n          paths.push.apply(paths, _toConsumableArray(entry.paths));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n      var promises = paths.map(function (path) {\n        return _this2.loadWeightsFile(path, pathToFile[path]);\n      });\n      return Promise.all(promises).then(function (buffers) {\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n      });\n    }\n  }, {\n    key: \"loadWeightsFile\",\n    value: function loadWeightsFile(path, file) {\n      return new Promise(function (resolve, reject) {\n        var weightFileReader = new FileReader();\n        weightFileReader.onload = function (event) {\n          // tslint:disable-next-line:no-any\n          var weightData = event.target.result;\n          resolve(weightData);\n        };\n        weightFileReader.onerror = function (error) {\n          return reject(\"Failed to weights data from file of path '\".concat(path, \"'.\"));\n        };\n        weightFileReader.readAsArrayBuffer(file);\n      });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n  }, {\n    key: \"checkManifestAndWeightFiles\",\n    value: function checkManifestAndWeightFiles(manifest) {\n      var _this3 = this;\n      var basenames = [];\n      var fileNames = this.weightsFiles.map(function (file) {\n        return basename(file.name);\n      });\n      var pathToFile = {};\n      var _iterator2 = _createForOfIteratorHelper(manifest),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var group = _step2.value;\n          group.paths.forEach(function (path) {\n            var pathBasename = basename(path);\n            if (basenames.indexOf(pathBasename) !== -1) {\n              throw new Error(\"Duplicate file basename found in weights manifest: \" + \"'\".concat(pathBasename, \"'\"));\n            }\n            basenames.push(pathBasename);\n            if (fileNames.indexOf(pathBasename) === -1) {\n              throw new Error(\"Weight file with basename '\".concat(pathBasename, \"' is not provided.\"));\n            } else {\n              pathToFile[path] = _this3.weightsFiles[fileNames.indexOf(pathBasename)];\n            }\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (basenames.length !== this.weightsFiles.length) {\n        throw new Error(\"Mismatch in the number of files in weights manifest \" + \"(\".concat(basenames.length, \") and the number of weight files provided \") + \"(\".concat(this.weightsFiles.length, \").\"));\n      }\n      return pathToFile;\n    }\n  }]);\n  return BrowserFiles;\n}();\nexport var browserDownloadsRouter = function browserDownloadsRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads() {\n  var fileNamePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'model';\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"mappings":"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","names":["env","basename","concatenateArrayBuffers","getModelArtifactsForJSON","getModelArtifactsInfoForJSON","getModelJSONForModelArtifacts","IORouterRegistry","DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","f","Promise","setTimeout","resolve","then","BrowserDownloads","fileNamePrefix","getBool","Error","startsWith","URL_SCHEME","slice","length","modelJsonFileName","weightDataFileName","modelArtifacts","document","weightsURL","window","URL","createObjectURL","Blob","weightData","type","modelTopology","ArrayBuffer","weightsManifest","paths","weights","weightSpecs","modelJSON","modelJsonURL","JSON","stringify","jsonAnchor","modelJsonAnchor","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","modelArtifactsInfo","BrowserFiles","files","jsonFile","weightsFiles","reject","jsonReader","FileReader","onload","event","parse","target","result","name","modelArtifactsPromise","loadWeights","onerror","readAsText","entry","push","pathToFile","checkManifestAndWeightFiles","promises","map","loadWeightsFile","path","all","buffers","file","weightFileReader","readAsArrayBuffer","manifest","basenames","fileNames","group","forEach","pathBasename","indexOf","browserDownloadsRouter","url","Array","isArray","browserDownloads","registerSaveRouter","browserFiles"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\browser_files.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelJsonFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly modelJsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON: ModelJSON =\n          getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n      const modelJsonURL = window.URL.createObjectURL(\n          new Blob([JSON.stringify(modelJSON)], {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.modelJsonAnchor == null ?\n          document.createElement('a') :\n          this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly jsonFile: File;\n  private readonly weightsFiles: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        if (this.weightsFiles.length === 0) {\n          resolve({modelTopology});\n          return;\n        }\n\n        const modelArtifactsPromise = getModelArtifactsForJSON(\n            modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n\n  private loadWeights(weightsManifest: WeightsManifestConfig): Promise<[\n    /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n  ]> {\n    const weightSpecs: WeightsManifestEntry[] = [];\n    const paths: string[] = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile: {[path: string]: File} =\n        this.checkManifestAndWeightFiles(weightsManifest);\n\n    const promises: Array<Promise<ArrayBuffer>> =\n        paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n\n    return Promise.all(promises).then(\n        buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n\n  private loadWeightsFile(path: string, file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const weightData = (event.target as any).result as ArrayBuffer;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = error =>\n          reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(manifest: WeightsManifestConfig):\n      {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}