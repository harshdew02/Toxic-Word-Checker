{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var ResizeNearestNeighborProgram = /*#__PURE__*/_createClass(function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n  _classCallCheck(this, ResizeNearestNeighborProgram);\n  this.variableNames = ['A'];\n  this.outputShape = [];\n  var _inputShape = _slicedToArray(inputShape, 4),\n    batch = _inputShape[0],\n    oldHeight = _inputShape[1],\n    oldWidth = _inputShape[2],\n    depth = _inputShape[3];\n  this.outputShape = [batch, newHeight, newWidth, depth];\n  var effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  var effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n  // When align corners is false, we rounds the value with floor.\n  var roundBase = alignCorners ? '0.5' : '0.0';\n  var sourceFracIndexRC;\n  if (halfPixelCenters) {\n    sourceFracIndexRC = \"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC\" + \", vec2(0.0))\";\n  } else {\n    sourceFracIndexRC = \"vec2(yRC) * effectiveInputOverOutputRatioRC\";\n  }\n  this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \".concat(effectiveInSize[0] / effectiveOutSize[0], \",\\n          \").concat(effectiveInSize[1] / effectiveOutSize[1], \");\\n      const vec2 inputShapeRC = vec2(\").concat(oldHeight, \".0, \").concat(oldWidth, \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = \").concat(sourceFracIndexRC, \";\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \").concat(roundBase, \")));\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;;;;;AAmBA,WAAaA,4BAA4B,6BAKvC,sCACIC,UAA4C,EAAEC,SAAiB,EAC/DC,QAAgB,EAAEC,YAAqB,EAAEC,gBAAyB;EAAA;EANtE,kBAAa,GAAG,CAAC,GAAG,CAAC;EACrB,gBAAW,GAAa,EAAE;EAMxB,iCAA4CJ,UAAU;IAA/CK,KAAK;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,KAAK;EACxC,IAAI,CAACC,WAAW,GAAG,CAACJ,KAAK,EAAEJ,SAAS,EAAEC,QAAQ,EAAEM,KAAK,CAAC;EAEtD,IAAME,eAAe,GAAqB,CACvCP,YAAY,IAAIF,SAAS,GAAG,CAAC,GAAIK,SAAS,GAAG,CAAC,GAAGA,SAAS,EAC1DH,YAAY,IAAID,QAAQ,GAAG,CAAC,GAAIK,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CACzD;EAED,IAAMI,gBAAgB,GAAqB,CACxCR,YAAY,IAAIF,SAAS,GAAG,CAAC,GAAIA,SAAS,GAAG,CAAC,GAAGA,SAAS,EAC1DE,YAAY,IAAID,QAAQ,GAAG,CAAC,GAAIA,QAAQ,GAAG,CAAC,GAAGA,QAAQ,CACzD;EAED;EACA,IAAMU,SAAS,GAAGT,YAAY,GAAG,KAAK,GAAG,KAAK;EAE9C,IAAIU,iBAAyB;EAC7B,IAAIT,gBAAgB,EAAE;IACpBS,iBAAiB,GACb,gFACc;GACnB,MAAM;IACLA,iBAAiB,gDAAgD;;EAEnE,IAAI,CAACC,QAAQ,mFAELJ,eAAe,CAAC,CAAC,CAAC,GAAGC,gBAAgB,CAAC,CAAC,CAAC,0BACxCD,eAAe,CAAC,CAAC,CAAC,GAAGC,gBAAgB,CAAC,CAAC,CAAC,sDACbL,SAAS,iBAAOC,QAAQ,qPAS5BM,iBAAiB,sLAIUD,SAAS,oIAKlE;AACH,CAAC","names":["ResizeNearestNeighborProgram","inputShape","newHeight","newWidth","alignCorners","halfPixelCenters","batch","oldHeight","oldWidth","depth","outputShape","effectiveInSize","effectiveOutSize","roundBase","sourceFracIndexRC","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\resize_nearest_neighbor_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}