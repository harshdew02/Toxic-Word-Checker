{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'Fill':\n      {\n        var shape = getParamValue('shape', node, tensorMap, context);\n        var dtype = getParamValue('dtype', node, tensorMap, context);\n        var value = getParamValue('value', node, tensorMap, context);\n        return [ops.fill(shape, value, dtype)];\n      }\n    case 'LinSpace':\n      {\n        var start = getParamValue('start', node, tensorMap, context);\n        var stop = getParamValue('stop', node, tensorMap, context);\n        var num = getParamValue('num', node, tensorMap, context);\n        return [ops.linspace(start, stop, num)];\n      }\n    case 'Multinomial':\n      {\n        var logits = getParamValue('logits', node, tensorMap, context);\n        var numSamples = getParamValue('numSamples', node, tensorMap, context);\n        var seed = getParamValue('seed', node, tensorMap, context);\n        return [ops.multinomial(logits, numSamples, seed)];\n      }\n    case 'OneHot':\n      {\n        var indices = getParamValue('indices', node, tensorMap, context);\n        var depth = getParamValue('depth', node, tensorMap, context);\n        var onValue = getParamValue('onValue', node, tensorMap, context);\n        var offValue = getParamValue('offValue', node, tensorMap, context);\n        var _dtype = getParamValue('dtype', node, tensorMap, context);\n        return [ops.oneHot(indices, depth, onValue, offValue, _dtype)];\n      }\n    case 'Ones':\n      {\n        return [ops.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'OnesLike':\n      {\n        return [ops.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'RandomStandardNormal':\n      {\n        return [ops.randomStandardNormal(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n      }\n    case 'RandomUniform':\n      {\n        return [ops.randomUniform(\n        // tslint:disable-next-line:no-any\n        getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'Range':\n      {\n        var _start = getParamValue('start', node, tensorMap, context);\n        var _stop = getParamValue('stop', node, tensorMap, context);\n        var step = getParamValue('step', node, tensorMap, context);\n        return [ops.range(_start, _stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'TruncatedNormal':\n      {\n        var _shape = getParamValue('shape', node, tensorMap, context);\n        var mean = getParamValue('mean', node, tensorMap, context);\n        var stdDev = getParamValue('stdDev', node, tensorMap, context);\n        var _seed = getParamValue('seed', node, tensorMap, context);\n        return [ops.truncatedNormal(_shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), _seed)];\n      }\n    case 'Zeros':\n      {\n        return [ops.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'ZerosLike':\n      {\n        return [ops.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'creation';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","ops","op","shape","dtype","value","fill","start","stop","num","linspace","logits","numSamples","seed","multinomial","indices","depth","onValue","offValue","oneHot","ones","onesLike","randomStandardNormal","randomUniform","step","range","mean","stdDev","truncatedNormal","zeros","zerosLike","TypeError","CATEGORY"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\creation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [ops.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [ops.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [ops.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          return [ops.oneHot(indices, depth, onValue, offValue, dtype)];\n        }\n        case 'Ones': {\n          return [ops.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [ops.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomStandardNormal': {\n          return [ops.randomStandardNormal(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              getParamValue('seed', node, tensorMap, context) as number)];\n        }\n        case 'RandomUniform': {\n          return [ops.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [ops.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [ops.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [ops.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [ops.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}