{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  var strides = util.computeStrides(shape);\n  return strides.map(function (stride, i) {\n    var line1 = \"int \".concat(coords[i], \" = \").concat(index, \" / \").concat(stride);\n    var line2 = i === strides.length - 1 ? \"int \".concat(coords[i + 1], \" = \").concat(index, \" - \").concat(coords[i], \" * \").concat(stride) : \"index -= \".concat(coords[i], \" * \").concat(stride);\n    return \"\".concat(line1, \"; \").concat(line2, \";\");\n  }).join('');\n}\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  var strides = util.computeStrides(shape);\n  return strides.map(function (_, i) {\n    var line1 = \"int \".concat(coords[i], \" = \").concat(index, \" / outShapeStrides[\").concat(i, \"]\");\n    var line2 = i === strides.length - 1 ? \"int \".concat(coords[i + 1], \" = \").concat(index, \" - \").concat(coords[i], \" * outShapeStrides[\").concat(i, \"]\") : \"index -= \".concat(coords[i], \" * outShapeStrides[\").concat(i, \"]\");\n    return \"\".concat(line1, \"; \").concat(line2, \";\");\n  }).join('');\n}\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(indicesArr, variableName) {\n  var numCoords = indicesArr.length;\n  var shape = indicesArr.map(function (d) {\n    return \"\".concat(variableName, \"[\").concat(d, \"]\");\n  });\n  var strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (var i = numCoords - 3; i >= 0; --i) {\n    strides[i] = \"(\".concat(strides[i + 1], \" * \").concat(shape[i + 1], \")\");\n  }\n  return strides;\n}\nexport function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  var indicesArray = coords.map(function (_, i) {\n    return i;\n  });\n  var strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides.map(function (_, i) {\n    var line1 = \"int \".concat(coords[i], \" = \").concat(index, \" / \").concat(strides[i]);\n    var line2 = i === strides.length - 1 ? \"int \".concat(coords[i + 1], \" = \").concat(index, \" - \").concat(coords[i], \" * \").concat(strides[i]) : \"index -= \".concat(coords[i], \" * \").concat(strides[i]);\n    return \"\".concat(line1, \"; \").concat(line2, \";\");\n  }).join('');\n}\nfunction buildVec(x) {\n  if (x.length === 1) {\n    return \"\".concat(x[0]);\n  }\n  return \"vec\".concat(x.length, \"(\").concat(x.join(','), \")\");\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x, y) {\n  if (x.length !== y.length) {\n    throw new Error(\"Vectors to be dotted must be of the same length -\" + \"got \".concat(x.length, \" and \").concat(y.length));\n  }\n  var slices = [];\n  var nearestVec4 = Math.floor(x.length / 4);\n  var nearestVec4Remainder = x.length % 4;\n  for (var i = 0; i < nearestVec4; i++) {\n    var xSlice = x.slice(i * 4, i * 4 + 4);\n    var ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(\"\".concat(buildVec(xSlice), \", \").concat(buildVec(ySlice)));\n  }\n  if (nearestVec4Remainder !== 0) {\n    var _xSlice = x.slice(nearestVec4 * 4);\n    var _ySlice = y.slice(nearestVec4 * 4);\n    if (_xSlice.length === 1) {\n      _xSlice = _xSlice.map(function (d) {\n        return \"float(\".concat(d, \")\");\n      });\n      _ySlice = _ySlice.map(function (d) {\n        return \"float(\".concat(d, \")\");\n      });\n    }\n    slices.push(\"\".concat(buildVec(_xSlice), \", \").concat(buildVec(_ySlice)));\n  }\n  return slices.map(function (d, i) {\n    return \"dot(\".concat(d, \")\");\n  }).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape) {\n  var strides = util.computeStrides(shape).map(function (d) {\n    return d.toString();\n  });\n  return \"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \".concat(strides[0], \" + coords.y * \").concat(strides[1], \" + coords.z;\\n  }\\n\");\n}\nexport function getFlatIndexFrom3DOutput() {\n  return \"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n\";\n}\nexport var ENCODE_FLOAT_SNIPPET = \"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAI,QAAO,uBAAuB;AAE1C;;;;;AAKA,OAAM,SAAUC,kCAAkC,CAC9CC,MAAgB,EAAEC,KAAe,EAAiB;EAAA,IAAfC,KAAK,uEAAG,OAAO;EACpD,IAAMC,OAAO,GAAGL,IAAI,CAACM,cAAc,CAACH,KAAK,CAAC;EAC1C,OAAOE,OAAO,CACTE,GAAG,CAAC,UAACC,MAAM,EAAEC,CAAC,EAAI;IACjB,IAAMC,KAAK,iBAAUR,MAAM,CAACO,CAAC,CAAC,gBAAML,KAAK,gBAAMI,MAAM,CAAE;IACvD,IAAMG,KAAK,GAAGF,CAAC,KAAKJ,OAAO,CAACO,MAAM,GAAG,CAAC,iBAC3BV,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC,gBAAML,KAAK,gBAAMF,MAAM,CAACO,CAAC,CAAC,gBAAMD,MAAM,uBAC9CN,MAAM,CAACO,CAAC,CAAC,gBAAMD,MAAM,CAAE;IACvC,iBAAUE,KAAK,eAAKC,KAAK;EAC3B,CAAC,CAAC,CACDE,IAAI,CAAC,EAAE,CAAC;AACf;AAEA,OAAM,SAAUC,iDAAiD,CAC7DZ,MAAgB,EAAEC,KAAe,EAAiB;EAAA,IAAfC,KAAK,uEAAG,OAAO;EACpD,IAAMC,OAAO,GAAGL,IAAI,CAACM,cAAc,CAACH,KAAK,CAAC;EAC1C,OAAOE,OAAO,CACTE,GAAG,CAAC,UAACQ,CAAC,EAAEN,CAAC,EAAI;IACZ,IAAMC,KAAK,iBAAUR,MAAM,CAACO,CAAC,CAAC,gBAAML,KAAK,gCAAsBK,CAAC,MAAG;IACnE,IAAME,KAAK,GAAGF,CAAC,KAAKJ,OAAO,CAACO,MAAM,GAAG,CAAC,iBAC3BV,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC,gBAAML,KAAK,gBAAMF,MAAM,CAACO,CAAC,CAAC,gCAC1CA,CAAC,4BACOP,MAAM,CAACO,CAAC,CAAC,gCAAsBA,CAAC,MAAG;IACnD,iBAAUC,KAAK,eAAKC,KAAK;EAC3B,CAAC,CAAC,CACDE,IAAI,CAAC,EAAE,CAAC;AACf;AAEA;AACA,SAASG,0BAA0B,CAC/BC,UAAoB,EAAEC,YAAoB;EAC5C,IAAMC,SAAS,GAAGF,UAAU,CAACL,MAAM;EACnC,IAAMT,KAAK,GAAGc,UAAU,CAACV,GAAG,CAAC,WAAC;IAAA,iBAAOW,YAAY,cAAIE,CAAC;EAAA,CAAG,CAAC;EAC1D,IAAMf,OAAO,GAAG,IAAIgB,KAAK,CAACF,SAAS,GAAG,CAAC,CAAC;EACxCd,OAAO,CAACc,SAAS,GAAG,CAAC,CAAC,GAAGhB,KAAK,CAACgB,SAAS,GAAG,CAAC,CAAC;EAC7C,KAAK,IAAIV,CAAC,GAAGU,SAAS,GAAG,CAAC,EAAEV,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;IACvCJ,OAAO,CAACI,CAAC,CAAC,cAAOJ,OAAO,CAACI,CAAC,GAAG,CAAC,CAAC,gBAAMN,KAAK,CAACM,CAAC,GAAG,CAAC,CAAC,MAAG;;EAGtD,OAAOJ,OAAO;AAChB;AAEA,OAAM,SAAUiB,2CAA2C,CACvDpB,MAAgB,EAAEgB,YAAoB,EAAiB;EAAA,IAAfd,KAAK,uEAAG,OAAO;EACzD,IAAMmB,YAAY,GAAGrB,MAAM,CAACK,GAAG,CAAC,UAACQ,CAAC,EAAEN,CAAC;IAAA,OAAKA,CAAC;EAAA,EAAC;EAC5C,IAAMJ,OAAO,GAAGW,0BAA0B,CAACO,YAAY,EAAEL,YAAY,CAAC;EACtE,OAAOb,OAAO,CACTE,GAAG,CAAC,UAACQ,CAAC,EAAEN,CAAC,EAAI;IACZ,IAAMC,KAAK,iBAAUR,MAAM,CAACO,CAAC,CAAC,gBAAML,KAAK,gBAAMC,OAAO,CAACI,CAAC,CAAC,CAAE;IAC3D,IAAME,KAAK,GAAGF,CAAC,KAAKJ,OAAO,CAACO,MAAM,GAAG,CAAC,iBAC3BV,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC,gBAAML,KAAK,gBAAMF,MAAM,CAACO,CAAC,CAAC,gBAAMJ,OAAO,CAACI,CAAC,CAAC,uBAClDP,MAAM,CAACO,CAAC,CAAC,gBAAMJ,OAAO,CAACI,CAAC,CAAC,CAAE;IAC3C,iBAAUC,KAAK,eAAKC,KAAK;EAC3B,CAAC,CAAC,CACDE,IAAI,CAAC,EAAE,CAAC;AACf;AAEA,SAASW,QAAQ,CAACC,CAAW;EAC3B,IAAIA,CAAC,CAACb,MAAM,KAAK,CAAC,EAAE;IAClB,iBAAUa,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBAAaA,CAAC,CAACb,MAAM,cAAIa,CAAC,CAACZ,IAAI,CAAC,GAAG,CAAC;AACtC;AAEA;;;;AAIA,OAAM,SAAUa,MAAM,CAACD,CAAW,EAAEE,CAAW;EAC7C,IAAIF,CAAC,CAACb,MAAM,KAAKe,CAAC,CAACf,MAAM,EAAE;IACzB,MAAM,IAAIgB,KAAK,CACX,oEACOH,CAAC,CAACb,MAAM,kBAAQe,CAAC,CAACf,MAAM,CAAE,CAAC;;EAGxC,IAAMiB,MAAM,GAAa,EAAE;EAC3B,IAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACP,CAAC,CAACb,MAAM,GAAG,CAAC,CAAC;EAC5C,IAAMqB,oBAAoB,GAAGR,CAAC,CAACb,MAAM,GAAG,CAAC;EAEzC,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,WAAW,EAAErB,CAAC,EAAE,EAAE;IACpC,IAAMyB,MAAM,GAAGT,CAAC,CAACU,KAAK,CAAC1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxC,IAAM2B,MAAM,GAAGT,CAAC,CAACQ,KAAK,CAAC1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxCoB,MAAM,CAACQ,IAAI,WAAIb,QAAQ,CAACU,MAAM,CAAC,eAAKV,QAAQ,CAACY,MAAM,CAAC,EAAG;;EAGzD,IAAIH,oBAAoB,KAAK,CAAC,EAAE;IAC9B,IAAIC,OAAM,GAAGT,CAAC,CAACU,KAAK,CAACL,WAAW,GAAG,CAAC,CAAC;IACrC,IAAIM,OAAM,GAAGT,CAAC,CAACQ,KAAK,CAACL,WAAW,GAAG,CAAC,CAAC;IACrC,IAAII,OAAM,CAACtB,MAAM,KAAK,CAAC,EAAE;MACvBsB,OAAM,GAAGA,OAAM,CAAC3B,GAAG,CAAC,WAAC;QAAA,uBAAaa,CAAC;MAAA,CAAG,CAAC;MACvCgB,OAAM,GAAGA,OAAM,CAAC7B,GAAG,CAAC,WAAC;QAAA,uBAAaa,CAAC;MAAA,CAAG,CAAC;;IAEzCS,MAAM,CAACQ,IAAI,WAAIb,QAAQ,CAACU,OAAM,CAAC,eAAKV,QAAQ,CAACY,OAAM,CAAC,EAAG;;EAGzD,OAAOP,MAAM,CAACtB,GAAG,CAAC,UAACa,CAAC,EAAEX,CAAC;IAAA,qBAAYW,CAAC;EAAA,CAAG,CAAC,CAACP,IAAI,CAAC,GAAG,CAAC;AACpD;AAEA;;;AAGA,OAAM,SAAUyB,kBAAkB,CAACnC,KAA+B;EAChE,IAAME,OAAO,GAAGL,IAAI,CAACM,cAAc,CAACH,KAAK,CAAC,CAACI,GAAG,CAAC,WAAC;IAAA,OAAIa,CAAC,CAACmB,QAAQ,EAAE;EAAA,EAAC;EAEjE,6EAEsBlC,OAAO,CAAC,CAAC,CAAC,2BAAiBA,OAAO,CAAC,CAAC,CAAC;AAG7D;AAEA,OAAM,SAAUmC,wBAAwB;EACtC;AAKF;AAEA,OAAO,IAAMC,oBAAoB,47BAuChC","names":["util","getLogicalCoordinatesFromFlatIndex","coords","shape","index","strides","computeStrides","map","stride","i","line1","line2","length","join","getOutputLogicalCoordinatesFromFlatIndexByUniform","_","symbolicallyComputeStrides","indicesArr","variableName","numCoords","d","Array","getLogicalCoordinatesFromFlatIndexByUniform","indicesArray","buildVec","x","dotify","y","Error","slices","nearestVec4","Math","floor","nearestVec4Remainder","xSlice","slice","ySlice","push","getFlatIndexFrom3D","toString","getFlatIndexFrom3DOutput","ENCODE_FLOAT_SNIPPET"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\shader_compiler_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}