{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport var getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: function importFetch() {\n    return require('node-fetch');\n  }\n};\nvar systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n  return systemFetch;\n}\nexport var PlatformNode = /*#__PURE__*/function () {\n  function PlatformNode() {\n    _classCallCheck(this, PlatformNode);\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n  _createClass(PlatformNode, [{\n    key: \"fetch\",\n    value: function fetch(path, requestInits) {\n      if (env().global.fetch != null) {\n        return env().global.fetch(path, requestInits);\n      }\n      if (systemFetch == null) {\n        systemFetch = getNodeFetch.importFetch();\n      }\n      return systemFetch(path, requestInits);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      var time = process.hrtime();\n      return time[0] * 1000 + time[1] / 1000000;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text, encoding) {\n      if (encoding !== 'utf-8' && encoding !== 'utf8') {\n        throw new Error(\"Node built-in encoder only supports utf-8, but got \".concat(encoding));\n      }\n      return this.textEncoder.encode(text);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes, encoding) {\n      if (bytes.length === 0) {\n        return '';\n      }\n      return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n  }, {\n    key: \"isTypedArray\",\n    value: function isTypedArray(a) {\n      return this.util.types.isFloat32Array(a) || this.util.types.isInt32Array(a) || this.util.types.isUint8Array(a) || this.util.types.isUint8ClampedArray(a);\n    }\n  }]);\n  return PlatformNode;\n}();\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,GAAG,QAAO,gBAAgB;AAGlC;AACA,OAAO,IAAMC,YAAY,GAAG;EAC1B;EACAC,WAAW,EAAE;IAAA,OAAMC,OAAO,CAAC,YAAY,CAAC;EAAA;CACzC;AAGD,IAAIC,WAAoB;AACxB;AACA;AACA,OAAM,SAAUC,gBAAgB;EAC9BD,WAAW,GAAG,IAAI;AACpB;AACA,OAAM,SAAUE,cAAc,CAACC,OAAgB;EAC7CH,WAAW,GAAGG,OAAO;AACvB;AACA,OAAM,SAAUC,cAAc;EAC5B,OAAOJ,WAAW;AACpB;AAEA,WAAaK,YAAY;EAKvB;IAAA;IACE;IACA,IAAI,CAACC,IAAI,GAAGP,OAAO,CAAC,MAAM,CAAC;IAC3B;IACA;IACA,IAAI,CAACQ,WAAW,GAAG,IAAI,IAAI,CAACD,IAAI,CAACE,WAAW,EAAE;EAChD;EAAC;IAAA;IAAA,OAED,eAAMC,IAAY,EAAEC,YAA0B;MAC5C,IAAId,GAAG,EAAE,CAACe,MAAM,CAACC,KAAK,IAAI,IAAI,EAAE;QAC9B,OAAOhB,GAAG,EAAE,CAACe,MAAM,CAACC,KAAK,CAACH,IAAI,EAAEC,YAAY,CAAC;;MAG/C,IAAIV,WAAW,IAAI,IAAI,EAAE;QACvBA,WAAW,GAAGH,YAAY,CAACC,WAAW,EAAE;;MAE1C,OAAOE,WAAW,CAACS,IAAI,EAAEC,YAAY,CAAC;IACxC;EAAC;IAAA;IAAA,OAED,eAAG;MACD,IAAMG,IAAI,GAAGC,OAAO,CAACC,MAAM,EAAE;MAC7B,OAAOF,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO;IAC3C;EAAC;IAAA;IAAA,OAED,gBAAOG,IAAY,EAAEC,QAAgB;MACnC,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,EAAE;QAC/C,MAAM,IAAIC,KAAK,8DAC2CD,QAAQ,EAAG;;MAEvE,OAAO,IAAI,CAACV,WAAW,CAACY,MAAM,CAACH,IAAI,CAAC;IACtC;EAAC;IAAA;IAAA,OACD,gBAAOI,KAAiB,EAAEH,QAAgB;MACxC,IAAIG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,EAAE;;MAEX,OAAO,IAAI,IAAI,CAACf,IAAI,CAACgB,WAAW,CAACL,QAAQ,CAAC,CAACM,MAAM,CAACH,KAAK,CAAC;IAC1D;EAAC;IAAA;IAAA,OACD,sBAAaI,CAAU;MAErB,OAAO,IAAI,CAAClB,IAAI,CAACmB,KAAK,CAACC,cAAc,CAACF,CAAC,CAAC,IACnC,IAAI,CAAClB,IAAI,CAACmB,KAAK,CAACE,YAAY,CAACH,CAAC,CAAC,IAC/B,IAAI,CAAClB,IAAI,CAACmB,KAAK,CAACG,YAAY,CAACJ,CAAC,CAAC,IAC/B,IAAI,CAAClB,IAAI,CAACmB,KAAK,CAACI,mBAAmB,CAACL,CAAC,CAAC;IAC7C;EAAC;EAAA;AAAA;AAGH,IAAI5B,GAAG,EAAE,CAACkC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAClC,GAAG,EAAE,CAACkC,GAAG,CAAC,YAAY,CAAC,EAAE;EACpDlC,GAAG,EAAE,CAACmC,WAAW,CAAC,MAAM,EAAE,IAAI1B,YAAY,EAAE,CAAC","names":["env","getNodeFetch","importFetch","require","systemFetch","resetSystemFetch","setSystemFetch","fetchFn","getSystemFetch","PlatformNode","util","textEncoder","TextEncoder","path","requestInits","global","fetch","time","process","hrtime","text","encoding","Error","encode","bytes","length","TextDecoder","decode","a","types","isFloat32Array","isInt32Array","isUint8Array","isUint8ClampedArray","get","setPlatform"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\platforms\\platform_node.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../environment';\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n  isTypedArray(a: unknown): a is Float32Array | Int32Array | Uint8Array\n    | Uint8ClampedArray {\n    return this.util.types.isFloat32Array(a)\n      || this.util.types.isInt32Array(a)\n      || this.util.types.isUint8Array(a)\n      || this.util.types.isUint8ClampedArray(a);\n  }\n}\n\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}