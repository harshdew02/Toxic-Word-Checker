{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sum } from '../kernel_names';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport { parseAxisParam } from '../util';\nexport var sumGradConfig = {\n  kernelName: Sum,\n  inputsToSave: ['x'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var _saved = _slicedToArray(saved, 1),\n      x = _saved[0];\n    var expandedDyShape = x.shape.slice();\n    var axis = attrs.axis;\n    var axes = parseAxisParam(axis, x.shape);\n    axes.forEach(function (axis) {\n      expandedDyShape[axis] = 1;\n    });\n    var expandedDy = reshape(dy, expandedDyShape);\n    var derX = mul(expandedDy, ones(x.shape, 'float32'));\n    return {\n      x: function x() {\n        return derX;\n      }\n    };\n  }\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAG,QAAiB,iBAAiB;AAE7C,SAAQC,GAAG,QAAO,YAAY;AAC9B,SAAQC,IAAI,QAAO,aAAa;AAChC,SAAQC,OAAO,QAAO,gBAAgB;AAEtC,SAAQC,cAAc,QAAO,SAAS;AAEtC,OAAO,IAAMC,aAAa,GAAe;EACvCC,UAAU,EAAEN,GAAG;EACfO,YAAY,EAAE,CAAC,GAAG,CAAC;EACnBC,QAAQ,EAAE,kBAACC,EAAU,EAAEC,KAAe,EAAEC,KAAmB,EAAI;IAC7D,4BAAYD,KAAK;MAAVE,CAAC;IACR,IAAMC,eAAe,GAAGD,CAAC,CAACE,KAAK,CAACC,KAAK,EAAE;IACvC,IAAOC,IAAI,GAAIL,KAA4B,CAApCK,IAAI;IAEX,IAAMC,IAAI,GAAGb,cAAc,CAACY,IAAI,EAAEJ,CAAC,CAACE,KAAK,CAAC;IAC1CG,IAAI,CAACC,OAAO,CAAC,cAAI,EAAG;MAClBL,eAAe,CAACG,IAAI,CAAC,GAAG,CAAC;IAC3B,CAAC,CAAC;IACF,IAAMG,UAAU,GAAGhB,OAAO,CAACM,EAAE,EAAEI,eAAe,CAAC;IAC/C,IAAMO,IAAI,GAAGnB,GAAG,CAACkB,UAAU,EAAEjB,IAAI,CAACU,CAAC,CAACE,KAAK,EAAE,SAAS,CAAC,CAAC;IAEtD,OAAO;MAACF,CAAC,EAAE;QAAA,OAAMQ,IAAI;MAAA;IAAA,CAAC;EACxB;CACD","names":["Sum","mul","ones","reshape","parseAxisParam","sumGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x","expandedDyShape","shape","slice","axis","axes","forEach","expandedDy","derX"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\gradients\\Sum_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Sum, SumAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {mul} from '../ops/mul';\nimport {ones} from '../ops/ones';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\nimport {parseAxisParam} from '../util';\n\nexport const sumGradConfig: GradConfig = {\n  kernelName: Sum,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const expandedDyShape = x.shape.slice();\n    const {axis} = attrs as unknown as SumAttrs;\n\n    const axes = parseAxisParam(axis, x.shape);\n    axes.forEach(axis => {\n      expandedDyShape[axis] = 1;\n    });\n    const expandedDy = reshape(dy, expandedDyShape);\n    const derX = mul(expandedDy, ones(x.shape, 'float32'));\n\n    return {x: () => derX};\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}