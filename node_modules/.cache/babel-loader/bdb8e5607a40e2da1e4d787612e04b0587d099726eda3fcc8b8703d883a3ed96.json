{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { image, serialization, tidy } from '@tensorflow/tfjs-core'; // mul, add\nimport { Layer } from '../../engine/topology';\nimport { ValueError } from '../../errors';\nimport { getExactlyOneShape } from '../../utils/types_utils'; //, getExactlyOneTensor\n// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n//                                   'gaussian', 'mitchellcubic'\nvar INTERPOLATION_KEYS = ['bilinear', 'nearest'];\nvar INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\n/**\n * Preprocessing Resizing Layer\n *\n * This resizes images by a scaling and offset factor\n */\nexport var Resizing = /*#__PURE__*/function (_Layer) {\n  _inherits(Resizing, _Layer);\n  var _super = _createSuper(Resizing);\n  function Resizing(args) {\n    var _this;\n    _classCallCheck(this, Resizing);\n    _this = _super.call(this, args);\n    _this.height = args.height;\n    _this.width = args.width;\n    if (args.interpolation) {\n      if (INTERPOLATION_METHODS.has(args.interpolation)) {\n        _this.interpolation = args.interpolation;\n      } else {\n        throw new ValueError(\"Invalid interpolation parameter: \".concat(args.interpolation, \" is not implemented\"));\n      }\n    } else {\n      _this.interpolation = 'bilinear';\n    }\n    _this.cropToAspectRatio = Boolean(args.cropToAspectRatio);\n    return _this;\n  }\n  _createClass(Resizing, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var numChannels = inputShape[2];\n      return [this.height, this.width, numChannels];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'height': this.height,\n        'width': this.width,\n        'interpolation': this.interpolation,\n        'cropToAspectRatio': this.cropToAspectRatio\n      };\n      var baseConfig = _get(_getPrototypeOf(Resizing.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        var size = [_this2.height, _this2.width];\n        if (_this2.interpolation === 'bilinear') {\n          return image.resizeBilinear(inputs, size, !_this2.cropToAspectRatio);\n        } else if (_this2.interpolation === 'nearest') {\n          return image.resizeNearestNeighbor(inputs, size, !_this2.cropToAspectRatio);\n        } else {\n          throw new Error(\"Interpolation is \".concat(_this2.interpolation, \" but only \").concat(_toConsumableArray(INTERPOLATION_METHODS), \" are supported\"));\n        }\n      });\n    }\n  }]);\n  return Resizing;\n}(Layer);\n/** @nocollapse */\nResizing.className = 'Resizing';\nserialization.registerClass(Resizing);","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;AAUA,SAAQA,KAAK,EAAQC,aAAa,EAAUC,IAAI,QAAO,uBAAuB,CAAC,CAAE;AAEjF,SAAQC,KAAK,QAAkB,uBAAuB;AACtD,SAAQC,UAAU,QAAO,cAAc;AAGvC,SAAQC,kBAAkB,QAAO,yBAAyB,CAAC,CAAE;AAE7D;AACA;AACA,IAAMC,kBAAkB,GAAG,CAAC,UAAU,EAAE,SAAS,CAAU;AAC3D,IAAMC,qBAAqB,GAAG,IAAIC,GAAG,CAACF,kBAAkB,CAAC;AAUzD;;;;;AAMA,WAAaG,QAAS;EAAA;EAAA;EAUpB,kBAAYC,IAAkB;IAAA;IAAA;IAC5B,0BAAMA,IAAI;IAEV,MAAKC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACzB,MAAKC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAEvB,IAAIF,IAAI,CAACG,aAAa,EAAE;MACtB,IAAIN,qBAAqB,CAACO,GAAG,CAACJ,IAAI,CAACG,aAAa,CAAC,EAAE;QACjD,MAAKA,aAAa,GAAGH,IAAI,CAACG,aAAa;OACxC,MAAM;QACL,MAAM,IAAIT,UAAU,4CAChBM,IAAI,CAACG,aAAa,yBAAsB;;KAE/C,MAAM;MACL,MAAKA,aAAa,GAAG,UAAU;;IAEjC,MAAKE,iBAAiB,GAAGC,OAAO,CAACN,IAAI,CAACK,iBAAiB,CAAC;IAAC;EAC3D;EAAC;IAAA;IAAA,OAEQ,4BAAmBE,UAAyB;MACnDA,UAAU,GAAGZ,kBAAkB,CAACY,UAAU,CAAC;MAC3C,IAAMC,WAAW,GAAGD,UAAU,CAAC,CAAC,CAAC;MACjC,OAAO,CAAC,IAAI,CAACN,MAAM,EAAE,IAAI,CAACC,KAAK,EAAEM,WAAW,CAAC;IAC/C;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMC,MAAM,GAA6B;QACvC,QAAQ,EAAE,IAAI,CAACR,MAAM;QACrB,OAAO,EAAE,IAAI,CAACC,KAAK;QACnB,eAAe,EAAE,IAAI,CAACC,aAAa;QACnC,mBAAmB,EAAE,IAAI,CAACE;OAC3B;MAED,IAAMK,UAAU,0EAAoB;MACpCC,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;MACjC,OAAOD,MAAM;IACf;EAAC;IAAA;IAAA,OAEQ,cAAKI,MAAuC,EAAEC,MAAc;MAAA;MAEnE,OAAOtB,IAAI,CAAC,YAAK;QACf,IAAMuB,IAAI,GAAqB,CAAC,MAAI,CAACd,MAAM,EAAE,MAAI,CAACC,KAAK,CAAC;QACxD,IAAI,MAAI,CAACC,aAAa,KAAK,UAAU,EAAE;UACrC,OAAOb,KAAK,CAAC0B,cAAc,CAACH,MAAM,EAAEE,IAAI,EAAE,CAAC,MAAI,CAACV,iBAAiB,CAAC;SACnE,MAAM,IAAI,MAAI,CAACF,aAAa,KAAK,SAAS,EAAE;UAC3C,OAAOb,KAAK,CAAC2B,qBAAqB,CAC9BJ,MAAM,EAAEE,IAAI,EAAE,CAAC,MAAI,CAACV,iBAAiB,CAAC;SAC3C,MAAM;UACL,MAAM,IAAIa,KAAK,4BAAqB,MAAI,CAACf,aAAa,0CAAiBN,qBAAqB,qBAAkB;;MAElH,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,EA7D2BJ,KAAK;AACjC;AACOM,kBAAS,GAAG,UAAU;AA8D/BR,aAAa,CAAC4B,aAAa,CAACpB,QAAQ,CAAC","names":["image","serialization","tidy","Layer","ValueError","getExactlyOneShape","INTERPOLATION_KEYS","INTERPOLATION_METHODS","Set","Resizing","args","height","width","interpolation","has","cropToAspectRatio","Boolean","inputShape","numChannels","config","baseConfig","Object","assign","inputs","kwargs","size","resizeBilinear","resizeNearestNeighbor","Error","registerClass"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\preprocessing\\image_resizing.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {image, Rank, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';  // mul, add\n\nimport {Layer, LayerArgs} from '../../engine/topology';\nimport {ValueError} from '../../errors';\nimport {Shape} from '../../keras_format/common';\nimport {Kwargs} from '../../types';\nimport {getExactlyOneShape} from '../../utils/types_utils';  //, getExactlyOneTensor\n\n// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n//                                   'gaussian', 'mitchellcubic'\nconst INTERPOLATION_KEYS = ['bilinear', 'nearest'] as const;\nconst INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\ntype InterpolationType = typeof INTERPOLATION_KEYS[number];\n\nexport declare interface ResizingArgs extends LayerArgs {\n  height: number;\n  width: number;\n  interpolation?: InterpolationType; // default = 'bilinear';\n  cropToAspectRatio?: boolean;       // default = false;\n}\n\n/**\n * Preprocessing Resizing Layer\n *\n * This resizes images by a scaling and offset factor\n */\n\nexport class Resizing extends Layer {\n  /** @nocollapse */\n  static className = 'Resizing';\n  private readonly height: number;\n  private readonly width: number;\n  // method of interpolation to be used; default = \"bilinear\";\n  private readonly interpolation: InterpolationType;\n  // toggle whether the aspect ratio should be preserved; default = false;\n  private readonly cropToAspectRatio: boolean;\n\n  constructor(args: ResizingArgs) {\n    super(args);\n\n    this.height = args.height;\n    this.width = args.width;\n\n    if (args.interpolation) {\n      if (INTERPOLATION_METHODS.has(args.interpolation)) {\n        this.interpolation = args.interpolation;\n      } else {\n        throw new ValueError(`Invalid interpolation parameter: ${\n            args.interpolation} is not implemented`);\n      }\n    } else {\n      this.interpolation = 'bilinear';\n    }\n    this.cropToAspectRatio = Boolean(args.cropToAspectRatio);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const numChannels = inputShape[2];\n    return [this.height, this.width, numChannels];\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'height': this.height,\n      'width': this.width,\n      'interpolation': this.interpolation,\n      'cropToAspectRatio': this.cropToAspectRatio\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor<Rank.R3>|Tensor<Rank.R4>, kwargs: Kwargs):\n      Tensor[]|Tensor {\n    return tidy(() => {\n      const size: [number, number] = [this.height, this.width];\n      if (this.interpolation === 'bilinear') {\n        return image.resizeBilinear(inputs, size, !this.cropToAspectRatio);\n      } else if (this.interpolation === 'nearest') {\n        return image.resizeNearestNeighbor(\n            inputs, size, !this.cropToAspectRatio);\n      } else {\n        throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS]} are supported`);\n      }\n    });\n  }\n}\n\nserialization.registerClass(Resizing);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}