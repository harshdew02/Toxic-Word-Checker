{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var ScatterProgram = /*#__PURE__*/_createClass(function ScatterProgram(updateSize, sliceDim, indicesRank, updatesRank, strides, shape) {\n  var summingDupeIndex = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  _classCallCheck(this, ScatterProgram);\n  this.variableNames = ['updates', 'indices', 'defaultValue'];\n  this.outputShape = shape;\n  var stridesType = getCoordsDataType(strides.length);\n  var dtype = getCoordsDataType(shape.length);\n  var indicesString = '';\n  if (indicesRank === 1) {\n    indicesString = 'i';\n  } else if (indicesRank === 2) {\n    indicesString = 'i, j';\n  }\n  var indicesSnippet = \"getIndices(\".concat(indicesString, \")\");\n  var updatesString = '';\n  if (updatesRank === 1) {\n    updatesString = 'i';\n  } else if (updatesRank === 2) {\n    updatesString = 'i, coords[1]';\n  }\n  var updatesSnippet = \"getUpdates(\".concat(updatesString, \")\");\n  var strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n  this.userCode = \"\\n        \".concat(stridesType, \" strides = \").concat(stridesType, \"(\").concat(strides, \");\\n\\n        void main() {\\n          \").concat(dtype, \" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \").concat(updateSize, \"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \").concat(sliceDim, \"; j++) {\\n              int index = round(\").concat(indicesSnippet, \");\\n              flattenedIndex += index * \").concat(strideString, \";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \").concat(updatesSnippet, \";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,WAAaC,cAAc,6BAKzB,wBACIC,UAAkB,EAAEC,QAAgB,EAAEC,WAAmB,EACzDC,WAAmB,EAAEC,OAAiB,EAAEC,KAAe,EAChC;EAAA,IAAvBC,gBAAgB,uEAAG,IAAI;EAAA;EAP3B,kBAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,CAAC;EAQpD,IAAI,CAACC,WAAW,GAAGF,KAAK;EACxB,IAAMG,WAAW,GAAGV,iBAAiB,CAACM,OAAO,CAACK,MAAM,CAAC;EACrD,IAAMC,KAAK,GAAGZ,iBAAiB,CAACO,KAAK,CAACI,MAAM,CAAC;EAC7C,IAAIE,aAAa,GAAG,EAAE;EACtB,IAAIT,WAAW,KAAK,CAAC,EAAE;IACrBS,aAAa,GAAG,GAAG;GACpB,MAAM,IAAIT,WAAW,KAAK,CAAC,EAAE;IAC5BS,aAAa,GAAG,MAAM;;EAExB,IAAMC,cAAc,wBAAiBD,aAAa,MAAG;EAErD,IAAIE,aAAa,GAAG,EAAE;EACtB,IAAIV,WAAW,KAAK,CAAC,EAAE;IACrBU,aAAa,GAAG,GAAG;GACpB,MAAM,IAAIV,WAAW,KAAK,CAAC,EAAE;IAC5BU,aAAa,GAAG,cAAc;;EAEhC,IAAMC,cAAc,wBAAiBD,aAAa,MAAG;EAErD,IAAME,YAAY,GAAGd,QAAQ,GAAG,CAAC,GAAG,YAAY,GAAG,SAAS;EAC5D,IAAI,CAACe,QAAQ,uBACPR,WAAW,wBAAcA,WAAW,cAAIJ,OAAO,oDAG7CM,KAAK,oIAGeV,UAAU,4FAERC,QAAQ,uDACRW,cAAc,yDACNG,YAAY,oGAG/BD,cAAc,mJAM9B;AACL,CAAC","names":["getCoordsDataType","ScatterProgram","updateSize","sliceDim","indicesRank","updatesRank","strides","shape","summingDupeIndex","outputShape","stridesType","length","dtype","indicesString","indicesSnippet","updatesString","updatesSnippet","strideString","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\scatter_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}