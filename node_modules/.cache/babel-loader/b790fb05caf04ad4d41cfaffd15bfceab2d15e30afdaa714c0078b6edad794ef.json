{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImplCPU } from '../kernel_utils/shared';\nexport function sparseReshape(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var inputIndices = inputs.inputIndices,\n    inputShape = inputs.inputShape,\n    newShape = inputs.newShape;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(\"Input indices should be a matrix but received shape \".concat(inputIndices.shape));\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(\"Input shape should be a vector but received shape \".concat(inputShape.shape));\n  }\n  if (newShape.shape.length !== 1) {\n    throw new Error(\"Target shape should be a vector but received shape \".concat(newShape.shape));\n  }\n  var $inputShape = Array.from(backend.readSync(inputShape.dataId));\n  var $inputIndices = backend.readSync(inputIndices.dataId);\n  var targetShape = Array.from(backend.readSync(newShape.dataId));\n  var _sparseReshapeImplCPU = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape),\n    _sparseReshapeImplCPU2 = _slicedToArray(_sparseReshapeImplCPU, 3),\n    newIndices = _sparseReshapeImplCPU2[0],\n    indicesShape = _sparseReshapeImplCPU2[1],\n    outputShape = _sparseReshapeImplCPU2[2];\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport var sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,aAAa,QAAoD,uBAAuB;AAG9G,SAAQC,oBAAoB,QAAO,wBAAwB;AAE3D,OAAM,SAAUC,aAAa,CACzBC,IAA8D;EAEhE,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,YAAY,GAA0BF,MAAM,CAA5CE,YAAY;IAAEC,UAAU,GAAcH,MAAM,CAA9BG,UAAU;IAAEC,QAAQ,GAAIJ,MAAM,CAAlBI,QAAQ;EACzC,IAAIF,YAAY,CAACG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACnC,MAAM,IAAIC,KAAK,+DACXL,YAAY,CAACG,KAAK,EAAG;;EAE3B,IAAIF,UAAU,CAACE,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAIC,KAAK,6DACXJ,UAAU,CAACE,KAAK,EAAG;;EAGzB,IAAID,QAAQ,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAM,IAAIC,KAAK,8DAC2CH,QAAQ,CAACC,KAAK,EAAG;;EAG7E,IAAMG,WAAW,GACbC,KAAK,CAACC,IAAI,CAACT,OAAO,CAACU,QAAQ,CAACR,UAAU,CAACS,MAAM,CAAe,CAAC;EACjE,IAAMC,aAAa,GAAGZ,OAAO,CAACU,QAAQ,CAACT,YAAY,CAACU,MAAM,CAAe;EACzE,IAAME,WAAW,GACbL,KAAK,CAACC,IAAI,CAACT,OAAO,CAACU,QAAQ,CAACP,QAAQ,CAACQ,MAAM,CAAe,CAAC;EAE/D,4BAAgDf,oBAAoB,CAChEgB,aAAa,EAAEX,YAAY,CAACG,KAAK,EAAEH,YAAY,CAACa,KAAK,EAAEP,WAAW,EAClEM,WAAW,CAAC;IAAA;IAFTE,UAAU;IAAEC,YAAY;IAAEC,WAAW;EAG5C,OAAO,CACLjB,OAAO,CAACkB,cAAc,CAACF,YAAY,EAAEf,YAAY,CAACa,KAAK,EAAEC,UAAU,CAAC,EACpEf,OAAO,CAACkB,cAAc,CAClB,CAACD,WAAW,CAACZ,MAAM,CAAC,EAAEF,QAAQ,CAACW,KAAK,EAAE,IAAIK,UAAU,CAACF,WAAW,CAAC,CAAC,CACvE;AACH;AAEA,OAAO,IAAMG,mBAAmB,GAAiB;EAC/CC,UAAU,EAAE1B,aAAa;EACzB2B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb","names":["SparseReshape","sparseReshapeImplCPU","sparseReshape","args","inputs","backend","inputIndices","inputShape","newShape","shape","length","Error","$inputShape","Array","from","readSync","dataId","$inputIndices","targetShape","dtype","newIndices","indicesShape","outputShape","makeTensorInfo","Int32Array","sparseReshapeConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\SparseReshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}