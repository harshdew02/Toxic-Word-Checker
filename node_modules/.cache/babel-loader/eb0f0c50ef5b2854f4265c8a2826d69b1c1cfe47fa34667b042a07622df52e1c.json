{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\n  util.assert(xShape.length === dy.rank, function () {\n    return \"Length of inShape \" + \"(\".concat(xShape.length, \") and rank of dy (\").concat(dy.rank, \") must match\");\n  });\n  var xShape5D = xShape;\n  var dy5D = dy;\n  var reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n  var inDepth = xShape5D[4];\n  var outDepth = dy5D.shape[4];\n  util.assert(xShape5D.length === 5, function () {\n    return \"Error in conv3dDerInput: inShape must be length 5, but got length \" + \"\".concat(xShape5D.length, \".\");\n  });\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in conv3dDerInput: dy must be rank 5, but got \" + \"rank \".concat(dy5D.rank);\n  });\n  util.assert(filter.rank === 5, function () {\n    return \"Error in conv3dDerInput: filter must be rank 5, but got \" + \"rank \".concat(filter.rank);\n  });\n  util.assert(inDepth === filter.shape[3], function () {\n    return \"Error in conv3dDerInput: depth of input (\".concat(inDepth, \") must \") + \"match input depth for filter \".concat(filter.shape[3], \".\");\n  });\n  util.assert(outDepth === filter.shape[4], function () {\n    return \"Error in conv3dDerInput: depth of output (\".concat(outDepth, \") must \") + \"match output depth for filter \".concat(filter.shape[4], \".\");\n  });\n  var inputs = {\n    dy: dy5D,\n    filter: filter\n  };\n  var attrs = {\n    pad: pad,\n    strides: strides,\n    inputShape: xShape5D\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  var res = ENGINE.runKernel(Conv3DBackpropInputV2, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nexport var conv3DBackpropInput = /* @__PURE__ */op({\n  conv3DBackpropInput_: conv3DBackpropInput_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","Conv3DBackpropInputV2","util","op","reshape","conv3DBackpropInput_","xShape","dy","filter","strides","pad","assert","length","rank","xShape5D","dy5D","reshapedTo5D","shape","inDepth","outDepth","inputs","attrs","inputShape","res","runKernel","conv3DBackpropInput"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\conv3d_backprop_input.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3DBackpropInput_<T extends Tensor4D|Tensor5D>(\n    xShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    dy: T, filter: Tensor5D, strides: [number, number, number]|number,\n    pad: 'valid'|'same'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape5D = xShape as [number, number, number, number, number];\n  let dy5D = dy as Tensor5D;\n  let reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(\n      xShape5D.length === 5,\n      () =>\n          `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n          `${xShape5D.length}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n          `rank ${dy5D.rank}`);\n  util.assert(\n      filter.rank === 5,\n      () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n          `rank ${filter.rank}`);\n  util.assert(\n      inDepth === filter.shape[3],\n      () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(\n      outDepth === filter.shape[4],\n      () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[4]}.`);\n\n  const inputs: Conv3DBackpropInputV2Inputs = {dy: dy5D, filter};\n\n  const attrs:\n      Conv3DBackpropInputV2Attrs = {pad, strides, inputShape: xShape5D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv3DBackpropInputV2, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n  return res;\n}\n\nexport const conv3DBackpropInput = /* @__PURE__ */ op({conv3DBackpropInput_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}