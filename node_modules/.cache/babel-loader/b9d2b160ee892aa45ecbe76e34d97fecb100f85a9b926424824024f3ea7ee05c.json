{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport var HashTable = /*#__PURE__*/function () {\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  function HashTable(keyDType, valueDType) {\n    _classCallCheck(this, HashTable);\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n  _createClass(HashTable, [{\n    key: \"id\",\n    get: function get() {\n      return this.handle.id;\n    }\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose() {\n      this.tensorMap.forEach(function (value) {\n        return value.dispose();\n      });\n      this.tensorMap.clear();\n      this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensorMap.size;\n    }\n    /**\n     * The number of items in the hash table as a rank-0 tensor.\n     */\n  }, {\n    key: \"tensorSize\",\n    value: function tensorSize() {\n      return tfOps.scalar(this.size(), 'int32');\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n  }, {\n    key: \"import\",\n    value: function () {\n      var _import2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(keys, values) {\n        var _this = this;\n        var $keys;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.checkKeyAndValueTensor(keys, values);\n              // We only store the primitive values of the keys, this allows lookup\n              // to be O(1).\n              _context.next = 3;\n              return keys.data();\n            case 3:\n              $keys = _context.sent;\n              // Clear the hashTable before inserting new values.\n              this.tensorMap.forEach(function (value) {\n                return value.dispose();\n              });\n              this.tensorMap.clear();\n              return _context.abrupt(\"return\", tidy(function () {\n                var $values = unstack(values);\n                var keysLength = $keys.length;\n                var valuesLength = $values.length;\n                util.assert(keysLength === valuesLength, function () {\n                  return \"The number of elements doesn't match, keys has \" + \"\".concat(keysLength, \" elements, the values has \").concat(valuesLength, \" \") + \"elements.\";\n                });\n                for (var i = 0; i < keysLength; i++) {\n                  var key = $keys[i];\n                  var value = $values[i];\n                  keep(value);\n                  _this.tensorMap.set(key, value);\n                }\n                return _this.handle;\n              }));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _import(_x, _x2) {\n        return _import2.apply(this, arguments);\n      }\n      return _import;\n    }()\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(keys, defaultValue) {\n        var _this2 = this;\n        var $keys;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.checkKeyAndValueTensor(keys, defaultValue);\n              _context2.next = 3;\n              return keys.data();\n            case 3:\n              $keys = _context2.sent;\n              return _context2.abrupt(\"return\", tidy(function () {\n                var result = [];\n                for (var i = 0; i < $keys.length; i++) {\n                  var key = $keys[i];\n                  var value = _this2.findWithDefault(key, defaultValue);\n                  result.push(value);\n                }\n                return stack(result);\n              }));\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function find(_x3, _x4) {\n        return _find.apply(this, arguments);\n      }\n      return find;\n    }() // tslint:disable-next-line: no-any\n  }, {\n    key: \"findWithDefault\",\n    value: function findWithDefault(key, defaultValue) {\n      var result = this.tensorMap.get(key);\n      return result != null ? result : defaultValue;\n    }\n  }, {\n    key: \"checkKeyAndValueTensor\",\n    value: function checkKeyAndValueTensor(key, value) {\n      if (key.dtype !== this.keyDType) {\n        throw new Error(\"Expect key dtype \".concat(this.keyDType, \", but got \") + \"\".concat(key.dtype));\n      }\n      if (value.dtype !== this.valueDType) {\n        throw new Error(\"Expect value dtype \".concat(this.valueDType, \", but got \") + \"\".concat(value.dtype));\n      }\n    }\n  }]);\n  return HashTable;\n}();","map":{"version":3,"mappings":"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","names":["keep","scalar","stack","tidy","unstack","util","tfOps","HashTable","keyDType","valueDType","handle","tensorMap","Map","id","forEach","value","dispose","clear","size","keys","values","checkKeyAndValueTensor","data","$keys","$values","keysLength","length","valuesLength","assert","i","key","set","defaultValue","result","findWithDefault","push","get","dtype","Error"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\hash_table.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}