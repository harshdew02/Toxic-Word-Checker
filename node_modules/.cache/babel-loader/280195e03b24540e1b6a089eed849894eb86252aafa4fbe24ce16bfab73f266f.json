{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport var MirrorPadPackedProgram = /*#__PURE__*/_createClass(function MirrorPadPackedProgram(xShape, paddings, mode) {\n  _classCallCheck(this, MirrorPadPackedProgram);\n  this.variableNames = ['x'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = paddings.map(function (p, i) {\n    return p[0] /* beforePad */ + xShape[i] + p[1];\n  } /* afterPad */);\n  var rank = xShape.length;\n  var dtype = getCoordsDataType(rank);\n  var start = paddings.map(function (p) {\n    return p[0];\n  }).join(',');\n  var end = paddings.map(function (p, i) {\n    return p[0] + xShape[i];\n  }).join(',');\n  var coords = getChannels('rc', rank);\n  var source = getChannels('source', rank);\n  var cLimit = \"\".concat(coords[rank - 1], \" < \").concat(this.outputShape[rank - 1]);\n  var innerDims = rank === 1 ? 'source' : \"vec2(\".concat(source.slice(-2).join(), \")\");\n  var offset = mode === 'reflect' ? 0 : 1;\n  var mainLoop = '';\n  if (rank === 1) {\n    var padSetup = \"\\n        \".concat(dtype, \" source = rc;\\n        if (source < start) {\\n          source = start * 2 - source - \").concat(offset, \";\\n        } else if (source >= end) {\\n          source = (end - 1) * 2 - source + \").concat(offset, \";\\n        }\\n        source -= start;\\n      \");\n    mainLoop = \"\\n        \".concat(dtype, \" rc = outputLoc;\\n        \").concat(padSetup, \"\\n        result[0] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        \").concat(coords[rank - 1], \" += 1;\\n        if(\").concat(cLimit, \") {\\n          \").concat(padSetup, \"\\n          result[1] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        }\\n      \");\n  } else {\n    var _padSetup = \"\\n        \".concat(dtype, \" source = rc;\\n        \").concat(dtype, \" lt = \").concat(dtype, \"(lessThan(source, start));\\n        \").concat(dtype, \" gte = \").concat(dtype, \"(greaterThanEqual(source, end));\\n        \").concat(dtype, \" orig = 1 - (lt + gte);\\n        source = orig * source +\\n                lt * (start * 2 - source - \").concat(offset, \") +\\n                gte * ((end - 1) * 2 - source + \").concat(offset, \");\\n        source -= start;\\n      \");\n    mainLoop = \"\\n        \".concat(dtype, \" rc = outputLoc;\\n        \").concat(_padSetup, \"\\n        result[0] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        \").concat(coords[rank - 1], \" += 1;\\n        if(\").concat(cLimit, \") {\\n          \").concat(_padSetup, \"\\n          result[1] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        }\\n        rc = outputLoc;\\n        \").concat(coords[rank - 2], \" += 1;\\n        if(\").concat(coords[rank - 2], \" < \").concat(this.outputShape[rank - 2], \") {\\n          \").concat(_padSetup, \"\\n          result[2] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n          \").concat(coords[rank - 1], \" += 1;\\n          if(\").concat(cLimit, \") {\\n            \").concat(_padSetup, \"\\n            result[3] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n          }\\n        }\\n      \");\n  }\n  this.userCode = \"\\n      const \".concat(dtype, \" start = \").concat(dtype, \"(\").concat(start, \");\\n      const \").concat(dtype, \" end = \").concat(dtype, \"(\").concat(end, \");\\n\\n      void main() {\\n        \").concat(dtype, \" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \").concat(mainLoop, \"\\n        setOutput(result);\\n      }\\n    \");\n});","map":{"version":3,"mappings":"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","names":["getChannels","getCoordsDataType","MirrorPadPackedProgram","xShape","paddings","mode","outputShape","map","p","i","rank","length","dtype","start","join","end","coords","source","cLimit","innerDims","slice","offset","mainLoop","padSetup","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\mirror_pad_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}