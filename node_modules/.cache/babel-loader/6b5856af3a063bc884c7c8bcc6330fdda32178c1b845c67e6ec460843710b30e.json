{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nvar getBroadcastDims = backend_util.getBroadcastDims;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  var prefixSnippets = [];\n  inputsInfo.forEach(function (x) {\n    var size = util.sizeFromShape(x.shapeInfo.logicalShape);\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\"uniform float \".concat(x.name).concat(size > 1 ? \"[\".concat(size, \"]\") : '', \";\"));\n    } else {\n      prefixSnippets.push(\"uniform sampler2D \".concat(x.name, \";\"));\n      prefixSnippets.push(\"uniform int offset\".concat(x.name, \";\"));\n    }\n    if (program.enableShapeUniforms) {\n      var _getUniformInfoFromSh = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape),\n        uniformShape = _getUniformInfoFromSh.uniformShape;\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(\"uniform int \".concat(x.name, \"Shape;\"));\n          break;\n        case 2:\n          prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"Shape;\"));\n          break;\n        case 3:\n          prefixSnippets.push(\"uniform ivec3 \".concat(x.name, \"Shape;\"));\n          break;\n        case 4:\n          prefixSnippets.push(\"uniform ivec4 \".concat(x.name, \"Shape;\"));\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(\"uniform ivec2 \".concat(x.name, \"TexShape;\"));\n    }\n  });\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(\"uniform int outShape;\");\n        break;\n      case 2:\n        prefixSnippets.push(\"uniform ivec2 outShape;\");\n        prefixSnippets.push(\"uniform int outShapeStrides;\");\n        break;\n      case 3:\n        prefixSnippets.push(\"uniform ivec3 outShape;\");\n        prefixSnippets.push(\"uniform ivec2 outShapeStrides;\");\n        break;\n      case 4:\n        prefixSnippets.push(\"uniform ivec4 outShape;\");\n        prefixSnippets.push(\"uniform ivec3 outShapeStrides;\");\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(\"uniform ivec2 outTexShape;\");\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach(function (d) {\n      prefixSnippets.push(\"uniform \".concat(d.type, \" \").concat(d.name).concat(d.arrayIndex ? \"[\".concat(d.arrayIndex, \"]\") : '', \";\"));\n    });\n  }\n  var inputPrefixSnippet = prefixSnippets.join('\\n');\n  var inputSamplingSnippet = inputsInfo.map(function (x) {\n    return getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms);\n  }).join('\\n');\n  var outTexShape = outputShape.texShape;\n  var glsl = getGlslDifferences();\n  var floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  var outputSamplingSnippet;\n  var floatTextureSetOutputSnippet;\n  var shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  var source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n  var enableShapeUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\"\".concat(shape.length, \"-D input sampling\") + \" is not yet supported\");\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  var shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  var usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var enableShapeUniforms = arguments.length > 3 ? arguments[3] : undefined;\n  var res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n  var inShape = inInfo.shapeInfo.logicalShape;\n  var outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(\"\".concat(outShape.length, \"-D output sampling is not yet supported\"));\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \".concat(glsl.texture2D, \"(textureSampler, uv).r;\\n    }\\n  \");\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return \"\\n    void setOutput(float val) {\\n      \".concat(glsl.output, \" = vec4(val, 0, 0, 0);\\n    }\\n  \");\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return \"\\n    void setOutput(vec4 val) {\\n      \".concat(glsl.output, \" = val;\\n    }\\n  \");\n}\nfunction getShaderPrefix(glsl) {\n  var SHADER_PREFIX = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(glsl.varyingFs, \" vec2 resultUV;\\n    \").concat(glsl.defineOutput, \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \").concat(glsl.defineSpecialNaN, \"\\n    \").concat(glsl.defineSpecialInf, \"\\n    \").concat(glsl.defineRound, \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \").concat(SAMPLE_1D_SNIPPET, \"\\n    \").concat(SAMPLE_2D_SNIPPET, \"\\n    \").concat(SAMPLE_3D_SNIPPET, \"\\n  \");\n  return SHADER_PREFIX;\n}\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SHADER_PACKED_PREFIX = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\nfunction getOutputScalarCoords() {\n  return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \".concat(packedTexShape[1], \".0);\\n      }\\n    \");\n  }\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \".concat(packedTexShape[0], \".0);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\\n    }\\n  \";\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      return 2 * (resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y);\\n    }\\n  \");\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * float(outTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \".concat(texShape[1], \".0);\\n      }\\n    \");\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * float(outTexShape[0]));\\n      }\\n    \";\n    }\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \".concat(texShape[0], \".0);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\\n    }\\n  \";\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      return resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n    }\\n  \");\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \");\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    var _coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return \"\\n  ivec3 getOutputCoords() {\\n    ivec2 resTexRC = ivec2(resultUV.yx *\\n                           vec2(outTexShape[0], outTexShape[1]));\\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n    \".concat(_coordsFromIndexSnippet, \"\\n    return ivec3(r, c, d);\\n  }\\n\");\n  }\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatchN = texelsInBatch * outShape[1];\\n\\n      int b2 = index / texelsInBatchN;\\n      index -= b2 * texelsInBatchN;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec4(b2, b, r, c);\\n    }\\n  \";\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  var texelsInBatchN = texelsInBatch;\n  var batches = \"\";\n  var coords = 'b, r, c';\n  for (var b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = \"\\n      int b\".concat(b, \" = index / \").concat(texelsInBatchN, \";\\n      index -= b\").concat(b, \" * \").concat(texelsInBatchN, \";\\n    \") + batches;\n    coords = \"b\".concat(b, \", \") + coords;\n  }\n  return \"\\n    ivec\".concat(shape.length, \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      \").concat(batches, \"\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec\").concat(shape.length, \"(\").concat(coords, \");\\n    }\\n  \");\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    var _coordsFromIndexSnippet2 = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      \".concat(_coordsFromIndexSnippet2, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n  }\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n}\nfunction getOutput5DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\".concat(texShape[0], \",\\n                             \").concat(texShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \");\n}\nfunction getOutput6DCoords(shape, texShape) {\n  var coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \");\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      }\\n    \");\n  }\n  // texels needed to accommodate a logical row\n  var texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      }\\n    \");\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \");\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      int r = index / outShape[1];\\n      int c = index - r * outShape[1];\\n      return ivec2(r, c);\\n    }\\n  \";\n  }\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      int r = index / \").concat(shape[1], \";\\n      int c = index - r * \").concat(shape[1], \";\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getFlatOffsetUniformName(texName) {\n  return \"offset\".concat(texName);\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", halfCR);\\n    }\\n  \");\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"float \".concat(funcName, \"() {return \").concat(texName, \";}\");\n  }\n  var _inputInfo$shapeInfo$ = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n    texNumR = _inputInfo$shapeInfo$[0],\n    texNumC = _inputInfo$shapeInfo$[1];\n  if (texNumR === 1 && texNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var _inputInfo$shapeInfo$2 = _slicedToArray(inputInfo.shapeInfo.texShape, 2),\n    tNumR = _inputInfo$shapeInfo$2[0],\n    tNumC = _inputInfo$shapeInfo$2[1];\n  return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      vec2 uv = packedUVfrom1D(\\n        packedTexShape[0], packedTexShape[1], index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var texShape = inputInfo.shapeInfo.texShape;\n  var tNumR = texShape[0];\n  var tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / \").concat(tNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / \").concat(tNumC, \".0, 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var valuesPerRow = Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(valuesPerRow, \", \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    var _texNumR = texShape[0];\n    var _texNumC = texShape[1];\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(_texNumC, \".0, \").concat(_texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var _util$squeezeShape = util.squeezeShape(shape),\n    newShape = _util$squeezeShape.newShape,\n    keptDims = _util$squeezeShape.keptDims;\n  var squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\").concat(shape[1], \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2(0.5, (index + 0.5) / float(\").concat(texName, \"TexShape[0]));\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(texName, \"Shape[1], 1, 1));\\n        vec2 uv = vec2((index + 0.5) / float(\").concat(texName, \"TexShape[1]), 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \").concat(texNumC, \".0, 0.5);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  if (enableShapeUniforms) {\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(texName, \"Shape[1] + col + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  return \"\\n  float \".concat(funcName, \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \").concat(shape[1], \" + col + \").concat(offset, \";\\n    vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n    return sampleTexture(\").concat(texName, \", uv);\\n  }\\n\");\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    var squeezedShape = shape.slice(1);\n    var keptDims = [1, 2];\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['b', 'row', 'col'];\n    return \"\\n        \".concat(getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        vec4 \").concat(funcName, \"(int b, int row, int col) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  var glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom3D(\\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[2] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(texNumR, \", \").concat(texNumC, \", \").concat(texelsInBatch, \", \").concat(valuesPerRow, \", b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride0 = shape[1] * shape[2];\n  var stride1 = shape[2];\n  var _util$squeezeShape2 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape2.newShape,\n    keptDims = _util$squeezeShape2.keptDims;\n  var squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    var params = ['row', 'col', 'depth'];\n    return \"\\n        \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n        float \").concat(funcName, \"(int row, int col, int depth) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\").concat(stride0, \", \").concat(stride1, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int stride1 = \").concat(texName, \"Shape[2];\\n        float texR = float(row);\\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n        float \".concat(funcName, \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\").concat(stride1, \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n          return sampleTexture(\").concat(texName, \", uv);\\n        }\\n      \");\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        float texR = dot(vec2(row, col), vec2(\").concat(texName, \"Shape[1], 1));\\n        float texC = float(depth);\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\").concat(shape[1], \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int stride0 = \").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2];\\n      int stride1 = \").concat(texName, \"Shape[2];\\n      int index = row * stride0 + col * stride1 + depth + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n    \");\n  }\n  return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n  \");\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return \"\\n    vec4 \".concat(funcName, \"(int b2, int b, int row, int col) {\\n      int valuesPerRow = int(ceil(float(\").concat(texName, \"Shape[3]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(\").concat(texName, \"Shape[2]) / 2.0));\\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\\n      texelsInBatch *= \").concat(texName, \"Shape[1];\\n      index = b2 * texelsInBatch + index;\\n      ivec2 packedTexShape = ivec2(ceil(float(\").concat(texName, \"TexShape[0]) / 2.0), ceil(float(\").concat(texName, \"TexShape[1]) / 2.0));\\n      int texR = index / packedTexShape[1];\\n      int texC = index - texR * packedTexShape[1];\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var rank = shape.length;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  var texNumR = packedTexShape[0];\n  var texNumC = packedTexShape[1];\n  var valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  var texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  var params = \"int b, int row, int col\";\n  var index = \"b * \".concat(texelsInBatch, \" + (row / 2) * \").concat(valuesPerRow, \" + (col / 2)\");\n  for (var b = 2; b < rank - 1; b++) {\n    params = \"int b\".concat(b, \", \") + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = \"b\".concat(b, \" * \").concat(texelsInBatch, \" + \") + index;\n  }\n  return \"\\n    vec4 \".concat(funcName, \"(\").concat(params, \") {\\n      int index = \").concat(index, \";\\n      int texR = index / \").concat(texNumC, \";\\n      int texC = index - texR * \").concat(texNumC, \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \", \").concat(texNumR, \");\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride2 = shape[3];\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n  var _util$squeezeShape3 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape3.newShape,\n    keptDims = _util$squeezeShape3.keptDims;\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo, enableShapeUniforms), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  var stride2Str = \"int stride2 = \".concat(texName, \"Shape[3];\");\n  var stride1Str = \"int stride1 = \".concat(texName, \"Shape[2] * stride2;\");\n  var stride0Str = \"int stride0 = \".concat(texName, \"Shape[1] * stride1;\");\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        \").concat(stride2Str, \"\\n        \").concat(stride1Str, \"\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(stride1, stride2, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\").concat(stride1, \", \").concat(stride2, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(texName, \"Shape[1] * \").concat(texName, \"Shape[2], \").concat(texName, \"Shape[2], 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texName, \"TexShape[1], \").concat(texName, \"TexShape[0]);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n    }\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(shape[1] * shape[2], \", \").concat(shape[2], \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      \").concat(stride2Str, \"\\n      \").concat(stride1Str, \"\\n      \").concat(stride0Str, \"\\n      int index = row * stride0 + col * stride1 +\\n          depth * stride2 + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texName, \"TexShape[0], \").concat(texName, \"TexShape[1], index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" +\\n          depth * \").concat(stride2, \" + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler5D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var stride3 = shape[4];\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n  var _util$squeezeShape4 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape4.newShape,\n    keptDims = _util$squeezeShape4.keptDims;\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          depth3;\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3], \",\\n               \").concat(shape[2] * shape[3], \", \").concat(shape[3], \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler6D(inputInfo) {\n  var shape = inputInfo.shapeInfo.logicalShape;\n  var texName = inputInfo.name;\n  var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  var _util$squeezeShape5 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape5.newShape,\n    keptDims = _util$squeezeShape5.keptDims;\n  if (newShape.length < shape.length) {\n    var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  var stride4 = shape[5];\n  var stride3 = shape[4] * stride4;\n  var stride2 = shape[3] * stride3;\n  var stride1 = shape[2] * stride2;\n  var stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\").concat(stride4, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  var flatOffset = inputInfo.shapeInfo.flatOffset;\n  var texShape = inputInfo.shapeInfo.texShape;\n  var texNumR = texShape[0];\n  var texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", \").concat(stride4, \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[3] * shape[4], \",\\n               \").concat(shape[4], \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  var offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 * \").concat(stride4, \" + depth4 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getUniformSampler(inputInfo) {\n  var texName = inputInfo.name;\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return \"return \".concat(texName, \";\");\n  }\n  return \"\\n    for (int i = 0; i < \".concat(inSize, \"; i++) {\\n      if (i == index) {\\n        return \").concat(texName, \"[i];\\n      }\\n    }\\n  \");\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var type = getCoordsDataType(outRank);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n  var unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n  var output = \"return outputValue;\";\n  var inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  var isInputScalar = inSize === 1;\n  var outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  var isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";\n    } else {\n      output = \"\\n        return vec4(outputValue.x);\\n      \";\n    }\n  } else if (broadcastDims.length) {\n    var rows = inRank - 2;\n    var cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.x);\";\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = \"return vec4(outputValue.x, outputValue.y, \" + \"outputValue.x, outputValue.y);\";\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.xx, outputValue.zz);\";\n    }\n  }\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      vec4 outputValue = get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n      \").concat(output, \"\\n    }\\n  \");\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  var texName = inputInfo.name;\n  var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  var outTexShape = outShapeInfo.texShape;\n  var inTexShape = inputInfo.shapeInfo.texShape;\n  var inRank = inputInfo.shapeInfo.logicalShape.length;\n  var outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", resultUV);\\n      }\\n    \");\n  }\n  var type = getCoordsDataType(outRank);\n  var broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  var rankDiff = outRank - inRank;\n  var coordsSnippet;\n  var fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(function (d) {\n      return \"coords.\".concat(fields[d + rankDiff], \" = 0;\");\n    }).join('\\n');\n  }\n  var unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n      return \"coords.\".concat(fields[i + rankDiff]);\n    }).join(', ');\n  }\n  return \"\\n    float \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      return get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n    }\\n  \");\n}\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(\"GPU for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  var _util$squeezeShape6 = util.squeezeShape(shape),\n    newShape = _util$squeezeShape6.newShape,\n    keptDims = _util$squeezeShape6.keptDims;\n  var rank = shape.length;\n  var useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  var squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  var useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  var uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape: useSqueezeShape,\n    uniformShape: uniformShape,\n    keptDims: keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(function (d) {\n    return params[d];\n  }).join(', ');\n}","map":{"version":3,"mappings":"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","names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","program","prefixSnippets","forEach","size","sizeFromShape","x","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","getUniformInfoFromShape","packedInputs","texShape","uniformShape","length","customUniforms","d","type","arrayIndex","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","userCode","getSamplerFromInInfo","inInfo","shape","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","usesPackedTextures","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getOutputLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","texNumR","texNumC","offset","tNumR","tNumC","getUniformSampler","valuesPerRow","squeezeShape","newShape","keptDims","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","flatOffset","rank","index","stride2","stride2Str","stride1Str","stride0Str","stride3","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","useSqueezePackedShape","useSqueezeShape","JSON","parse","stringify"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\shader_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}