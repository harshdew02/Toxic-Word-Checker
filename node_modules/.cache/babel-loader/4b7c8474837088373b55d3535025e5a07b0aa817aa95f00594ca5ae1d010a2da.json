{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport function loadWeightsAsArrayBuffer(_x, _x2) {\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nfunction _loadWeightsAsArrayBuffer() {\n  _loadWeightsAsArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fetchURLs, loadOptions) {\n    var fetchFunc, requests, fetchStartFraction, fetchEndFraction, responses, bufferPromises, bufferStartFraction, bufferEndFraction, buffers;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (loadOptions == null) {\n            loadOptions = {};\n          }\n          fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc; // Create the requests for all of the weights in parallel.\n          requests = fetchURLs.map(function (fetchURL) {\n            return fetchFunc(fetchURL, loadOptions.requestInit, {\n              isBinary: true\n            });\n          });\n          fetchStartFraction = 0;\n          fetchEndFraction = 0.5;\n          if (!(loadOptions.onProgress == null)) {\n            _context2.next = 11;\n            break;\n          }\n          _context2.next = 8;\n          return Promise.all(requests);\n        case 8:\n          _context2.t0 = _context2.sent;\n          _context2.next = 14;\n          break;\n        case 11:\n          _context2.next = 13;\n          return monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n        case 13:\n          _context2.t0 = _context2.sent;\n        case 14:\n          responses = _context2.t0;\n          bufferPromises = responses.map(function (response) {\n            return response.arrayBuffer();\n          });\n          bufferStartFraction = 0.5;\n          bufferEndFraction = 1;\n          if (!(loadOptions.onProgress == null)) {\n            _context2.next = 24;\n            break;\n          }\n          _context2.next = 21;\n          return Promise.all(bufferPromises);\n        case 21:\n          _context2.t1 = _context2.sent;\n          _context2.next = 27;\n          break;\n        case 24:\n          _context2.next = 26;\n          return monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n        case 26:\n          _context2.t1 = _context2.sent;\n        case 27:\n          buffers = _context2.t1;\n          return _context2.abrupt(\"return\", buffers);\n        case 29:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _loadWeightsAsArrayBuffer.apply(this, arguments);\n}\nexport function loadWeights(_x3) {\n  return _loadWeights.apply(this, arguments);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nfunction _loadWeights() {\n  _loadWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(manifest) {\n    var filePathPrefix,\n      weightNames,\n      requestInit,\n      fetchWeights,\n      loadWeights,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          filePathPrefix = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : '';\n          weightNames = _args3.length > 2 ? _args3[2] : undefined;\n          requestInit = _args3.length > 3 ? _args3[3] : undefined;\n          // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n          // single weight from a group, the whole group will be fetched. At a future\n          // date, we should support fetching only the individual shards within a\n          // group that are needed to reconstruct the requested weight.\n          // TODO(cais): Use `decodeWeights` for implementation.\n          fetchWeights = function fetchWeights(fetchUrls) {\n            return loadWeightsAsArrayBuffer(fetchUrls, {\n              requestInit: requestInit\n            });\n          };\n          loadWeights = weightsLoaderFactory(fetchWeights);\n          return _context3.abrupt(\"return\", loadWeights(manifest, filePathPrefix, weightNames));\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _loadWeights.apply(this, arguments);\n}\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(manifest) {\n      var filePathPrefix,\n        weightNames,\n        groupIndicesToFetchMap,\n        groupWeightsToFetch,\n        weightsFound,\n        allManifestWeightNames,\n        weightsNotFound,\n        groupIndicesToFetch,\n        fetchUrls,\n        buffers,\n        weightsTensorMap,\n        bufferIndexOffset,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            filePathPrefix = _args.length > 1 && _args[1] !== undefined ? _args[1] : '';\n            weightNames = _args.length > 2 ? _args[2] : undefined;\n            // Collect all the groups, weights, and their relative offsets to be\n            // fetched.\n            groupIndicesToFetchMap = manifest.map(function () {\n              return false;\n            });\n            groupWeightsToFetch = {};\n            weightsFound = weightNames != null ? weightNames.map(function () {\n              return false;\n            }) : [];\n            allManifestWeightNames = [];\n            manifest.forEach(function (manifestGroupConfig, groupIndex) {\n              var groupOffset = 0;\n              manifestGroupConfig.weights.forEach(function (weightsEntry) {\n                var rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n                var weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);\n                var enqueueWeightsForFetchingFn = function enqueueWeightsForFetchingFn() {\n                  groupIndicesToFetchMap[groupIndex] = true;\n                  if (groupWeightsToFetch[groupIndex] == null) {\n                    groupWeightsToFetch[groupIndex] = [];\n                  }\n                  groupWeightsToFetch[groupIndex].push({\n                    manifestEntry: weightsEntry,\n                    groupOffset: groupOffset,\n                    sizeBytes: weightsBytes\n                  });\n                };\n                if (weightNames != null) {\n                  weightNames.forEach(function (weightName, weightIndex) {\n                    if (weightName === weightsEntry.name) {\n                      enqueueWeightsForFetchingFn();\n                      weightsFound[weightIndex] = true;\n                    }\n                  });\n                } else {\n                  enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n              });\n            });\n            if (weightsFound.every(function (found) {\n              return found;\n            })) {\n              _context.next = 10;\n              break;\n            }\n            weightsNotFound = weightNames.filter(function (_, i) {\n              return !weightsFound[i];\n            });\n            throw new Error(\"Could not find weights in manifest with names: \" + \"\".concat(weightsNotFound.join(', '), \". \\n\") + \"Manifest JSON has weights with names: \" + \"\".concat(allManifestWeightNames.join(', '), \".\"));\n          case 10:\n            // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n            // IDs.\n            groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\n              if (shouldFetch) {\n                accumulator.push(i);\n              }\n              return accumulator;\n            }, []);\n            fetchUrls = [];\n            groupIndicesToFetch.forEach(function (i) {\n              manifest[i].paths.forEach(function (filepath) {\n                var fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n              });\n            });\n            _context.next = 15;\n            return fetchWeightsFunction(fetchUrls);\n          case 15:\n            buffers = _context.sent;\n            weightsTensorMap = {};\n            bufferIndexOffset = 0;\n            groupIndicesToFetch.forEach(function (i) {\n              var numBuffers = manifest[i].paths.length;\n              var groupBytes = 0;\n              for (var _i = 0; _i < numBuffers; _i++) {\n                groupBytes += buffers[bufferIndexOffset + _i].byteLength;\n              }\n              // Create a buffer for the whole group.\n              var groupBuffer = new ArrayBuffer(groupBytes);\n              var groupByteBuffer = new Uint8Array(groupBuffer);\n              var groupBufferOffset = 0;\n              for (var _i2 = 0; _i2 < numBuffers; _i2++) {\n                var buffer = new Uint8Array(buffers[bufferIndexOffset + _i2]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n              }\n              var weightsEntries = groupWeightsToFetch[i];\n              weightsEntries.forEach(function (weightsEntry) {\n                var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                var nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (var name in nameToTensorMap) {\n                  weightsTensorMap[name] = nameToTensorMap[name];\n                }\n              });\n              bufferIndexOffset += numBuffers;\n            });\n            return _context.abrupt(\"return\", weightsTensorMap);\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"mappings":"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","names":["env","util","decodeWeights","monitorPromisesProgress","DTYPE_VALUE_SIZE_MAP","loadWeightsAsArrayBuffer","fetchURLs","loadOptions","fetchFunc","platform","fetch","requests","map","fetchURL","requestInit","isBinary","fetchStartFraction","fetchEndFraction","onProgress","Promise","all","responses","bufferPromises","response","arrayBuffer","bufferStartFraction","bufferEndFraction","buffers","loadWeights","manifest","filePathPrefix","weightNames","fetchWeights","fetchUrls","weightsLoaderFactory","fetchWeightsFunction","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","forEach","manifestGroupConfig","groupIndex","groupOffset","weights","rawDtype","weightsEntry","quantization","dtype","weightsBytes","sizeFromShape","shape","enqueueWeightsForFetchingFn","push","manifestEntry","sizeBytes","weightName","weightIndex","name","every","found","weightsNotFound","filter","_","i","Error","join","groupIndicesToFetch","reduce","accumulator","shouldFetch","paths","fetchUrl","endsWith","filepath","weightsTensorMap","bufferIndexOffset","numBuffers","length","groupBytes","byteLength","groupBuffer","ArrayBuffer","groupByteBuffer","Uint8Array","groupBufferOffset","buffer","set","weightsEntries","byteBuffer","slice","nameToTensorMap"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\weights_loader.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\nimport {decodeWeights} from './io_utils';\nimport {monitorPromisesProgress} from './progress';\nimport {DTYPE_VALUE_SIZE_MAP, LoadOptions, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(\n    fetchURLs: string[], loadOptions?: LoadOptions): Promise<ArrayBuffer[]> {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n                                                    loadOptions.fetchFunc;\n\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(\n      fetchURL =>\n          fetchFunc(fetchURL, loadOptions.requestInit, {isBinary: true}));\n\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n\n  const responses = loadOptions.onProgress == null ?\n      await Promise.all(requests) :\n      await monitorPromisesProgress(\n          requests, loadOptions.onProgress, fetchStartFraction,\n          fetchEndFraction);\n\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n\n  const buffers = loadOptions.onProgress == null ?\n      await Promise.all(bufferPromises) :\n      await monitorPromisesProgress(\n          bufferPromises, loadOptions.onProgress, bufferStartFraction,\n          bufferEndFraction);\n  return buffers;\n}\n\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(\n    manifest: WeightsManifestConfig, filePathPrefix = '',\n    weightNames?: string[],\n    requestInit?: RequestInit): Promise<NamedTensorMap> {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n\n  const fetchWeights = (fetchUrls: string[]) =>\n      loadWeightsAsArrayBuffer(fetchUrls, {requestInit});\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(\n    fetchWeightsFunction: (fetchUrls: string[]) => Promise<ArrayBuffer[]>):\n    (manifest: WeightsManifestConfig, filePathPrefix?: string,\n     weightNames?: string[]) => Promise<NamedTensorMap> {\n  return async(\n             manifest: WeightsManifestConfig, filePathPrefix = '',\n             weightNames?: string[]): Promise<NamedTensorMap> => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch: {\n      [group: number]: Array<{\n        manifestEntry: WeightsManifestEntry; groupOffset: number;\n        sizeBytes: number;\n      }>\n    } = {};\n    const weightsFound =\n        weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames: string[] = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = ('quantization' in weightsEntry) ?\n            weightsEntry.quantization.dtype :\n            weightsEntry.dtype;\n\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n            util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\n          `Could not find weights in manifest with names: ` +\n          `${weightsNotFound.join(', ')}. \\n` +\n          `Manifest JSON has weights with names: ` +\n          `${allManifestWeightNames.join(', ')}.`);\n    }\n\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch =\n        groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n          if (shouldFetch) {\n            accumulator.push(i);\n          }\n          return accumulator;\n        }, []);\n\n    const fetchUrls: string[] = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix +\n            (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n\n    const weightsTensorMap: NamedTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n\n      let groupBytes = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      }\n\n      // Create a buffer for the whole group.\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(\n            weightsEntry.groupOffset,\n            weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap =\n            decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n\n      bufferIndexOffset += numBuffers;\n    });\n\n    return weightsTensorMap;\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}