{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat as _concat, keep, reshape, scalar, slice, stack as _stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport var TensorList = /*#__PURE__*/function () {\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  function TensorList(tensors, elementShape, elementDtype) {\n    var maxNumElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    _classCallCheck(this, TensorList);\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n    if (tensors != null) {\n      tensors.forEach(function (tensor) {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(tensor.dtype));\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n  _createClass(TensorList, [{\n    key: \"id\",\n    get: function get() {\n      return this.idTensor.id;\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new TensorList(_toConsumableArray(this.tensors), this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose(keepIds) {\n      this.tensors.forEach(function (tensor) {\n        if (keepIds == null || !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n      this.tensors.length = 0;\n      this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n  }, {\n    key: \"stack\",\n    value: function stack(elementShape, elementDtype) {\n      var _this = this;\n      var numElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (numElements !== -1 && this.tensors.length !== numElements) {\n        throw new Error(\"Operation expected a list with \".concat(numElements, \" elements but got a list with \").concat(this.tensors.length, \" elements.\"));\n      }\n      assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      return tidy(function () {\n        var reshapedTensors = _this.tensors.map(function (tensor) {\n          return reshape(tensor, outputElementShape);\n        });\n        return _stack(reshapedTensors, 0);\n      });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n  }, {\n    key: \"popBack\",\n    value: function popBack(elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (this.size() === 0) {\n        throw new Error('Trying to pop from an empty list.');\n      }\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      var tensor = this.tensors.pop();\n      tensor.kept = false;\n      assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n      return reshape(tensor, outputElementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n  }, {\n    key: \"pushBack\",\n    value: function pushBack(tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n      }\n      assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n      if (this.maxNumElements === this.size()) {\n        throw new Error(\"Trying to push element into a full list.\");\n      }\n      keep(tensor);\n      this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n  }, {\n    key: \"resize\",\n    value: function resize(size) {\n      if (size < 0) {\n        throw new Error(\"TensorListResize expects size to be non-negative. Got: \".concat(size));\n      }\n      if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n        throw new Error(\"TensorListResize input size \".concat(size, \" is greater maxNumElement \").concat(this.maxNumElements, \".\"));\n      }\n      var destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n      destTensorList.tensors.length = size;\n      for (var i = 0; i < Math.min(this.tensors.length, size); ++i) {\n        destTensorList.tensors[i] = this.tensors[i];\n      }\n      return destTensorList;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n  }, {\n    key: \"getItem\",\n    value: function getItem(elementIndex, elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (elementIndex < 0 || elementIndex > this.tensors.length) {\n        throw new Error(\"Trying to access element \".concat(elementIndex, \" in a list with \").concat(this.tensors.length, \" elements.\"));\n      }\n      if (this.tensors[elementIndex] == null) {\n        throw new Error(\"element at index \".concat(elementIndex, \" is null.\"));\n      }\n      assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n  }, {\n    key: \"setItem\",\n    value: function setItem(elementIndex, tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n      }\n      if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n        throw new Error(\"Trying to set element \".concat(elementIndex, \" in a list with max \").concat(this.maxNumElements, \" elements.\"));\n      }\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n      keep(tensor);\n      // dispose the previous value if it is replacing.\n      if (this.tensors[elementIndex] != null) {\n        this.tensors[elementIndex].kept = false;\n      }\n      this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n  }, {\n    key: \"gather\",\n    value: function gather(indices, elementDtype, elementShape) {\n      var _this2 = this;\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n      // When indices is greater than the size of the list, indices beyond the\n      // size of the list are ignored.\n      indices = indices.slice(0, this.size());\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      if (indices.length === 0) {\n        return tensor([], [0].concat(outputElementShape));\n      }\n      return tidy(function () {\n        var tensors = indices.map(function (i) {\n          return reshape(_this2.tensors[i], outputElementShape);\n        });\n        return _stack(tensors, 0);\n      });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n  }, {\n    key: \"concat\",\n    value: function concat(elementDtype, elementShape) {\n      var _this3 = this;\n      if (!!elementDtype && elementDtype !== this.elementDtype) {\n        throw new Error(\"TensorList dtype is \".concat(this.elementDtype, \" but concat requested dtype \").concat(elementDtype));\n      }\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n      var outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n      if (this.size() === 0) {\n        return tensor([], [0].concat(outputElementShape));\n      }\n      return tidy(function () {\n        var tensors = _this3.tensors.map(function (t) {\n          return reshape(t, outputElementShape);\n        });\n        return _concat(tensors, 0);\n      });\n    }\n  }]);\n  return TensorList;\n}();\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  var dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\"Tensor must be at least a vector, but saw shape: \".concat(tensor.shape));\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(elementDtype));\n  }\n  var tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  var tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \".concat(indices.length, \" vs. \").concat(tensor.shape[0]));\n  }\n  var maxIndex = Math.max.apply(Math, _toConsumableArray(indices));\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\"Max index must be < array size (\".concat(maxIndex, \"  vs. \").concat(numElements, \")\"));\n  }\n  var list = new TensorList([], elementShape, tensor.dtype, numElements);\n  var tensors = unstack(tensor, 0);\n  indices.forEach(function (value, index) {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n  var totalLength = 0;\n  var cumulativeLengths = length.map(function (len) {\n    totalLength += len;\n    return totalLength;\n  });\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \".concat(totalLength, \", and tensor's shape is: \").concat(tensor.shape));\n  }\n  var shapeWithoutFirstDim = tensor.shape.slice(1);\n  var outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  var tensors = tidy(function () {\n    var tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (var i = 0; i < length.length; ++i) {\n      var previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      var indices = [0, previousLength, 0];\n      var sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n  var list = new TensorList([], elementShape, tensor.dtype, length.length);\n  for (var i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}","map":{"version":3,"mappings":"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","names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","inferElementShape","mergeElementShape","TensorList","tensors","elementShape","elementDtype","maxNumElements","forEach","dtype","Error","shape","idTensor","id","keepIds","has","dispose","length","numElements","outputElementShape","reshapedTensors","map","size","pop","kept","push","destTensorList","i","Math","min","elementIndex","indices","t","fromTensor","tensorElementShape","tensorList","reserve","scatter","maxIndex","max","list","value","index","setItem","split","totalLength","cumulativeLengths","len","shapeWithoutFirstDim","elementPerRow","previousLength","sizes"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\tensor_list.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    tensor.kept = false;\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    const destTensorList: TensorList = new TensorList(\n        [], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n    return destTensorList;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n\n    // dispose the previous value if it is replacing.\n    if (this.tensors[elementIndex] != null) {\n      this.tensors[elementIndex].kept = false;\n    }\n\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number,\n    maxNumElements: number) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}