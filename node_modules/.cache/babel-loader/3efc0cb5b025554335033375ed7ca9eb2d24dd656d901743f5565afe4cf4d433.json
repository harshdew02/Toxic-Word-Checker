{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { CropAndResize } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the `boxInd[i]`th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(image, boxes, boxInd, cropSize) {\n  var method = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'bilinear';\n  var extrapolationValue = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var $image = convertToTensor(image, 'image', 'cropAndResize');\n  var $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  var $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n  var numBoxes = $boxes.shape[0];\n  util.assert($image.rank === 4, function () {\n    return 'Error in cropAndResize: image must be rank 4,' + \"but got rank \".concat($image.rank, \".\");\n  });\n  util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, function () {\n    return \"Error in cropAndResize: boxes must be have size [\".concat(numBoxes, \",4] \") + \"but had shape \".concat($boxes.shape, \".\");\n  });\n  util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, function () {\n    return \"Error in cropAndResize: boxInd must be have size [\".concat(numBoxes, \"] \") + \"but had shape \".concat($boxes.shape, \".\");\n  });\n  util.assert(cropSize.length === 2, function () {\n    return \"Error in cropAndResize: cropSize must be of length 2, but got \" + \"length \".concat(cropSize.length, \".\");\n  });\n  util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, function () {\n    return \"cropSize must be atleast [1,1], but was \".concat(cropSize);\n  });\n  util.assert(method === 'bilinear' || method === 'nearest', function () {\n    return \"method must be bilinear or nearest, but was \".concat(method);\n  });\n  var inputs = {\n    image: $image,\n    boxes: $boxes,\n    boxInd: $boxInd\n  };\n  var attrs = {\n    method: method,\n    extrapolationValue: extrapolationValue,\n    cropSize: cropSize\n  };\n  var res = ENGINE.runKernel(CropAndResize, inputs, attrs);\n  return res;\n}\nexport var cropAndResize = /* @__PURE__ */op({\n  cropAndResize_: cropAndResize_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,aAAa,QAAgD,oBAAoB;AAIzF,SAAQC,eAAe,QAAO,uBAAuB;AAErD,OAAO,KAAKC,IAAI,MAAM,YAAY;AAElC,SAAQC,EAAE,QAAO,cAAc;AAE/B;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,cAAc,CACnBC,KAA0B,EAC1BC,KAA0B,EAC1BC,MAA2B,EAC3BC,QAA0B,EAEJ;EAAA,IADtBC,6EAA+B,UAAU;EAAA,IACzCC,kBAAkB,uEAAG,CAAC;EAExB,IAAMC,MAAM,GAAGV,eAAe,CAACI,KAAK,EAAE,OAAO,EAAE,eAAe,CAAC;EAC/D,IAAMO,MAAM,GAAGX,eAAe,CAACK,KAAK,EAAE,OAAO,EAAE,eAAe,EAAE,SAAS,CAAC;EAC1E,IAAMO,OAAO,GAAGZ,eAAe,CAACM,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,OAAO,CAAC;EAE3E,IAAMO,QAAQ,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;EAEhCb,IAAI,CAACc,MAAM,CACPL,MAAM,CAACM,IAAI,KAAK,CAAC,EACjB;IAAA,OAAM,+CAA+C,0BACjCN,MAAM,CAACM,IAAI,MAAG;EAAA,EAAC;EACvCf,IAAI,CAACc,MAAM,CACPJ,MAAM,CAACK,IAAI,KAAK,CAAC,IAAIL,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAC1C;IAAA,OAAM,2DAAoDD,QAAQ,oCAC7CF,MAAM,CAACG,KAAK,MAAG;EAAA,EAAC;EACzCb,IAAI,CAACc,MAAM,CACPH,OAAO,CAACI,IAAI,KAAK,CAAC,IAAIJ,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC,KAAKD,QAAQ,EACnD;IAAA,OAAM,4DAAqDA,QAAQ,kCAC9CF,MAAM,CAACG,KAAK,MAAG;EAAA,EAAC;EACzCb,IAAI,CAACc,MAAM,CACPR,QAAQ,CAACU,MAAM,KAAK,CAAC,EACrB;IAAA,OAAM,oFACQV,QAAQ,CAACU,MAAM,MAAG;EAAA,EAAC;EACrChB,IAAI,CAACc,MAAM,CACPR,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIA,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,EACpC;IAAA,yDAAiDA,QAAQ;EAAA,CAAE,CAAC;EAChEN,IAAI,CAACc,MAAM,CACPP,MAAM,KAAK,UAAU,IAAIA,MAAM,KAAK,SAAS,EAC7C;IAAA,6DAAqDA,MAAM;EAAA,CAAE,CAAC;EAElE,IAAMU,MAAM,GACc;IAACd,KAAK,EAAEM,MAAM;IAAEL,KAAK,EAAEM,MAAM;IAAEL,MAAM,EAAEM;EAAO,CAAC;EACzE,IAAMO,KAAK,GAAuB;IAACX,MAAM,EAANA,MAAM;IAAEC,kBAAkB,EAAlBA,kBAAkB;IAAEF,QAAQ,EAARA;EAAQ,CAAC;EACxE,IAAMa,GAAG,GAAGtB,MAAM,CAACuB,SAAS,CACxBtB,aAAa,EAAEmB,MAAmC,EAClDC,KAAgC,CAAC;EACrC,OAAOC,GAAe;AACxB;AAEA,OAAO,IAAME,aAAa,GAAG,eAAgBpB,EAAE,CAAC;EAACC,cAAc,EAAdA;AAAc,CAAC,CAAC","names":["ENGINE","CropAndResize","convertToTensor","util","op","cropAndResize_","image","boxes","boxInd","cropSize","method","extrapolationValue","$image","$boxes","$boxInd","numBoxes","shape","assert","rank","length","inputs","attrs","res","runKernel","cropAndResize"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\image\\crop_and_resize.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor1D, Tensor2D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the `boxInd[i]`th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(\n    image: Tensor4D|TensorLike,\n    boxes: Tensor2D|TensorLike,\n    boxInd: Tensor1D|TensorLike,\n    cropSize: [number, number],\n    method: 'bilinear'|'nearest' = 'bilinear',\n    extrapolationValue = 0,\n    ): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'cropAndResize');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n\n  const numBoxes = $boxes.shape[0];\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in cropAndResize: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n  util.assert(\n      $boxes.rank === 2 && $boxes.shape[1] === 4,\n      () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      $boxInd.rank === 1 && $boxInd.shape[0] === numBoxes,\n      () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      cropSize.length === 2,\n      () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n          `length ${cropSize.length}.`);\n  util.assert(\n      cropSize[0] >= 1 && cropSize[1] >= 1,\n      () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(\n      method === 'bilinear' || method === 'nearest',\n      () => `method must be bilinear or nearest, but was ${method}`);\n\n  const inputs:\n      CropAndResizeInputs = {image: $image, boxes: $boxes, boxInd: $boxInd};\n  const attrs: CropAndResizeAttrs = {method, extrapolationValue, cropSize};\n  const res = ENGINE.runKernel(\n      CropAndResize, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n  return res as Tensor4D;\n}\n\nexport const cropAndResize = /* @__PURE__ */ op({cropAndResize_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}