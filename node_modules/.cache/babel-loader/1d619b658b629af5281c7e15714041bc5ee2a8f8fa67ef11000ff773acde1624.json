{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport var GPGPUContext = /*#__PURE__*/function () {\n  function GPGPUContext(gl) {\n    _classCallCheck(this, GPGPUContext);\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.itemsToPoll = [];\n    var glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      var gl2 = gl;\n      this.createVertexArray = function () {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.createVertexArray();\n        });\n      };\n      this.bindVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.bindVertexArray(vao);\n        });\n      };\n      this.deleteVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.deleteVertexArray(vao);\n        });\n      };\n      this.getVertexArray = function () {\n        return webgl_util.callAndCheck(gl2, function () {\n          return gl2.getParameter(gl2.VERTEX_ARRAY_BINDING);\n        });\n      };\n    } else if (gl != null) {\n      var ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error('All WebGL1 implementations are expected to offer' + ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = function () {\n        return webgl_util.callAndCheck(gl, function () {\n          return ext.createVertexArrayOES();\n        });\n      };\n      this.bindVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl, function () {\n          return ext.bindVertexArrayOES(vao);\n        });\n      };\n      this.deleteVertexArray = function (vao) {\n        return webgl_util.callAndCheck(gl, function () {\n          return ext.deleteVertexArrayOES(vao);\n        });\n      };\n      this.getVertexArray = function () {\n        return webgl_util.callAndCheck(gl, function () {\n          return gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES);\n        });\n      };\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    var COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    var COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      var TEXTURE_FLOAT = 'OES_texture_float';\n      var TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n  _createClass(GPGPUContext, [{\n    key: \"debug\",\n    get: function get() {\n      return env().getBool('DEBUG');\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this = this;\n      if (this.disposed) {\n        return;\n      }\n      if (this.program != null) {\n        console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n      }\n      if (this.outputTexture != null) {\n        console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n      }\n      var gl = this.gl;\n      webgl_util.callAndCheck(gl, function () {\n        return gl.finish();\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.deleteFramebuffer(_this.framebuffer);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.deleteBuffer(_this.indexBuffer);\n      });\n      this.disposed = true;\n    }\n  }, {\n    key: \"createFloat32MatrixTexture\",\n    value: function createFloat32MatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createFloat16MatrixTexture\",\n    value: function createFloat16MatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createUnsignedBytesMatrixTexture\",\n    value: function createUnsignedBytesMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"uploadPixelDataToTexture\",\n    value: function uploadPixelDataToTexture(texture, pixels) {\n      this.throwIfDisposed();\n      gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n  }, {\n    key: \"uploadDenseMatrixToTexture\",\n    value: function uploadDenseMatrixToTexture(texture, width, height, data) {\n      this.throwIfDisposed();\n      gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n  }, {\n    key: \"createFloat16PackedMatrixTexture\",\n    value: function createFloat16PackedMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"createPackedMatrixTexture\",\n    value: function createPackedMatrixTexture(rows, columns) {\n      this.throwIfDisposed();\n      return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n  }, {\n    key: \"deleteMatrixTexture\",\n    value: function deleteMatrixTexture(texture) {\n      var _this2 = this;\n      this.throwIfDisposed();\n      if (this.outputTexture === texture) {\n        webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        this.outputTexture = null;\n      }\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this2.gl.deleteTexture(texture);\n      });\n    }\n  }, {\n    key: \"downloadByteEncodedFloatMatrixFromOutputTexture\",\n    value: function downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n      var _this3 = this;\n      return this.downloadMatrixDriver(texture, function () {\n        return gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(_this3.gl, rows, columns, _this3.textureConfig);\n      });\n    }\n  }, {\n    key: \"downloadPackedMatrixFromBuffer\",\n    value: function downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n      return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n  }, {\n    key: \"downloadFloat32MatrixFromBuffer\",\n    value: function downloadFloat32MatrixFromBuffer(buffer, size) {\n      return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n  }, {\n    key: \"createBufferFromTexture\",\n    value: function createBufferFromTexture(texture, rows, columns) {\n      this.bindTextureToFrameBuffer(texture);\n      var result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n      this.unbindTextureToFrameBuffer();\n      return result;\n    }\n  }, {\n    key: \"createAndWaitForFence\",\n    value: function createAndWaitForFence() {\n      var fenceContext = this.createFence(this.gl);\n      return this.pollFence(fenceContext);\n    }\n  }, {\n    key: \"createFence\",\n    value: function createFence(gl) {\n      var _this4 = this;\n      var query;\n      var isFencePassed;\n      if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n        var gl2 = gl;\n        var sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n        gl.flush();\n        isFencePassed = function isFencePassed() {\n          var status = gl2.clientWaitSync(sync, 0, 0);\n          return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n        };\n        query = sync;\n      } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n        query = this.beginQuery();\n        this.endQuery();\n        isFencePassed = function isFencePassed() {\n          return _this4.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        };\n      } else {\n        // If we have no way to fence, return true immediately. This will fire in\n        // WebGL 1.0 when there is no disjoint query timer. In this case, because\n        // the fence passes immediately, we'll immediately ask for a download of\n        // the texture, which will cause the UI thread to hang.\n        isFencePassed = function isFencePassed() {\n          return true;\n        };\n      }\n      return {\n        query: query,\n        isFencePassed: isFencePassed\n      };\n    }\n  }, {\n    key: \"downloadMatrixFromPackedTexture\",\n    value: function downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n      var _this5 = this;\n      return this.downloadMatrixDriver(texture, function () {\n        return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this5.gl, physicalRows, physicalCols);\n      });\n    }\n  }, {\n    key: \"createProgram\",\n    value: function createProgram(fragmentShader) {\n      var _this6 = this;\n      this.throwIfDisposed();\n      var gl = this.gl;\n      if (this.vertexShader == null) {\n        this.vertexShader = gpgpu_util.createVertexShader(gl);\n      }\n      var program = webgl_util.createProgram(gl);\n      webgl_util.callAndCheck(gl, function () {\n        return gl.attachShader(program, _this6.vertexShader);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.attachShader(program, fragmentShader);\n      });\n      webgl_util.linkProgram(gl, program);\n      var program2;\n      {\n        program2 = Object.assign(program, {\n          vao: this.createVertexArray()\n        });\n        this.bindVertexArray(program2.vao);\n        // Bind index buffer, and vertex buffers based on program attrib\n        // locations.\n        webgl_util.callAndCheck(gl, function () {\n          return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _this6.indexBuffer);\n        });\n        console.assert(gpgpu_util.bindVertexProgramAttributeStreams(gl, program2, this.vertexBuffer), 'gpgpu_util.bindVertexProgramAttributeStreams not fully successful.');\n        if (this.debug) {\n          webgl_util.validateProgram(gl, program2);\n        }\n      }\n      this.setProgram(program2);\n      return program2;\n    }\n  }, {\n    key: \"deleteProgram\",\n    value: function deleteProgram(program) {\n      var _this7 = this;\n      this.throwIfDisposed();\n      if (program === this.program) {\n        this.program = null;\n      }\n      if (program != null) {\n        webgl_util.callAndCheck(this.gl, function () {\n          return _this7.gl.deleteProgram(program);\n        });\n        this.deleteVertexArray(program.vao);\n      }\n    }\n  }, {\n    key: \"setProgram\",\n    value: function setProgram(program) {\n      var _this8 = this;\n      this.throwIfDisposed();\n      this.program = program;\n      if (this.program != null) {\n        this.bindVertexArray(this.program.vao);\n        if (this.debug) {\n          webgl_util.validateProgram(this.gl, this.program);\n        }\n      }\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this8.gl.useProgram(program);\n      });\n    }\n  }, {\n    key: \"getUniformLocation\",\n    value: function getUniformLocation(program, uniformName) {\n      var shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      this.throwIfDisposed();\n      if (shouldThrow) {\n        return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n      } else {\n        return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n      }\n    }\n  }, {\n    key: \"getAttributeLocation\",\n    value: function getAttributeLocation(program, attribute) {\n      var _this9 = this;\n      this.throwIfDisposed();\n      return webgl_util.callAndCheck(this.gl, function () {\n        return _this9.gl.getAttribLocation(program, attribute);\n      });\n    }\n  }, {\n    key: \"getUniformLocationNoThrow\",\n    value: function getUniformLocationNoThrow(program, uniformName) {\n      this.throwIfDisposed();\n      return this.gl.getUniformLocation(program, uniformName);\n    }\n  }, {\n    key: \"setInputMatrixTexture\",\n    value: function setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n      this.throwIfDisposed();\n      this.throwIfNoProgram();\n      webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n  }, {\n    key: \"setOutputMatrixTexture\",\n    value: function setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n      this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n  }, {\n    key: \"setOutputPackedMatrixTexture\",\n    value: function setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n      this.throwIfDisposed();\n      var _tex_util$getPackedMa = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        _tex_util$getPackedMa2 = _slicedToArray(_tex_util$getPackedMa, 2),\n        width = _tex_util$getPackedMa2[0],\n        height = _tex_util$getPackedMa2[1];\n      this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n  }, {\n    key: \"setOutputMatrixWriteRegion\",\n    value: function setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n      this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n  }, {\n    key: \"setOutputPackedMatrixWriteRegion\",\n    value: function setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n      throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n  }, {\n    key: \"debugValidate\",\n    value: function debugValidate() {\n      if (this.program != null) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }, {\n    key: \"executeProgram\",\n    value: function executeProgram() {\n      this.throwIfDisposed();\n      this.throwIfNoProgram();\n      var gl = this.gl;\n      if (this.debug) {\n        var boundVao = this.getVertexArray();\n        console.assert(boundVao === this.program.vao, 'VAO changed between setProgram and executeProgram!');\n        this.debugValidate();\n      }\n      webgl_util.callAndCheck(gl, function () {\n        return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n      });\n    }\n  }, {\n    key: \"blockUntilAllProgramsCompleted\",\n    value: function blockUntilAllProgramsCompleted() {\n      var _this10 = this;\n      this.throwIfDisposed();\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this10.gl.finish();\n      });\n    }\n  }, {\n    key: \"getQueryTimerExtension\",\n    value: function getQueryTimerExtension() {\n      if (this.disjointQueryTimerExtension == null) {\n        this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n      }\n      return this.disjointQueryTimerExtension;\n    }\n  }, {\n    key: \"getQueryTimerExtensionWebGL2\",\n    value: function getQueryTimerExtensionWebGL2() {\n      return this.getQueryTimerExtension();\n    }\n  }, {\n    key: \"getQueryTimerExtensionWebGL1\",\n    value: function getQueryTimerExtensionWebGL1() {\n      return this.getQueryTimerExtension();\n    }\n  }, {\n    key: \"beginQuery\",\n    value: function beginQuery() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n        var gl2 = this.gl;\n        var _ext = this.getQueryTimerExtensionWebGL2();\n        var _query = gl2.createQuery();\n        gl2.beginQuery(_ext.TIME_ELAPSED_EXT, _query);\n        return _query;\n      }\n      var ext = this.getQueryTimerExtensionWebGL1();\n      var query = ext.createQueryEXT();\n      ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n  }, {\n    key: \"endQuery\",\n    value: function endQuery() {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n        var gl2 = this.gl;\n        var _ext2 = this.getQueryTimerExtensionWebGL2();\n        gl2.endQuery(_ext2.TIME_ELAPSED_EXT);\n        return;\n      }\n      var ext = this.getQueryTimerExtensionWebGL1();\n      ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n  }, {\n    key: \"waitForQueryAndGetTime\",\n    value: function () {\n      var _waitForQueryAndGetTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(query) {\n        var _this11 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return util.repeatedTry(function () {\n                return _this11.disposed ||\n                // while testing contexts are created / disposed\n                // in rapid succession, so without this check we\n                // may poll for the query timer indefinitely\n                _this11.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n              });\n            case 2:\n              return _context.abrupt(\"return\", this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function waitForQueryAndGetTime(_x) {\n        return _waitForQueryAndGetTime.apply(this, arguments);\n      }\n      return waitForQueryAndGetTime;\n    }()\n  }, {\n    key: \"getQueryTime\",\n    value: function getQueryTime(query, queryTimerVersion) {\n      if (queryTimerVersion === 0) {\n        return null;\n      }\n      if (queryTimerVersion === 2) {\n        var gl2 = this.gl;\n        var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n        // Return milliseconds.\n        return timeElapsedNanos / 1000000;\n      } else {\n        var ext = this.getQueryTimerExtensionWebGL1();\n        var _timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n        // Return milliseconds.\n        return _timeElapsedNanos / 1000000;\n      }\n    }\n  }, {\n    key: \"isQueryAvailable\",\n    value: function isQueryAvailable(query, queryTimerVersion) {\n      if (queryTimerVersion === 0) {\n        return true;\n      }\n      if (queryTimerVersion === 2) {\n        var gl2 = this.gl;\n        var ext = this.getQueryTimerExtensionWebGL2();\n        var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n        if (this.disjoint == null) {\n          this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n        }\n        return available && !this.disjoint;\n      } else {\n        var _ext3 = this.getQueryTimerExtensionWebGL1();\n        var _available = _ext3.getQueryObjectEXT(query, _ext3.QUERY_RESULT_AVAILABLE_EXT);\n        if (this.disjoint == null) {\n          this.disjoint = this.gl.getParameter(_ext3.GPU_DISJOINT_EXT);\n        }\n        return _available && !this.disjoint;\n      }\n    }\n  }, {\n    key: \"pollFence\",\n    value: function pollFence(fenceContext) {\n      var _this12 = this;\n      return new Promise(function (resolve) {\n        _this12.addItemToPoll(function () {\n          return fenceContext.isFencePassed();\n        }, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"pollItems\",\n    value: function pollItems() {\n      // Find the last query that has finished.\n      var index = linearSearchLastTrue(this.itemsToPoll.map(function (x) {\n        return x.isDoneFn;\n      }));\n      for (var i = 0; i <= index; ++i) {\n        var resolveFn = this.itemsToPoll[i].resolveFn;\n        resolveFn();\n      }\n      this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n  }, {\n    key: \"addItemToPoll\",\n    value: function addItemToPoll(isDoneFn, resolveFn) {\n      var _this13 = this;\n      this.itemsToPoll.push({\n        isDoneFn: isDoneFn,\n        resolveFn: resolveFn\n      });\n      if (this.itemsToPoll.length > 1) {\n        // We already have a running loop that polls.\n        return;\n      }\n      // Start a new loop that polls.\n      var scheduleFn = undefined;\n      if ('setTimeoutCustom' in env().platform) {\n        scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n      }\n      util.repeatedTry(function () {\n        _this13.pollItems();\n        // End the loop if no more items to poll.\n        return _this13.itemsToPoll.length === 0;\n      }, function () {\n        return 0;\n      }, null, scheduleFn);\n    }\n  }, {\n    key: \"bindTextureToFrameBuffer\",\n    value: function bindTextureToFrameBuffer(texture) {\n      this.throwIfDisposed();\n      webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    }\n  }, {\n    key: \"unbindTextureToFrameBuffer\",\n    value: function unbindTextureToFrameBuffer() {\n      if (this.outputTexture != null) {\n        webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n        if (this.debug) {\n          webgl_util.validateFramebuffer(this.gl);\n        }\n      } else {\n        webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      }\n    }\n  }, {\n    key: \"downloadMatrixDriver\",\n    value: function downloadMatrixDriver(texture, downloadAndDecode) {\n      this.bindTextureToFrameBuffer(texture);\n      var result = downloadAndDecode();\n      this.unbindTextureToFrameBuffer();\n      return result;\n    }\n  }, {\n    key: \"setOutputMatrixTextureDriver\",\n    value: function setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n      this.throwIfDisposed();\n      var gl = this.gl;\n      webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(gl);\n      }\n      this.outputTexture = outputMatrixTextureMaybePacked;\n      webgl_util.callAndCheck(gl, function () {\n        return gl.viewport(0, 0, width, height);\n      });\n      webgl_util.callAndCheck(gl, function () {\n        return gl.scissor(0, 0, width, height);\n      });\n    }\n  }, {\n    key: \"setOutputMatrixWriteRegionDriver\",\n    value: function setOutputMatrixWriteRegionDriver(x, y, width, height) {\n      var _this14 = this;\n      this.throwIfDisposed();\n      webgl_util.callAndCheck(this.gl, function () {\n        return _this14.gl.scissor(x, y, width, height);\n      });\n    }\n  }, {\n    key: \"throwIfDisposed\",\n    value: function throwIfDisposed() {\n      if (this.disposed) {\n        throw new Error('Attempted to use disposed GPGPUContext.');\n      }\n    }\n  }, {\n    key: \"throwIfNoProgram\",\n    value: function throwIfNoProgram() {\n      if (this.program == null) {\n        throw new Error('No GPU program is currently set.');\n      }\n    }\n  }]);\n  return GPGPUContext;\n}();\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n  var i = 0;\n  for (; i < arr.length; ++i) {\n    var isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}","map":{"version":3,"mappings":"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","names":["env","util","getWebGLContext","setWebGLContext","gpgpu_util","tex_util","webgl_util","GPGPUContext","gl","glVersion","getNumber","gl2","createVertexArray","callAndCheck","bindVertexArray","vao","deleteVertexArray","getVertexArray","getParameter","VERTEX_ARRAY_BINDING","ext","getExtension","Error","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","VERTEX_ARRAY_BINDING_OES","COLOR_BUFFER_FLOAT","COLOR_BUFFER_HALF_FLOAT","parallelCompilationExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","getExtensionOrThrow","hasExtension","textureHalfFloatExtension","get","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","createVertexBuffer","indexBuffer","createIndexBuffer","framebuffer","createFramebuffer","textureConfig","getTextureConfig","getBool","disposed","program","console","warn","outputTexture","finish","bindFramebuffer","FRAMEBUFFER","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","deleteBuffer","rows","columns","throwIfDisposed","createFloat32MatrixTexture","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","texture","pixels","uploadPixelDataToTexture","width","height","data","uploadDenseMatrixToTexture","createFloat16PackedMatrixTexture","createPackedMatrixTexture","unbindColorTextureFromFramebuffer","deleteTexture","downloadMatrixDriver","downloadByteEncodedFloatMatrixFromOutputTexture","buffer","batch","physicalRows","physicalCols","downloadPackedMatrixFromBuffer","size","downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","result","createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedOutputTexture","fragmentShader","vertexShader","createVertexShader","createProgram","attachShader","linkProgram","program2","Object","assign","assert","bindVertexProgramAttributeStreams","debug","validateProgram","setProgram","deleteProgram","useProgram","uniformName","shouldThrow","getProgramUniformLocationOrThrow","getProgramUniformLocation","attribute","getAttribLocation","getUniformLocation","inputMatrixTexture","uniformLocation","textureUnit","throwIfNoProgram","bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","getPackedMatrixTextureShapeWidthHeight","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","validateFramebuffer","boundVao","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","getQueryTimerExtensionWebGL2","createQuery","TIME_ELAPSED_EXT","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","repeatedTry","getQueryTime","queryTimerVersion","timeElapsedNanos","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","addItemToPoll","resolve","index","linearSearchLastTrue","itemsToPoll","map","x","isDoneFn","i","resolveFn","slice","push","length","scheduleFn","undefined","platform","setTimeoutCustom","bind","pollItems","bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","y","arr","isDone"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\gpgpu_context.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject | WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao | null) => void;\n  deleteVertexArray: (vao: WebGLVao | null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    let program2: GPGPUContextProgram;\n    {\n      program2 = Object.assign(program, {\n        vao: this.createVertexArray(),\n      });\n      this.bindVertexArray(program2.vao);\n      // Bind index buffer, and vertex buffers based on program attrib\n      // locations.\n      webgl_util.callAndCheck(\n          gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n      console.assert(\n        gpgpu_util.bindVertexProgramAttributeStreams(gl, program2,\n                                                     this.vertexBuffer),\n        'gpgpu_util.bindVertexProgramAttributeStreams not fully successful.');\n\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program2);\n      }\n    }\n    this.setProgram(program2);\n\n    return program2;\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      this.bindVertexArray(this.program.vao);\n\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(boundVao === this.program.vao,\n                     'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}