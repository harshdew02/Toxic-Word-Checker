{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { Optimizer } from './optimizer';\nexport var AdamOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(AdamOptimizer, _Optimizer);\n  var _super = _createSuper(AdamOptimizer);\n  function AdamOptimizer(learningRate, beta1, beta2) {\n    var _this;\n    var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    _classCallCheck(this, AdamOptimizer);\n    _this = _super.call(this);\n    _this.learningRate = learningRate;\n    _this.beta1 = beta1;\n    _this.beta2 = beta2;\n    _this.epsilon = epsilon;\n    _this.accumulatedFirstMoment = [];\n    _this.accumulatedSecondMoment = [];\n    tidy(function () {\n      // accB* will be updated by batch.\n      _this.accBeta1 = scalar(beta1).variable();\n      _this.accBeta2 = scalar(beta2).variable();\n    });\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(AdamOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n      var varNames = Array.isArray(variableGradients) ? variableGradients.map(function (v) {\n        return v.name;\n      }) : Object.keys(variableGradients);\n      tidy(function () {\n        var oneMinusAccBeta1 = sub(1, _this2.accBeta1);\n        var oneMinusAccBeta2 = sub(1, _this2.accBeta2);\n        varNames.forEach(function (name, i) {\n          var value = ENGINE.registeredVariables[name];\n          var trainable = false;\n          if (_this2.accumulatedFirstMoment[i] == null) {\n            _this2.accumulatedFirstMoment[i] = {\n              originalName: \"\".concat(name, \"/m\"),\n              variable: tidy(function () {\n                return zerosLike(value).variable(trainable);\n              })\n            };\n          }\n          if (_this2.accumulatedSecondMoment[i] == null) {\n            _this2.accumulatedSecondMoment[i] = {\n              originalName: \"\".concat(name, \"/v\"),\n              variable: tidy(function () {\n                return zerosLike(value).variable(trainable);\n              })\n            };\n          }\n          var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n          if (gradient == null) {\n            return;\n          }\n          var firstMoment = _this2.accumulatedFirstMoment[i].variable;\n          var secondMoment = _this2.accumulatedSecondMoment[i].variable;\n          var newFirstMoment = add(mul(firstMoment, _this2.beta1), mul(gradient, 1 - _this2.beta1));\n          var newSecondMoment = add(mul(secondMoment, _this2.beta2), mul(square(gradient), 1 - _this2.beta2));\n          var biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n          var biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n          firstMoment.assign(newFirstMoment);\n          secondMoment.assign(newSecondMoment);\n          var newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), _this2.epsilon)), -_this2.learningRate), value);\n          value.assign(newValue);\n        });\n        _this2.accBeta1.assign(mul(_this2.accBeta1, _this2.beta1));\n        _this2.accBeta2.assign(mul(_this2.accBeta2, _this2.beta2));\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.accBeta1.dispose();\n      this.accBeta2.dispose();\n      if (this.accumulatedFirstMoment != null) {\n        _dispose(this.accumulatedFirstMoment.map(function (v) {\n          return v.variable;\n        }));\n      }\n      if (this.accumulatedSecondMoment != null) {\n        _dispose(this.accumulatedSecondMoment.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var variables;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Order matters for Python compatibility.\n              variables = [].concat(_toConsumableArray(this.accumulatedFirstMoment), _toConsumableArray(this.accumulatedSecondMoment));\n              _context.next = 3;\n              return this.saveIterations();\n            case 3:\n              _context.t0 = _context.sent;\n              return _context.abrupt(\"return\", [_context.t0].concat(variables.map(function (v) {\n                return {\n                  name: v.originalName,\n                  tensor: v.variable\n                };\n              })));\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(weightValues) {\n        var _this3 = this;\n        var variableCount, trainable;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.extractIterations(weightValues);\n            case 2:\n              weightValues = _context2.sent;\n              tidy(function () {\n                _this3.accBeta1.assign(pow(_this3.beta1, _this3.iterations_ + 1));\n                _this3.accBeta2.assign(pow(_this3.beta2, _this3.iterations_ + 1));\n              });\n              variableCount = weightValues.length / 2;\n              trainable = false;\n              this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n              this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map(function (v) {\n                return {\n                  originalName: v.name,\n                  variable: v.tensor.variable(trainable)\n                };\n              });\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'beta1': this.beta1,\n        'beta2': this.beta2,\n        'epsilon': this.epsilon\n      };\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"className\",\n    get: function get() {\n      // Name matters for Python compatibility.\n      // This is a getter instead of a property because when it's a property, it\n      // prevents the entire class from being tree-shaken.\n      return 'Adam';\n    }\n  }, {\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n    }\n  }]);\n  return AdamOptimizer;\n}(Optimizer);","map":{"version":3,"mappings":"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","names":["ENGINE","dispose","tidy","add","div","mul","pow","scalar","sqrt","square","sub","zerosLike","Optimizer","AdamOptimizer","learningRate","beta1","beta2","epsilon","accBeta1","variable","accBeta2","backend","variableGradients","varNames","Array","isArray","map","v","name","Object","keys","oneMinusAccBeta1","oneMinusAccBeta2","forEach","i","value","registeredVariables","trainable","accumulatedFirstMoment","originalName","accumulatedSecondMoment","gradient","tensor","firstMoment","secondMoment","newFirstMoment","newSecondMoment","biasCorrectedFirstMoment","biasCorrectedSecondMoment","assign","newValue","incrementIterations","variables","saveIterations","concat","weightValues","extractIterations","iterations_","variableCount","length","slice","cls","config"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\optimizers\\adam_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {pow} from '../ops/pow';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static get className() {\n    // Name matters for Python compatibility.\n    // This is a getter instead of a property because when it's a property, it\n    // prevents the entire class from being tree-shaken.\n    return 'Adam';\n  }\n  private accBeta1: Variable;\n  private accBeta2: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedSecondMoment: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null) {\n    super();\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment =\n            add(mul(secondMoment, this.beta2),\n                mul(square(gradient), 1 - this.beta2));\n\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment =\n            div(newSecondMoment, oneMinusAccBeta2);\n\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n\n        const newValue =\n            add(mul(div(biasCorrectedFirstMoment,\n                        add(sqrt(biasCorrectedSecondMoment), this.epsilon)),\n                    -this.learningRate),\n                value);\n        value.assign(newValue);\n      });\n\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  override dispose(): void {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  override async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  override async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedSecondMoment =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n    };\n  }\n\n  /** @nocollapse */\n  static override fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}