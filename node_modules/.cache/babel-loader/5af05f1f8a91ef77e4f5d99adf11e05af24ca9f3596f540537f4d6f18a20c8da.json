{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Normalization layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { moments, reshape, serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(x, mean, variance, beta, gamma) {\n  var epsilon = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1e-3;\n  var out;\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(x, mean, variance, beta, gamma, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(x, mean, variance, beta, gamma, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(x, mean, variance, beta, gamma, epsilon);\n  } else {\n    throw new NotImplementedError(\"batchNormalization is not implemented for array of rank \".concat(x.rank, \" \") + \"yet\");\n  }\n  return out;\n}\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes) {\n  var epsilon = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1e-3;\n  return tidy(function () {\n    var meanAndVariance = tfc.moments(x, reductionAxes);\n    var mean = meanAndVariance.mean;\n    var variance = meanAndVariance.variance;\n    var normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);\n    return [normed, mean, variance];\n  });\n}\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes) {\n  var epsilon = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1e-3;\n  return tidy(function () {\n    var meanAndVariance = tfc.moments(x, reductionAxes);\n    var mean = meanAndVariance.mean;\n    var variance = meanAndVariance.variance;\n    var targetShape = [];\n    var _iterator = _createForOfIteratorHelper(math_utils.range(0, x.rank)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var axis = _step.value;\n        if (reductionAxes.indexOf(axis) !== -1) {\n          targetShape.push(1);\n        } else {\n          targetShape.push(x.shape[axis]);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var broadcastMean = reshape(mean, targetShape);\n    var broadcastVariance = reshape(variance, targetShape);\n    var broadcastGamma = gamma == null ? null : reshape(gamma, targetShape);\n    var broadcastBeta = beta == null ? null : reshape(beta, targetShape);\n    var normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);\n    return [normed, mean, variance];\n  });\n}\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(x, gamma, beta, reductionAxes) {\n  var epsilon = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1e-3;\n  if (util.arraysEqual(reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n  }\n}\nexport var BatchNormalization = /*#__PURE__*/function (_Layer) {\n  _inherits(BatchNormalization, _Layer);\n  var _super = _createSuper(BatchNormalization);\n  function BatchNormalization(args) {\n    var _this;\n    _classCallCheck(this, BatchNormalization);\n    if (args == null) {\n      args = {};\n    }\n    _this = _super.call(this, args);\n    _this.supportsMasking = true;\n    _this.axis = args.axis == null ? -1 : args.axis;\n    _this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    _this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    _this.center = args.center == null ? true : args.center;\n    _this.scale = args.scale == null ? true : args.scale;\n    _this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    _this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    _this.movingMeanInitializer = getInitializer(args.movingMeanInitializer || 'zeros');\n    _this.movingVarianceInitializer = getInitializer(args.movingVarianceInitializer || 'ones');\n    _this.betaConstraint = getConstraint(args.betaConstraint);\n    _this.gammaConstraint = getConstraint(args.gammaConstraint);\n    _this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    _this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n    return _this;\n  }\n  _createClass(BatchNormalization, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;\n      var dim = inputShape[axis];\n      if (dim == null) {\n        throw new ValueError(\"Axis \".concat(axis, \" of input tensor should have a defined dimension but \") + \"the layer received an input with shape \" + \"\".concat(JSON.stringify(inputShape), \".\"));\n      }\n      this.inputSpec = [new InputSpec({\n        ndim: inputShape.length,\n        axes: _defineProperty({}, axis, dim)\n      })];\n      var shape = [dim];\n      if (this.scale) {\n        this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n      }\n      if (this.center) {\n        this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n      }\n      this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n      this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        var training = kwargs['training'] == null ? false : kwargs['training'];\n        var input = getExactlyOneTensor(inputs);\n        var inputShape = input.shape;\n        var ndim = inputShape.length;\n        var reductionAxes = math_utils.range(0, ndim);\n        var axis = _this2.axis >= 0 ? _this2.axis : _this2.axis + ndim;\n        reductionAxes.splice(axis, 1);\n        var broadcastShape = generic_utils.pyListRepeat(1, ndim);\n        broadcastShape[axis] = inputShape[axis];\n        var sortedReductionAxes = reductionAxes.slice();\n        sortedReductionAxes.sort();\n        var needsBroadcasting = !util.arraysEqual(sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n        var normalizeInference = function normalizeInference() {\n          if (needsBroadcasting) {\n            var broadcastMovingMean = reshape(_this2.movingMean.read(), broadcastShape);\n            var broadcastMovingVariance = reshape(_this2.movingVariance.read(), broadcastShape);\n            var broadcastBeta = _this2.center ? reshape(_this2.beta.read(), broadcastShape) : null;\n            var broadcastGamma = _this2.scale ? reshape(_this2.gamma.read(), broadcastShape) : null;\n            return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, _this2.epsilon);\n          } else {\n            return batchNormalization(input, _this2.movingMean.read(), _this2.movingVariance.read(), _this2.beta == null ? null : _this2.beta.read(), _this2.gamma == null ? null : _this2.gamma.read(), _this2.epsilon);\n          }\n        };\n        if (!training) {\n          return normalizeInference();\n        }\n        var _normalizeBatchInTrai = normalizeBatchInTraining(input, _this2.gamma.read(), _this2.beta.read(), reductionAxes, _this2.epsilon),\n          _normalizeBatchInTrai2 = _slicedToArray(_normalizeBatchInTrai, 3),\n          normedTraining = _normalizeBatchInTrai2[0],\n          mean = _normalizeBatchInTrai2[1],\n          variance = _normalizeBatchInTrai2[2];\n        var doMovingAverage = function doMovingAverage(variable, value, momentum) {\n          tfc.tidy(function () {\n            var decay = 1 - momentum;\n            var origValue = variable.read();\n            var updateDelta = tfc.mul(tfc.sub(origValue, value), decay);\n            variable.write(tfc.sub(origValue, updateDelta));\n          });\n        };\n        // Perform updates to moving mean and moving variance for training.\n        // Porting Note: In PyKeras, these updates to `movingMean` and\n        //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n        //   `update`s using the `add_update()` method. Here we do it imperatively\n        //   and encapsulate the updates in a function that is invoked\n        //   immediately.\n        var updateMovingMeanAndVariance = function updateMovingMeanAndVariance() {\n          doMovingAverage(_this2.movingMean, mean, _this2.momentum);\n          doMovingAverage(_this2.movingVariance, variance, _this2.momentum);\n        };\n        updateMovingMeanAndVariance();\n        return normedTraining;\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        axis: this.axis,\n        momentum: this.momentum,\n        epsilon: this.epsilon,\n        center: this.center,\n        scale: this.scale,\n        betaInitializer: serializeInitializer(this.betaInitializer),\n        gammaInitializer: serializeInitializer(this.gammaInitializer),\n        movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n        movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),\n        betaRegularizer: serializeRegularizer(this.betaRegularizer),\n        gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n        betaConstraint: serializeConstraint(this.betaConstraint),\n        gammaConstraint: serializeConstraint(this.gammaConstraint)\n      };\n      var baseConfig = _get(_getPrototypeOf(BatchNormalization.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return BatchNormalization;\n}(Layer);\n/** @nocollapse */\nBatchNormalization.className = 'BatchNormalization';\nserialization.registerClass(BatchNormalization);\nexport var LayerNormalization = /*#__PURE__*/function (_Layer2) {\n  _inherits(LayerNormalization, _Layer2);\n  var _super2 = _createSuper(LayerNormalization);\n  function LayerNormalization(args) {\n    var _this3;\n    _classCallCheck(this, LayerNormalization);\n    if (args == null) {\n      args = {};\n    }\n    _this3 = _super2.call(this, args);\n    _this3.axis = args.axis == null ? -1 : args.axis;\n    if (typeof _this3.axis === 'number') {\n      if (!Number.isInteger(_this3.axis)) {\n        throw new Error(\"Expected axis to be an integer, but received \".concat(_this3.axis));\n      }\n    } else if (Array.isArray(_this3.axis)) {\n      var _iterator2 = _createForOfIteratorHelper(_this3.axis),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var axis = _step2.value;\n          if (!Number.isInteger(axis)) {\n            throw new Error(\"Expected axis to be an array of integers, \" + \"but received \".concat(JSON.stringify(_this3.axis)));\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else {\n      throw new Error(\"Expected axis to be an integer or an array of integers, \" + \"but received \".concat(JSON.stringify(_this3.axis)));\n    }\n    _this3.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    _this3.center = args.center == null ? true : args.center;\n    _this3.scale = args.scale == null ? true : args.scale;\n    _this3.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    _this3.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    _this3.betaRegularizer = getRegularizer(args.betaRegularizer);\n    _this3.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n    _this3.supportsMasking = true;\n    return _this3;\n  }\n  _createClass(LayerNormalization, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var nDims = inputShape.length;\n      // Convert axis to array and resolve negatives.\n      if (typeof this.axis === 'number') {\n        this.axis = [this.axis];\n      }\n      for (var i = 0; i < this.axis.length; ++i) {\n        if (this.axis[i] < 0) {\n          this.axis[i] += nDims;\n        }\n      }\n      // Further validate axes.\n      var _iterator3 = _createForOfIteratorHelper(this.axis),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var axis = _step3.value;\n          if (axis < 0 || axis >= nDims) {\n            throw new Error(\"Invalid axis: \".concat(axis));\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (this.axis.length !== generic_utils.unique(this.axis).length) {\n        throw new Error(\"Found duplicate axes in: \".concat(this.axis));\n      }\n      var paramShape = this.axis.map(function (axis) {\n        return inputShape[axis];\n      });\n      var trainable = true;\n      if (this.scale) {\n        this.gamma = this.addWeight('gamma', paramShape, 'float32', this.gammaInitializer, this.gammaRegularizer, trainable);\n      } else {\n        this.gamma = null;\n      }\n      if (this.center) {\n        this.beta = this.addWeight('beta', paramShape, 'float32', this.betaInitializer, this.betaRegularizer, trainable);\n      } else {\n        this.beta = null;\n      }\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this4 = this;\n      var input = getExactlyOneTensor(inputs);\n      var inputShape = input.shape;\n      var nDims = inputShape.length;\n      return tidy(function () {\n        var keepDims = true;\n        var _moments = moments(input, _this4.axis, keepDims),\n          mean = _moments.mean,\n          variance = _moments.variance;\n        var broadcastShape = generic_utils.pyListRepeat(1, nDims);\n        var _iterator4 = _createForOfIteratorHelper(_this4.axis),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var dim = _step4.value;\n            broadcastShape[dim] = inputShape[dim];\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        var broadcast = function broadcast(v) {\n          if (v != null && v.shape.length !== nDims) {\n            return tfc.reshape(v, broadcastShape);\n          } else {\n            return v;\n          }\n        };\n        var scale = _this4.scale ? broadcast(_this4.gamma.read()) : null;\n        var offset = _this4.center ? broadcast(_this4.beta.read()) : null;\n        // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n        // is a workaround for the limitation of core's batchNormalization?d don't\n        // support broadcasting in their gradients. In addition, the tiling is\n        // necessary to ensure correctness on the browser CPU backend regardless\n        // of forward or backward computation. Remove this workaround once the\n        // limitation is addressed. See .\n        var momentsTiling = [];\n        var scaleOffsetTiling = [];\n        for (var i = 0; i < nDims; ++i) {\n          if (_this4.axis.indexOf(i) !== -1) {\n            momentsTiling.push(inputShape[i]);\n            scaleOffsetTiling.push(1);\n          } else {\n            momentsTiling.push(1);\n            scaleOffsetTiling.push(inputShape[i]);\n          }\n        }\n        mean = tfc.tile(mean, momentsTiling);\n        variance = tfc.tile(variance, momentsTiling);\n        if (scale != null) {\n          scale = tfc.tile(scale, scaleOffsetTiling);\n        }\n        if (offset != null) {\n          offset = tfc.tile(offset, scaleOffsetTiling);\n        }\n        return batchNormalization(input, mean, variance, offset, scale, _this4.epsilon);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        axis: this.axis,\n        epsilon: this.epsilon,\n        center: this.center,\n        scale: this.scale,\n        betaInitializer: serializeInitializer(this.betaInitializer),\n        gammaInitializer: serializeInitializer(this.gammaInitializer),\n        betaRegularizer: serializeRegularizer(this.betaRegularizer),\n        gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n      };\n      var baseConfig = _get(_getPrototypeOf(LayerNormalization.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return LayerNormalization;\n}(Layer);\n/** @nocollapse */\nLayerNormalization.className = 'LayerNormalization';\nserialization.registerClass(LayerNormalization);","map":{"version":3,"mappings":"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","names":["tfc","moments","reshape","serialization","tidy","util","getConstraint","serializeConstraint","InputSpec","Layer","NotImplementedError","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","generic_utils","math_utils","getExactlyOneShape","getExactlyOneTensor","batchNormalization","x","mean","variance","beta","gamma","epsilon","out","rank","batchNorm2d","batchNorm3d","batchNorm4d","regularNormalizeBatchInTraining","reductionAxes","meanAndVariance","normed","broadcastNormalizeBatchInTraining","targetShape","range","axis","indexOf","push","shape","broadcastMean","broadcastVariance","broadcastGamma","broadcastBeta","normalizeBatchInTraining","arraysEqual","slice","sort","BatchNormalization","args","supportsMasking","momentum","center","scale","betaInitializer","gammaInitializer","movingMeanInitializer","movingVarianceInitializer","betaConstraint","gammaConstraint","betaRegularizer","gammaRegularizer","inputShape","length","dim","JSON","stringify","inputSpec","ndim","axes","addWeight","movingMean","movingVariance","built","inputs","kwargs","training","input","splice","broadcastShape","pyListRepeat","sortedReductionAxes","needsBroadcasting","normalizeInference","broadcastMovingMean","read","broadcastMovingVariance","normedTraining","doMovingAverage","variable","value","decay","origValue","updateDelta","mul","sub","write","updateMovingMeanAndVariance","config","baseConfig","Object","assign","registerClass","LayerNormalization","Number","isInteger","Error","Array","isArray","nDims","i","unique","paramShape","map","trainable","keepDims","broadcast","v","offset","momentsTiling","scaleOffsetTiling","tile"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\normalization.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Normalization layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {moments, reshape, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(\n    x: Tensor, mean: Tensor, variance: Tensor, beta?: Tensor, gamma?: Tensor,\n    epsilon = 1e-3): Tensor {\n  let out: Tensor;\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(\n        x as Tensor2D, mean as Tensor2D | Tensor1D,\n        variance as Tensor2D | Tensor1D, beta as Tensor2D | Tensor1D,\n        gamma as Tensor2D | Tensor1D, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(\n        x as Tensor3D, mean as Tensor3D | Tensor1D,\n        variance as Tensor3D | Tensor1D, beta as Tensor3D | Tensor1D,\n        gamma as Tensor3D | Tensor1D, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(\n        x as Tensor4D, mean as Tensor4D | Tensor1D,\n        variance as Tensor4D | Tensor1D, beta as Tensor4D | Tensor1D,\n        gamma as Tensor4D | Tensor1D, epsilon);\n  } else {\n    throw new NotImplementedError(\n        `batchNormalization is not implemented for array of rank ${x.rank} ` +\n        `yet`);\n  }\n  return out;\n}\n\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const normed =\n               batchNormalization(x, mean, variance, beta, gamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const targetShape: number[] = [];\n           for (const axis of math_utils.range(0, x.rank)) {\n             if (reductionAxes.indexOf(axis) !== -1) {\n               targetShape.push(1);\n             } else {\n               targetShape.push(x.shape[axis]);\n             }\n           }\n           const broadcastMean = reshape(mean, targetShape);\n           const broadcastVariance = reshape(variance, targetShape);\n           const broadcastGamma =\n               gamma == null ? null : reshape(gamma, targetShape);\n           const broadcastBeta =\n               beta == null ? null : reshape(beta, targetShape);\n           const normed = batchNormalization(\n               x, broadcastMean, broadcastVariance, broadcastBeta,\n               broadcastGamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  if (util.arraysEqual(\n          reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  }\n}\n\nexport declare interface BatchNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The integer axis that should be normalized (typically the features axis).\n   * Defaults to -1.\n   *\n   * For instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\n   * set `axis=1` in `batchNormalization`.\n   */\n  axis?: number;\n\n  /**\n   * Momentum of the moving average. Defaults to 0.99.\n   */\n  momentum?: number;\n\n  /**\n   * Small float added to the variance to avoid dividing by zero. Defaults to\n   * 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Defaults to `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear (also e.g. `nn.relu`),\n   * this can be disabled since the scaling will be done by the next layer.\n   * Defaults to `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   *  Defaults to 'zeros'.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   *  Defaults to `ones`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving mean.\n   * Defaults to `zeros`\n   */\n  movingMeanInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving variance.\n   *  Defaults to 'Ones'.\n   */\n  movingVarianceInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the beta weight.\n   */\n  betaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for gamma weight.\n   */\n  gammaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer for the beta weight.\n   */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer for the gamma weight.\n   */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class BatchNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'BatchNormalization';\n  private readonly axis: number;\n  private readonly momentum: number;\n  private readonly epsilon: number;\n  private readonly center: boolean;\n  private readonly scale: boolean;\n  private readonly betaInitializer: Initializer;\n  private readonly gammaInitializer: Initializer;\n  private readonly movingMeanInitializer: Initializer;\n  private readonly movingVarianceInitializer: Initializer;\n  private readonly betaConstraint: Constraint;\n  private readonly gammaConstraint: Constraint;\n  private readonly betaRegularizer: Regularizer;\n  private readonly gammaRegularizer: Regularizer;\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n  private movingMean: LayerVariable;\n  private movingVariance: LayerVariable;\n\n  constructor(args?: BatchNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer =\n        getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer =\n        getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(\n          `Axis ${axis} of input tensor should have a defined dimension but ` +\n          `the layer received an input with shape ` +\n          `${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec =\n        [new InputSpec({ndim: inputShape.length, axes: {[axis]: dim}})];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', shape, null, this.gammaInitializer, this.gammaRegularizer,\n          true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', shape, null, this.betaInitializer, this.betaRegularizer, true,\n          this.betaConstraint);\n    }\n    this.movingMean = this.addWeight(\n        'moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight(\n        'moving_variance', shape, null, this.movingVarianceInitializer, null,\n        false);\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(\n          sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n\n      const normalizeInference: () => Tensor = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean =\n              reshape(this.movingMean.read(), broadcastShape);\n          const broadcastMovingVariance =\n              reshape(this.movingVariance.read(), broadcastShape);\n          const broadcastBeta =\n              this.center ? reshape(this.beta.read(), broadcastShape) : null;\n          const broadcastGamma =\n              this.scale ? reshape(this.gamma.read(), broadcastShape) : null;\n          return batchNormalization(\n              input, broadcastMovingMean, broadcastMovingVariance,\n              broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(\n              input, this.movingMean.read(), this.movingVariance.read(),\n              this.beta == null ? null : this.beta.read(),\n              this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n\n      if (!training) {\n        return normalizeInference();\n      }\n\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(\n          input, this.gamma.read(), this.beta.read(), reductionAxes,\n          this.epsilon);\n\n      const doMovingAverage =\n          (variable: LayerVariable, value: Tensor, momentum: number): void => {\n            tfc.tidy(() => {\n              const decay = 1 - momentum;\n              const origValue = variable.read();\n              const updateDelta = tfc.mul(tfc.sub(origValue, value), decay);\n              variable.write(tfc.sub(origValue, updateDelta));\n            });\n          };\n\n      // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n\n      return normedTraining;\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer:\n          serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(BatchNormalization);\n\nexport interface LayerNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The axis or axes that should be normalized (typically, the feature axis).\n   * Defaults to -1 (the last axis).\n   */\n  axis?: number|number[];\n\n  /**\n   * A small positive float added to variance to avoid divison by zero.\n   * Defaults to 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Default: `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply output by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear, this can be disabled since scaling will\n   * be done by the next layer.\n   * Default: `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   * Default: `'zeros'`.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   * Default: `'ones'`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /** Regularizer for the beta weight. */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /** Regularizer for the gamma weight. */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class LayerNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'LayerNormalization';\n\n  private axis: number|number[];\n  readonly epsilon: number;\n  readonly center: boolean;\n  readonly scale: boolean;\n  readonly betaInitializer: Initializer;\n  readonly gammaInitializer: Initializer;\n  readonly betaRegularizer: Regularizer;\n  readonly gammaRegularizer: Regularizer;\n\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n\n  constructor(args?: LayerNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.axis = args.axis == null ? -1 : args.axis;\n    if (typeof this.axis === 'number') {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(\n            `Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(\n              `Expected axis to be an array of integers, ` +\n              `but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(\n          `Expected axis to be an integer or an array of integers, ` +\n          `but received ${JSON.stringify(this.axis)}`);\n    }\n\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n\n    this.supportsMasking = true;\n  }\n\n  public override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length;\n\n    // Convert axis to array and resolve negatives.\n    if (typeof this.axis === 'number') {\n      this.axis = [this.axis];\n    }\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    }\n\n    // Further validate axes.\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n    if (this.axis.length !== generic_utils.unique(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n\n    const paramShape = this.axis.map(axis => inputShape[axis]) as number[];\n\n    const trainable = true;\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', paramShape, 'float32', this.gammaInitializer,\n          this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', paramShape, 'float32', this.betaInitializer,\n          this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const input = getExactlyOneTensor(inputs);\n    const inputShape = input.shape;\n    const nDims = inputShape.length;\n\n    return tidy(() => {\n      const keepDims = true;\n      let {mean, variance} = moments(input, this.axis, keepDims);\n      const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n      for (const dim of this.axis as number[]) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n\n      const broadcast = (v: Tensor) => {\n        if (v != null && v.shape.length !== nDims) {\n          return tfc.reshape(v, broadcastShape);\n        } else {\n          return v;\n        }\n      };\n\n      let scale = this.scale ? broadcast(this.gamma.read()) : null;\n      let offset = this.center ? broadcast(this.beta.read()) : null;\n\n      // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n      // is a workaround for the limitation of core's batchNormalization?d don't\n      // support broadcasting in their gradients. In addition, the tiling is\n      // necessary to ensure correctness on the browser CPU backend regardless\n      // of forward or backward computation. Remove this workaround once the\n      // limitation is addressed. See .\n      const momentsTiling: number[] = [];\n      const scaleOffsetTiling: number[] = [];\n      for (let i = 0; i < nDims; ++i) {\n        if ((this.axis as number[]).indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n      mean = tfc.tile(mean, momentsTiling);\n      variance = tfc.tile(variance, momentsTiling);\n      if (scale != null) {\n        scale = tfc.tile(scale, scaleOffsetTiling);\n      }\n      if (offset != null) {\n        offset = tfc.tile(offset, scaleOffsetTiling);\n      }\n\n      return batchNormalization(\n          input, mean, variance, offset, scale, this.epsilon);\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LayerNormalization);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}