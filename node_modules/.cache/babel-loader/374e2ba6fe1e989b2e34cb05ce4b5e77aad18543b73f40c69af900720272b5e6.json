{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from '../../engine/topology';\nimport { serialization, mul, add, tidy } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport * as K from '../../backend/tfjs_backend';\n/**\n * Preprocessing Rescaling Layer\n *\n * This rescales images by a scaling and offset factor\n */\nexport var Rescaling = /*#__PURE__*/function (_Layer) {\n  _inherits(Rescaling, _Layer);\n  var _super = _createSuper(Rescaling);\n  function Rescaling(args) {\n    var _this;\n    _classCallCheck(this, Rescaling);\n    _this = _super.call(this, args);\n    _this.scale = args.scale;\n    if (args.offset) {\n      _this.offset = args.offset;\n    } else {\n      _this.offset = 0;\n    }\n    return _this;\n  }\n  _createClass(Rescaling, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'scale': this.scale,\n        'offset': this.offset\n      };\n      var baseConfig = _get(_getPrototypeOf(Rescaling.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        if (inputs.dtype !== 'float32') {\n          inputs = K.cast(inputs, 'float32');\n        }\n        return add(mul(inputs, _this2.scale), _this2.offset);\n      });\n    }\n  }]);\n  return Rescaling;\n}(Layer);\n/** @nocollapse */\nRescaling.className = 'Rescaling';\nserialization.registerClass(Rescaling);","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;AAUA,SAAmBA,KAAK,QAAO,uBAAuB;AACtD,SAASC,aAAa,EAAUC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,uBAAuB;AAC7E,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,OAAO,KAAKC,CAAC,MAAM,4BAA4B;AAQ/C;;;;;AAKA,WAAaC,SAAU;EAAA;EAAA;EAKrB,mBAAYC,IAAmB;IAAA;IAAA;IAC7B,0BAAMA,IAAI;IAEV,MAAKC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAEvB,IAAGD,IAAI,CAACE,MAAM,EAAE;MAChB,MAAKA,MAAM,GAAGF,IAAI,CAACE,MAAM;KACxB,MAAM;MACL,MAAKA,MAAM,GAAG,CAAC;;IAChB;EACH;EAAC;IAAA;IAAA,OAEQ,qBAAS;MAChB,IAAMC,MAAM,GAA6B;QACvC,OAAO,EAAE,IAAI,CAACF,KAAK;QACnB,QAAQ,EAAE,IAAI,CAACC;OAChB;MAED,IAAME,UAAU,2EAAoB;MACpCC,MAAM,CAACC,MAAM,CAACH,MAAM,EAAEC,UAAU,CAAC;MACjC,OAAOD,MAAM;IACf;EAAC;IAAA;IAAA,OAEQ,cAAKI,MAAuB,EAAEC,MAAc;MAAA;MACnD,OAAOZ,IAAI,CAAC,YAAK;QACfW,MAAM,GAAGV,mBAAmB,CAACU,MAAM,CAAC;QACpC,IAAGA,MAAM,CAACE,KAAK,KAAK,SAAS,EAAE;UAC3BF,MAAM,GAAGT,CAAC,CAACY,IAAI,CAACH,MAAM,EAAE,SAAS,CAAC;;QAEtC,OAAOZ,GAAG,CAACD,GAAG,CAACa,MAAM,EAAE,MAAI,CAACN,KAAK,CAAC,EAAE,MAAI,CAACC,MAAM,CAAC;MAClD,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,EApC4BV,KAAK;AAClC;AACOO,mBAAS,GAAG,WAAW;AAqChCN,aAAa,CAACkB,aAAa,CAACZ,SAAS,CAAC","names":["Layer","serialization","mul","add","tidy","getExactlyOneTensor","K","Rescaling","args","scale","offset","config","baseConfig","Object","assign","inputs","kwargs","dtype","cast","registerClass"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\preprocessing\\image_preprocessing.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerArgs, Layer} from '../../engine/topology';\nimport { serialization, Tensor, mul, add, tidy } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport * as K from '../../backend/tfjs_backend';\nimport { Kwargs } from '../../types';\n\nexport declare interface RescalingArgs extends LayerArgs {\n  scale: number;\n  offset?: number;\n}\n\n/**\n * Preprocessing Rescaling Layer\n *\n * This rescales images by a scaling and offset factor\n */\nexport class Rescaling extends Layer {\n  /** @nocollapse */\n  static className = 'Rescaling';\n  private readonly scale: number;\n  private readonly offset: number;\n  constructor(args: RescalingArgs) {\n    super(args);\n\n    this.scale = args.scale;\n\n    if(args.offset) {\n    this.offset = args.offset;\n    } else {\n      this.offset = 0;\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'scale': this.scale,\n      'offset': this.offset\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor[]|Tensor {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      if(inputs.dtype !== 'float32') {\n          inputs = K.cast(inputs, 'float32');\n      }\n      return add(mul(inputs, this.scale), this.offset);\n    });\n  }\n}\n\nserialization.registerClass(Rescaling);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}