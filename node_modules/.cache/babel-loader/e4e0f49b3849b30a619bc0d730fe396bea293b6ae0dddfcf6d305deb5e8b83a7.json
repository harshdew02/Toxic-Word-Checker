{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var PadProgram = /*#__PURE__*/_createClass(function PadProgram(xShape, paddings, constantValue) {\n  _classCallCheck(this, PadProgram);\n  this.variableNames = ['x'];\n  this.customUniforms = [{\n    name: 'value',\n    type: 'float'\n  }];\n  this.outputShape = paddings.map(function (p, i) {\n    return p[0] /* beforePad */ + xShape[i] + p[1];\n  } /* afterPad */);\n  var rank = xShape.length;\n  var type = getCoordsDataType(rank);\n  var start = paddings.map(function (p) {\n    return p[0];\n  }).join(',');\n  var end = paddings.map(function (p, i) {\n    return p[0] + xShape[i];\n  }).join(',');\n  var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n  if (rank === 1) {\n    this.userCode = \"\\n        int start = \".concat(start, \";\\n        int end = \").concat(end, \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(value);\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \");\n    return;\n  }\n  this.userCode = \"\\n      \".concat(type, \" start = \").concat(type, \"(\").concat(start, \");\\n      \").concat(type, \" end = \").concat(type, \"(\").concat(end, \");\\n\\n      void main() {\\n        \").concat(type, \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(value);\\n        } else {\\n          \").concat(type, \" coords = outC - start;\\n          setOutput(getX(\").concat(unpackedCoords, \"));\\n        }\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAiB,QAAoB,mBAAmB;AAEhE,WAAaC,UAAU,6BAMrB,oBACIC,MAAgB,EAAEC,QAAiC,EACnDC,aAAqB;EAAA;EAPzB,kBAAa,GAAG,CAAC,GAAG,CAAC;EAGrB,mBAAc,GAAG,CAAC;IAACC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAsB,CAAC,CAAC;EAK9D,IAAI,CAACC,WAAW,GAAGJ,QAAQ,CAACK,GAAG,CAC3B,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBP,MAAM,CAACQ,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC,eAAe;EACrE,IAAME,IAAI,GAAGT,MAAM,CAACU,MAAM;EAC1B,IAAMN,IAAI,GAAGN,iBAAiB,CAACW,IAAI,CAAC;EAEpC,IAAME,KAAK,GAAGV,QAAQ,CAACK,GAAG,CAAC,WAAC;IAAA,OAAIC,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC,CAACK,IAAI,CAAC,GAAG,CAAC;EAC/C,IAAMC,GAAG,GAAGZ,QAAQ,CAACK,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,CAAC,CAAC,CAAC,GAAGP,MAAM,CAACQ,CAAC,CAAC;EAAA,EAAC,CAACI,IAAI,CAAC,GAAG,CAAC;EAC9D,IAAME,cAAc,GAChB,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAACC,KAAK,CAAC,CAAC,EAAEN,IAAI,CAAC;EAEvE,IAAIA,IAAI,KAAK,CAAC,EAAE;IACd,IAAI,CAACO,QAAQ,mCACGL,KAAK,kCACPE,GAAG,qPAUhB;IACD;;EAEF,IAAI,CAACG,QAAQ,qBACTZ,IAAI,sBAAYA,IAAI,cAAIO,KAAK,uBAC7BP,IAAI,oBAAUA,IAAI,cAAIS,GAAG,gDAGvBT,IAAI,iLAIFA,IAAI,+DACWU,cAAc,kCAGpC;AACH,CAAC","names":["getCoordsDataType","PadProgram","xShape","paddings","constantValue","name","type","outputShape","map","p","i","rank","length","start","join","end","unpackedCoords","slice","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\pad_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}