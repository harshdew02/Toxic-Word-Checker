{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport { getRegisteredOp } from './custom_op/register';\nimport { getNodeNameAndIndex } from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nexport var OperationMapper = /*#__PURE__*/function () {\n  // Loads the op mapping from the JSON file.\n  function OperationMapper() {\n    var _ref;\n    _classCallCheck(this, OperationMapper);\n    var ops = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, graph, hashTable, image, logical, matrices, normalization, reduction, sliceJoin, sparse, spectral, string, transformation];\n    var mappersJson = (_ref = []).concat.apply(_ref, _toConsumableArray(ops.map(function (op) {\n      return op.json;\n    })));\n    this.opMappers = mappersJson.reduce(function (map, mapper) {\n      map[mapper.tfOpName] = mapper;\n      return map;\n    }, {});\n  }\n  // Singleton instance for the mapper\n  _createClass(OperationMapper, [{\n    key: \"transformGraph\",\n    value:\n    // Converts the model inference graph from Tensorflow GraphDef to local\n    // representation for TensorFlow.js API\n    function transformGraph(graph) {\n      var _this = this;\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var tfNodes = graph.node;\n      var placeholders = [];\n      var weights = [];\n      var initNodes = [];\n      var nodes = tfNodes.reduce(function (map, node) {\n        map[node.name] = _this.mapNode(node);\n        if (node.op.startsWith('Placeholder')) {\n          placeholders.push(map[node.name]);\n        } else if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        } else if (node.input == null || node.input.length === 0) {\n          initNodes.push(map[node.name]);\n        }\n        return map;\n      }, {});\n      var inputs = [];\n      var outputs = [];\n      var inputNodeNameToKey = {};\n      var outputNodeNameToKey = {};\n      if (signature != null) {\n        inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n        outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n      }\n      var allNodes = Object.keys(nodes);\n      allNodes.forEach(function (key) {\n        var node = nodes[key];\n        node.inputNames.forEach(function (name, index) {\n          var _getNodeNameAndIndex = getNodeNameAndIndex(name),\n            _getNodeNameAndIndex2 = _slicedToArray(_getNodeNameAndIndex, 3),\n            nodeName = _getNodeNameAndIndex2[0],\n            outputName = _getNodeNameAndIndex2[2];\n          var inputNode = nodes[nodeName];\n          if (inputNode.outputs != null) {\n            var outputIndex = inputNode.outputs.indexOf(outputName);\n            if (outputIndex !== -1) {\n              var inputName = \"\".concat(nodeName, \":\").concat(outputIndex);\n              // update the input name to use the mapped output index directly.\n              node.inputNames[index] = inputName;\n            }\n          }\n          node.inputs.push(inputNode);\n          inputNode.children.push(node);\n        });\n      });\n      // if signature has not outputs set, add any node that does not have\n      // outputs.\n      if (Object.keys(outputNodeNameToKey).length === 0) {\n        allNodes.forEach(function (key) {\n          var node = nodes[key];\n          if (node.children.length === 0) {\n            outputs.push(node);\n          }\n        });\n      } else {\n        Object.keys(outputNodeNameToKey).forEach(function (name) {\n          var _getNodeNameAndIndex3 = getNodeNameAndIndex(name),\n            _getNodeNameAndIndex4 = _slicedToArray(_getNodeNameAndIndex3, 1),\n            nodeName = _getNodeNameAndIndex4[0];\n          var node = nodes[nodeName];\n          if (node != null) {\n            node.signatureKey = outputNodeNameToKey[name];\n            outputs.push(node);\n          }\n        });\n      }\n      if (Object.keys(inputNodeNameToKey).length > 0) {\n        Object.keys(inputNodeNameToKey).forEach(function (name) {\n          var _getNodeNameAndIndex5 = getNodeNameAndIndex(name),\n            _getNodeNameAndIndex6 = _slicedToArray(_getNodeNameAndIndex5, 1),\n            nodeName = _getNodeNameAndIndex6[0];\n          var node = nodes[nodeName];\n          if (node) {\n            node.signatureKey = inputNodeNameToKey[name];\n            inputs.push(node);\n          }\n        });\n      } else {\n        inputs = placeholders;\n      }\n      var functions = {};\n      if (graph.library != null && graph.library.function != null) {\n        functions = graph.library.function.reduce(function (functions, func) {\n          functions[func.signature.name] = _this.mapFunction(func);\n          return functions;\n        }, {});\n      }\n      var result = {\n        nodes: nodes,\n        inputs: inputs,\n        outputs: outputs,\n        weights: weights,\n        placeholders: placeholders,\n        signature: signature,\n        functions: functions\n      };\n      if (initNodes.length > 0) {\n        result.initNodes = initNodes;\n      }\n      return result;\n    }\n  }, {\n    key: \"mapSignatureEntries\",\n    value: function mapSignatureEntries(entries) {\n      return Object.keys(entries || {}).reduce(function (prev, curr) {\n        prev[entries[curr].name] = curr;\n        return prev;\n      }, {});\n    }\n  }, {\n    key: \"mapNode\",\n    value: function mapNode(node) {\n      // Unsupported ops will cause an error at run-time (not parse time), since\n      // they may not be used by the actual execution subgraph.\n      var mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n      if (node.attr == null) {\n        node.attr = {};\n      }\n      var newNode = {\n        name: node.name,\n        op: node.op,\n        category: mapper.category,\n        inputNames: (node.input || []).map(function (input) {\n          return input.startsWith('^') ? input.slice(1) : input;\n        }),\n        inputs: [],\n        children: [],\n        inputParams: {},\n        attrParams: {},\n        rawAttrs: node.attr,\n        outputs: mapper.outputs\n      };\n      if (mapper.inputs != null) {\n        newNode.inputParams = mapper.inputs.reduce(function (map, param) {\n          map[param.name] = {\n            type: param.type,\n            inputIndexStart: param.start,\n            inputIndexEnd: param.end\n          };\n          return map;\n        }, {});\n      }\n      if (mapper.attrs != null) {\n        newNode.attrParams = mapper.attrs.reduce(function (map, param) {\n          var type = param.type;\n          var value = undefined;\n          switch (param.type) {\n            case 'string':\n              value = getStringParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'string[]':\n              value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'number':\n              value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'number[]':\n              value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'bool':\n              value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'bool[]':\n              value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'shape':\n              value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'shape[]':\n              value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'dtype':\n              value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'dtype[]':\n              value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'func':\n              value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n              if (value === undefined && !!param.tfDeprecatedName) {\n                value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n              }\n              break;\n            case 'tensor':\n            case 'tensors':\n              break;\n            default:\n              throw new Error(\"Unsupported param type: \".concat(param.type, \" for op: \").concat(node.op));\n          }\n          map[param.name] = {\n            value: value,\n            type: type\n          };\n          return map;\n        }, {});\n      }\n      return newNode;\n    }\n    // map the TFunctionDef to TFJS graph object\n  }, {\n    key: \"mapFunction\",\n    value: function mapFunction(functionDef) {\n      var _this2 = this;\n      var tfNodes = functionDef.nodeDef;\n      var placeholders = [];\n      var weights = [];\n      var nodes = {};\n      if (tfNodes != null) {\n        nodes = tfNodes.reduce(function (map, node) {\n          map[node.name] = _this2.mapNode(node);\n          if (node.op === 'Const') {\n            weights.push(map[node.name]);\n          }\n          return map;\n        }, {});\n      }\n      var inputs = [];\n      var outputs = [];\n      functionDef.signature.inputArg.forEach(function (arg) {\n        var _getNodeNameAndIndex7 = getNodeNameAndIndex(arg.name),\n          _getNodeNameAndIndex8 = _slicedToArray(_getNodeNameAndIndex7, 1),\n          nodeName = _getNodeNameAndIndex8[0];\n        var node = {\n          name: nodeName,\n          op: 'Placeholder',\n          inputs: [],\n          inputNames: [],\n          category: 'graph',\n          inputParams: {},\n          attrParams: {\n            dtype: {\n              value: parseDtypeParam(arg.type),\n              type: 'dtype'\n            }\n          },\n          children: []\n        };\n        node.signatureKey = arg.name;\n        inputs.push(node);\n        nodes[nodeName] = node;\n      });\n      var allNodes = Object.keys(nodes);\n      allNodes.forEach(function (key) {\n        var node = nodes[key];\n        node.inputNames.forEach(function (name, index) {\n          var _getNodeNameAndIndex9 = getNodeNameAndIndex(name),\n            _getNodeNameAndIndex10 = _slicedToArray(_getNodeNameAndIndex9, 3),\n            nodeName = _getNodeNameAndIndex10[0],\n            outputName = _getNodeNameAndIndex10[2];\n          var inputNode = nodes[nodeName];\n          if (inputNode.outputs != null) {\n            var outputIndex = inputNode.outputs.indexOf(outputName);\n            if (outputIndex !== -1) {\n              var inputName = \"\".concat(nodeName, \":\").concat(outputIndex);\n              // update the input name to use the mapped output index directly.\n              node.inputNames[index] = inputName;\n            }\n          }\n          node.inputs.push(inputNode);\n          inputNode.children.push(node);\n        });\n      });\n      var returnNodeMap = functionDef.ret;\n      functionDef.signature.outputArg.forEach(function (output) {\n        var _getNodeNameAndIndex11 = getNodeNameAndIndex(returnNodeMap[output.name]),\n          _getNodeNameAndIndex12 = _slicedToArray(_getNodeNameAndIndex11, 2),\n          nodeName = _getNodeNameAndIndex12[0],\n          index = _getNodeNameAndIndex12[1];\n        var node = nodes[nodeName];\n        if (node != null) {\n          node.defaultOutput = index;\n          outputs.push(node);\n        }\n      });\n      var signature = this.mapArgsToSignature(functionDef);\n      return {\n        nodes: nodes,\n        inputs: inputs,\n        outputs: outputs,\n        weights: weights,\n        placeholders: placeholders,\n        signature: signature\n      };\n    }\n  }, {\n    key: \"mapArgsToSignature\",\n    value: function mapArgsToSignature(functionDef) {\n      var _this3 = this;\n      return {\n        methodName: functionDef.signature.name,\n        inputs: functionDef.signature.inputArg.reduce(function (map, arg) {\n          map[arg.name] = _this3.mapArgToTensorInfo(arg);\n          return map;\n        }, {}),\n        outputs: functionDef.signature.outputArg.reduce(function (map, arg) {\n          map[arg.name] = _this3.mapArgToTensorInfo(arg, functionDef.ret);\n          return map;\n        }, {})\n      };\n    }\n  }, {\n    key: \"mapArgToTensorInfo\",\n    value: function mapArgToTensorInfo(arg, nameMap) {\n      var name = arg.name;\n      if (nameMap != null) {\n        name = nameMap[name];\n      }\n      return {\n        name: name,\n        dtype: arg.type\n      };\n    }\n  }], [{\n    key: \"Instance\",\n    get: function get() {\n      return this._instance || (this._instance = new this());\n    }\n  }]);\n  return OperationMapper;\n}();\nexport function decodeBase64(text) {\n  var global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error('Unable to decode base64 in this environment. ' + 'Missing built-in atob() or Buffer()');\n  }\n}\nexport function parseStringParam(s, keepCase) {\n  var value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\nexport function getStringParam(attrs, name, def) {\n  var keepCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\nexport function getBoolParam(attrs, name, def) {\n  var param = attrs[name];\n  return param ? param.b : def;\n}\nexport function getNumberParam(attrs, name, def) {\n  var param = attrs[name] || {};\n  var value = param['i'] != null ? param['i'] : param['f'] != null ? param['f'] : def;\n  return typeof value === 'number' ? value : parseInt(value, 10);\n}\nexport function parseDtypeParam(value) {\n  if (typeof value === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n    case tensorflow.DataType.DT_HALF:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\nexport function getFuncParam(attrs, name, def) {\n  var param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\nexport function getDtypeParam(attrs, name, def) {\n  var param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\nexport function getDtypeArrayParam(attrs, name, def) {\n  var param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(function (v) {\n      return parseDtypeParam(v);\n    });\n  }\n  return def;\n}\nexport function parseTensorShapeParam(shape) {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(function (dim) {\n      return typeof dim.size === 'number' ? dim.size : parseInt(dim.size, 10);\n    });\n  }\n  return [];\n}\nexport function getTensorShapeParam(attrs, name, def) {\n  var param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\nexport function getNumericArrayParam(attrs, name, def) {\n  var param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map(function (v) {\n      return typeof v === 'number' ? v : parseInt(v, 10);\n    });\n  }\n  return def;\n}\nexport function getStringArrayParam(attrs, name, def) {\n  var keepCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map(function (v) {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\nexport function getTensorShapeArrayParam(attrs, name, def) {\n  var param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map(function (v) {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\nexport function getBoolArrayParam(attrs, name, def) {\n  var param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}","map":{"version":3,"mappings":"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","names":["env","tensorflow","getRegisteredOp","getNodeNameAndIndex","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","image","logical","matrices","normalization","reduction","sliceJoin","sparse","spectral","string","transformation","OperationMapper","ops","mappersJson","concat","map","op","json","opMappers","reduce","mapper","tfOpName","signature","tfNodes","node","placeholders","weights","initNodes","nodes","name","mapNode","startsWith","push","input","length","inputs","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","Object","keys","forEach","key","inputNames","index","nodeName","outputName","inputNode","outputIndex","indexOf","inputName","children","signatureKey","functions","library","function","func","mapFunction","result","entries","prev","curr","attr","newNode","category","slice","inputParams","attrParams","rawAttrs","param","type","inputIndexStart","start","inputIndexEnd","end","attrs","value","undefined","getStringParam","tfName","defaultValue","tfDeprecatedName","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","_instance","decodeBase64","text","global","atob","Buffer","toString","parseStringParam","s","keepCase","Array","isArray","String","fromCharCode","apply","toLowerCase","def","b","parseInt","DataType","DT_FLOAT","DT_HALF","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","shape","unknownRank","dim","size","f","i"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\operation_mapper.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, graph, hashTable, image, logical, matrices, normalization,\n      reduction, sliceJoin, sparse, spectral, string, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.slice(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n    case tensorflow.DataType.DT_HALF:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}