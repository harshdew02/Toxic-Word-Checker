{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n *  Advanced activation layers.\n */\nimport { cast, clipByValue, elu, greater, leakyRelu, mul, prelu, relu, serialization } from '@tensorflow/tfjs-core';\nimport { Softmax as softmaxActivation } from '../activations';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport var ReLU = /*#__PURE__*/function (_Layer) {\n  _inherits(ReLU, _Layer);\n  var _super = _createSuper(ReLU);\n  function ReLU(args) {\n    var _this;\n    _classCallCheck(this, ReLU);\n    _this = _super.call(this, args == null ? {} : args);\n    _this.supportsMasking = true;\n    if (args != null) {\n      _this.maxValue = args.maxValue;\n    }\n    return _this;\n  }\n  _createClass(ReLU, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      inputs = getExactlyOneTensor(inputs);\n      var output = relu(inputs);\n      if (this.maxValue != null) {\n        output = clipByValue(output, 0, this.maxValue);\n      }\n      return output;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        maxValue: this.maxValue\n      };\n      var baseConfig = _get(_getPrototypeOf(ReLU.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return ReLU;\n}(Layer);\n/** @nocollapse */\nReLU.className = 'ReLU';\nserialization.registerClass(ReLU);\nexport var LeakyReLU = /*#__PURE__*/function (_Layer2) {\n  _inherits(LeakyReLU, _Layer2);\n  var _super2 = _createSuper(LeakyReLU);\n  function LeakyReLU(args) {\n    var _this2;\n    _classCallCheck(this, LeakyReLU);\n    _this2 = _super2.call(this, args == null ? {} : args);\n    _this2.DEFAULT_ALPHA = 0.3;\n    if (args == null) {\n      args = {};\n    }\n    _this2.alpha = args.alpha == null ? _this2.DEFAULT_ALPHA : args.alpha;\n    return _this2;\n  }\n  _createClass(LeakyReLU, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var x = getExactlyOneTensor(inputs);\n      return leakyRelu(x, this.alpha);\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        alpha: this.alpha\n      };\n      var baseConfig = _get(_getPrototypeOf(LeakyReLU.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return LeakyReLU;\n}(Layer);\n/** @nocollapse */\nLeakyReLU.className = 'LeakyReLU';\nserialization.registerClass(LeakyReLU);\nexport var PReLU = /*#__PURE__*/function (_Layer3) {\n  _inherits(PReLU, _Layer3);\n  var _super3 = _createSuper(PReLU);\n  function PReLU(args) {\n    var _this3;\n    _classCallCheck(this, PReLU);\n    _this3 = _super3.call(this, args == null ? {} : args);\n    _this3.DEFAULT_ALPHA_INITIALIZER = 'zeros';\n    if (args == null) {\n      args = {};\n    }\n    _this3.supportsMasking = true;\n    _this3.alphaInitializer = getInitializer(args.alphaInitializer || _this3.DEFAULT_ALPHA_INITIALIZER);\n    _this3.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    _this3.alphaConstraint = getConstraint(args.alphaConstraint);\n    if (args.sharedAxes == null) {\n      _this3.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      _this3.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === 'number') {\n      _this3.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(\"Expected sharedAxes to be a number or an array of numbers, \" + \"but got \".concat(args.sharedAxes));\n    }\n    return _this3;\n  }\n  _createClass(PReLU, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var paramShape = inputShape.slice(1);\n      if (this.sharedAxes != null) {\n        var _iterator = _createForOfIteratorHelper(this.sharedAxes),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var i = _step.value;\n            paramShape[i - 1] = 1;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      this.alpha = this.addWeight('alpha', paramShape, 'float32', this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint);\n      // Set input spec.\n      var axes = {};\n      if (this.sharedAxes != null) {\n        for (var _i = 1; _i < inputShape.length; ++_i) {\n          axes[_i] = inputShape[_i];\n        }\n      }\n      this.inputSpec = [new InputSpec({\n        ndim: inputShape.length,\n        axes: axes\n      })];\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      inputs = getExactlyOneTensor(inputs);\n      return prelu(inputs, this.alpha.read());\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        alphaInitializer: serializeInitializer(this.alphaInitializer),\n        alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n        alphaConstraint: serializeConstraint(this.alphaConstraint),\n        sharedAxes: this.sharedAxes\n      };\n      var baseConfig = _get(_getPrototypeOf(PReLU.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return PReLU;\n}(Layer);\n/** @nocollapse */\nPReLU.className = 'PReLU';\nserialization.registerClass(PReLU);\nexport var ELU = /*#__PURE__*/function (_Layer4) {\n  _inherits(ELU, _Layer4);\n  var _super4 = _createSuper(ELU);\n  function ELU(args) {\n    var _this4;\n    _classCallCheck(this, ELU);\n    _this4 = _super4.call(this, args == null ? {} : args);\n    _this4.DEFAULT_ALPHA = 1.0;\n    if (args == null) {\n      args = {};\n    }\n    if (args.alpha != null && args.alpha !== _this4.DEFAULT_ALPHA) {\n      throw new NotImplementedError(\"Non-default alpha value (\".concat(args.alpha, \") is not supported by the \") + \"ELU layer yet.\");\n    }\n    _this4.alpha = args.alpha == null ? _this4.DEFAULT_ALPHA : args.alpha;\n    return _this4;\n  }\n  _createClass(ELU, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var x = getExactlyOneTensor(inputs);\n      return elu(x);\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        alpha: this.alpha\n      };\n      var baseConfig = _get(_getPrototypeOf(ELU.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return ELU;\n}(Layer);\n/** @nocollapse */\nELU.className = 'ELU';\nserialization.registerClass(ELU);\nexport var ThresholdedReLU = /*#__PURE__*/function (_Layer5) {\n  _inherits(ThresholdedReLU, _Layer5);\n  var _super5 = _createSuper(ThresholdedReLU);\n  function ThresholdedReLU(args) {\n    var _this5;\n    _classCallCheck(this, ThresholdedReLU);\n    _this5 = _super5.call(this, args == null ? {} : args);\n    _this5.DEFAULT_THETA = 1.0;\n    if (args == null) {\n      args = {};\n    }\n    _this5.theta = args.theta == null ? _this5.DEFAULT_THETA : args.theta;\n    return _this5;\n  }\n  _createClass(ThresholdedReLU, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var x = getExactlyOneTensor(inputs);\n      return mul(x, cast(greater(x, this.theta), 'float32'));\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        theta: this.theta\n      };\n      var baseConfig = _get(_getPrototypeOf(ThresholdedReLU.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return ThresholdedReLU;\n}(Layer);\n/** @nocollapse */\nThresholdedReLU.className = 'ThresholdedReLU';\nserialization.registerClass(ThresholdedReLU);\nexport var Softmax = /*#__PURE__*/function (_Layer6) {\n  _inherits(Softmax, _Layer6);\n  var _super6 = _createSuper(Softmax);\n  function Softmax(args) {\n    var _this6;\n    _classCallCheck(this, Softmax);\n    _this6 = _super6.call(this, args == null ? {} : args);\n    _this6.DEFAULT_AXIS = 1.0;\n    if (args == null) {\n      args = {};\n    }\n    _this6.softmax = new softmaxActivation().apply;\n    _this6.axis = args.axis == null ? _this6.DEFAULT_AXIS : args.axis;\n    return _this6;\n  }\n  _createClass(Softmax, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var x = getExactlyOneTensor(inputs);\n      return this.softmax(x, this.axis);\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        axis: this.axis\n      };\n      var baseConfig = _get(_getPrototypeOf(Softmax.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n  return Softmax;\n}(Layer);\n/** @nocollapse */\nSoftmax.className = 'Softmax';\nserialization.registerClass(Softmax);","map":{"version":3,"mappings":"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","names":["cast","clipByValue","elu","greater","leakyRelu","mul","prelu","relu","serialization","Softmax","softmaxActivation","getConstraint","serializeConstraint","InputSpec","Layer","NotImplementedError","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","getExactlyOneShape","getExactlyOneTensor","ReLU","args","supportsMasking","maxValue","inputs","kwargs","output","inputShape","config","baseConfig","Object","assign","registerClass","LeakyReLU","alpha","DEFAULT_ALPHA","x","PReLU","alphaInitializer","DEFAULT_ALPHA_INITIALIZER","alphaRegularizer","alphaConstraint","sharedAxes","Array","isArray","paramShape","slice","i","addWeight","axes","length","inputSpec","ndim","built","read","ELU","ThresholdedReLU","theta","DEFAULT_THETA","softmax","apply","axis","DEFAULT_AXIS"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\advanced_activations.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n *  Advanced activation layers.\n */\n\nimport {cast, clipByValue, elu, greater, leakyRelu, mul, prelu, relu, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {Softmax as softmaxActivation} from '../activations';\nimport {Constraint, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface ReLULayerArgs extends LayerArgs {\n  /**\n   * Float, the maximum output value.\n   */\n  maxValue?: number;\n}\n\nexport class ReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ReLU';\n  maxValue: number;\n\n  constructor(args?: ReLULayerArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maxValue = args.maxValue;\n    }\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    let output = relu(inputs);\n    if (this.maxValue != null) {\n      output = clipByValue(output, 0, this.maxValue);\n    }\n    return output;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {maxValue: this.maxValue};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ReLU);\n\nexport declare interface LeakyReLULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `0.3`.\n   */\n  alpha?: number;\n}\n\nexport class LeakyReLU extends Layer {\n  /** @nocollapse */\n  static className = 'LeakyReLU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 0.3;\n\n  constructor(args?: LeakyReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return leakyRelu(x, this.alpha);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LeakyReLU);\n\nexport declare interface PReLULayerArgs extends LayerArgs {\n  /**\n   * Initializer for the learnable alpha.\n   */\n  alphaInitializer?: Initializer|InitializerIdentifier;\n\n  /**\n   * Regularizer for the learnable alpha.\n   */\n  alphaRegularizer?: Regularizer;\n\n  /**\n   * Constraint for the learnable alpha.\n   */\n  alphaConstraint?: Constraint;\n\n  /**\n   * The axes along which to share learnable parameters for the activation\n   * function. For example, if the incoming feature maps are from a 2D\n   * convolution with output shape `[numExamples, height, width, channels]`,\n   * and you wish to share parameters across space (height and width) so that\n   * each filter channels has only one set of parameters, set\n   * `shared_axes: [1, 2]`.\n   */\n  sharedAxes?: number|number[];\n}\n\nexport class PReLU extends Layer {\n  /** @nocollapse */\n  static className = 'PReLU';\n  private readonly alphaInitializer: Initializer;\n  private readonly alphaRegularizer: Regularizer;\n  private readonly alphaConstraint: Constraint;\n  private readonly sharedAxes: number[];\n  private alpha: LayerVariable;\n\n  readonly DEFAULT_ALPHA_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args?: PReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.supportsMasking = true;\n    this.alphaInitializer =\n        getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n    this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    this.alphaConstraint = getConstraint(args.alphaConstraint);\n    if (args.sharedAxes == null) {\n      this.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      this.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === 'number') {\n      this.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(\n          `Expected sharedAxes to be a number or an array of numbers, ` +\n          `but got ${args.sharedAxes}`);\n    }\n  }\n\n  override build(inputShape: Shape|Shape[]) {\n    inputShape = getExactlyOneShape(inputShape);\n    const paramShape: Shape = inputShape.slice(1);\n    if (this.sharedAxes != null) {\n      for (const i of this.sharedAxes) {\n        paramShape[i - 1] = 1;\n      }\n    }\n    this.alpha = this.addWeight(\n        'alpha', paramShape, 'float32', this.alphaInitializer,\n        this.alphaRegularizer, true, this.alphaConstraint);\n    // Set input spec.\n    const axes: {[axis: number]: number} = {};\n    if (this.sharedAxes != null) {\n      for (let i = 1; i < inputShape.length; ++i) {\n        axes[i] = inputShape[i];\n      }\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes,\n    })];\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    return prelu(inputs, this.alpha.read());\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      alphaInitializer: serializeInitializer(this.alphaInitializer),\n      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n      alphaConstraint: serializeConstraint(this.alphaConstraint),\n      sharedAxes: this.sharedAxes\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(PReLU);\n\nexport declare interface ELULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `1.0`.\n   */\n  alpha?: number;\n}\n\nexport class ELU extends Layer {\n  /** @nocollapse */\n  static className = 'ELU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 1.0;\n\n  constructor(args?: ELULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n      throw new NotImplementedError(\n          `Non-default alpha value (${args.alpha}) is not supported by the ` +\n          `ELU layer yet.`);\n    }\n\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return elu(x);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ELU);\n\nexport declare interface ThresholdedReLULayerArgs extends LayerArgs {\n  /**\n   * Float >= 0. Threshold location of activation.\n   */\n  theta?: number;\n}\n\nexport class ThresholdedReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ThresholdedReLU';\n  readonly theta: number;\n\n  readonly DEFAULT_THETA = 1.0;\n\n  constructor(args?: ThresholdedReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return mul(x, cast(greater(x, this.theta), 'float32'));\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {theta: this.theta};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ThresholdedReLU);\n\nexport declare interface SoftmaxLayerArgs extends LayerArgs {\n  /**\n   * Integer, axis along which the softmax normalization is applied.\n   * Defaults to `-1` (i.e., the last axis).\n   */\n  axis?: number;\n}\n\nexport class Softmax extends Layer {\n  /** @nocollapse */\n  static className = 'Softmax';\n  readonly axis: number;\n  readonly softmax: (t: Tensor, a?: number) => Tensor;\n  readonly DEFAULT_AXIS = 1.0;\n\n  constructor(args?: SoftmaxLayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.softmax = new softmaxActivation().apply;\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return this.softmax(x, this.axis);\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {axis: this.axis};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Softmax);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}