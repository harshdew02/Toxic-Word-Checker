{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject } from './utils/generic_utils';\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport var Activation = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Activation, _serialization$Serial);\n  var _super = _createSuper(Activation);\n  function Activation() {\n    _classCallCheck(this, Activation);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Activation, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n  return Activation;\n}(serialization.Serializable);\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport var Elu = /*#__PURE__*/function (_Activation) {\n  _inherits(Elu, _Activation);\n  var _super2 = _createSuper(Elu);\n  function Elu() {\n    _classCallCheck(this, Elu);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(Elu, [{\n    key: \"apply\",\n    value:\n    /**\n     * Calculate the activation function.\n     *\n     * @param x: Input.\n     * @param alpha: Scaling factor the negative section.\n     * @return Output of the ELU activation.\n     */\n    function apply(x) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return K.elu(x, alpha);\n    }\n  }]);\n  return Elu;\n}(Activation);\n/** @nocollapse */\nElu.className = 'elu';\nserialization.registerClass(Elu);\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport var Selu = /*#__PURE__*/function (_Activation2) {\n  _inherits(Selu, _Activation2);\n  var _super3 = _createSuper(Selu);\n  function Selu() {\n    _classCallCheck(this, Selu);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(Selu, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.selu(x);\n    }\n  }]);\n  return Selu;\n}(Activation);\n/** @nocollapse */\nSelu.className = 'selu';\nserialization.registerClass(Selu);\n/**\n *  Rectified linear unit\n */\nexport var Relu = /*#__PURE__*/function (_Activation3) {\n  _inherits(Relu, _Activation3);\n  var _super4 = _createSuper(Relu);\n  function Relu() {\n    _classCallCheck(this, Relu);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(Relu, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.relu(x);\n    }\n  }]);\n  return Relu;\n}(Activation);\n/** @nocollapse */\nRelu.className = 'relu';\nserialization.registerClass(Relu);\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport var Relu6 = /*#__PURE__*/function (_Activation4) {\n  _inherits(Relu6, _Activation4);\n  var _super5 = _createSuper(Relu6);\n  function Relu6() {\n    _classCallCheck(this, Relu6);\n    return _super5.apply(this, arguments);\n  }\n  _createClass(Relu6, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tidy(function () {\n        return tfc.minimum(6.0, tfc.relu(x));\n      });\n    }\n  }]);\n  return Relu6;\n}(Activation);\n/** @nocollapse */\nRelu6.className = 'relu6';\nserialization.registerClass(Relu6);\n//* Linear activation (no-op) */\nexport var Linear = /*#__PURE__*/function (_Activation5) {\n  _inherits(Linear, _Activation5);\n  var _super6 = _createSuper(Linear);\n  function Linear() {\n    _classCallCheck(this, Linear);\n    return _super6.apply(this, arguments);\n  }\n  _createClass(Linear, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return x;\n    }\n  }]);\n  return Linear;\n}(Activation);\n/** @nocollapse */\nLinear.className = 'linear';\nserialization.registerClass(Linear);\n/**\n * Sigmoid activation function.\n */\nexport var Sigmoid = /*#__PURE__*/function (_Activation6) {\n  _inherits(Sigmoid, _Activation6);\n  var _super7 = _createSuper(Sigmoid);\n  function Sigmoid() {\n    _classCallCheck(this, Sigmoid);\n    return _super7.apply(this, arguments);\n  }\n  _createClass(Sigmoid, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.sigmoid(x);\n    }\n  }]);\n  return Sigmoid;\n}(Activation);\n/** @nocollapse */\nSigmoid.className = 'sigmoid';\nserialization.registerClass(Sigmoid);\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport var HardSigmoid = /*#__PURE__*/function (_Activation7) {\n  _inherits(HardSigmoid, _Activation7);\n  var _super8 = _createSuper(HardSigmoid);\n  function HardSigmoid() {\n    _classCallCheck(this, HardSigmoid);\n    return _super8.apply(this, arguments);\n  }\n  _createClass(HardSigmoid, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return K.hardSigmoid(x);\n    }\n  }]);\n  return HardSigmoid;\n}(Activation);\n/** @nocollapse */\nHardSigmoid.className = 'hardSigmoid';\nserialization.registerClass(HardSigmoid);\n/**\n * Softplus activation function.\n */\nexport var Softplus = /*#__PURE__*/function (_Activation8) {\n  _inherits(Softplus, _Activation8);\n  var _super9 = _createSuper(Softplus);\n  function Softplus() {\n    _classCallCheck(this, Softplus);\n    return _super9.apply(this, arguments);\n  }\n  _createClass(Softplus, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.softplus(x);\n    }\n  }]);\n  return Softplus;\n}(Activation);\n/** @nocollapse */\nSoftplus.className = 'softplus';\nserialization.registerClass(Softplus);\n/**\n * Softsign activation function.\n */\nexport var Softsign = /*#__PURE__*/function (_Activation9) {\n  _inherits(Softsign, _Activation9);\n  var _super10 = _createSuper(Softsign);\n  function Softsign() {\n    _classCallCheck(this, Softsign);\n    return _super10.apply(this, arguments);\n  }\n  _createClass(Softsign, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return K.softsign(x);\n    }\n  }]);\n  return Softsign;\n}(Activation);\n/** @nocollapse */\nSoftsign.className = 'softsign';\nserialization.registerClass(Softsign);\n/**\n * Hyperbolic tangent function.\n */\nexport var Tanh = /*#__PURE__*/function (_Activation10) {\n  _inherits(Tanh, _Activation10);\n  var _super11 = _createSuper(Tanh);\n  function Tanh() {\n    _classCallCheck(this, Tanh);\n    return _super11.apply(this, arguments);\n  }\n  _createClass(Tanh, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.tanh(x);\n    }\n  }]);\n  return Tanh;\n}(Activation);\n/** @nocollapse */\nTanh.className = 'tanh';\nserialization.registerClass(Tanh);\n/**\n * Softmax activation function\n */\nexport var Softmax = /*#__PURE__*/function (_Activation11) {\n  _inherits(Softmax, _Activation11);\n  var _super12 = _createSuper(Softmax);\n  function Softmax() {\n    _classCallCheck(this, Softmax);\n    return _super12.apply(this, arguments);\n  }\n  _createClass(Softmax, [{\n    key: \"apply\",\n    value:\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    function apply(x) {\n      var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      return tfc.softmax(x, axis);\n    }\n  }]);\n  return Softmax;\n}(Activation);\n/** @nocollapse */\nSoftmax.className = 'softmax';\nserialization.registerClass(Softmax);\n/**\n * Log softmax activation function\n */\nexport var LogSoftmax = /*#__PURE__*/function (_Activation12) {\n  _inherits(LogSoftmax, _Activation12);\n  var _super13 = _createSuper(LogSoftmax);\n  function LogSoftmax() {\n    _classCallCheck(this, LogSoftmax);\n    return _super13.apply(this, arguments);\n  }\n  _createClass(LogSoftmax, [{\n    key: \"apply\",\n    value:\n    /**\n     * Calculate the activation function of log softmax:\n     * log( exp(x_i) / sum(exp(x)) )\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    function apply(x) {\n      var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      return tfc.logSoftmax(x, axis);\n    }\n  }]);\n  return LogSoftmax;\n}(Activation);\n/** @nocollapse */\nLogSoftmax.className = 'logSoftmax';\nserialization.registerClass(LogSoftmax);\n/**\n * Swish activation function\n */\nexport var Swish = /*#__PURE__*/function (_Activation13) {\n  _inherits(Swish, _Activation13);\n  var _super14 = _createSuper(Swish);\n  function Swish() {\n    _classCallCheck(this, Swish);\n    return _super14.apply(this, arguments);\n  }\n  _createClass(Swish, [{\n    key: \"apply\",\n    value:\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param alpha Scaling factor for the sigmoid function.\n     * @returns a Tensor of the same shape as x\n     */\n    function apply(x) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return tidy(function () {\n        return tfc.mul(tfc.sigmoid(tfc.mul(x, alpha)), x);\n      });\n    }\n  }]);\n  return Swish;\n}(Activation);\n/** @nocollapse */\nSwish.className = 'swish';\nserialization.registerClass(Swish);\n/**\n * Mish activation function\n */\nexport var Mish = /*#__PURE__*/function (_Activation14) {\n  _inherits(Mish, _Activation14);\n  var _super15 = _createSuper(Mish);\n  function Mish() {\n    _classCallCheck(this, Mish);\n    return _super15.apply(this, arguments);\n  }\n  _createClass(Mish, [{\n    key: \"apply\",\n    value:\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @returns a Tensor of the same shape as x\n     */\n    function apply(x) {\n      return tidy(function () {\n        return tfc.mul(x, tfc.tanh(tfc.softplus(x)));\n      });\n    }\n  }]);\n  return Mish;\n}(Activation);\n/** @nocollapse */\nMish.className = 'mish';\nserialization.registerClass(Mish);\nexport function serializeActivation(activation) {\n  return activation.getClassName();\n}\nexport function deserializeActivation(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');\n}\nexport function getActivation(identifier) {\n  if (identifier == null) {\n    var config = {};\n    config['className'] = 'linear';\n    config['config'] = {};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === 'string') {\n    var _config = {};\n    _config['className'] = identifier;\n    _config['config'] = {};\n    return deserializeActivation(_config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","K","deserializeKerasObject","Activation","Serializable","Elu","x","alpha","elu","registerClass","Selu","selu","Relu","relu","Relu6","minimum","Linear","Sigmoid","sigmoid","HardSigmoid","hardSigmoid","Softplus","softplus","Softsign","softsign","Tanh","tanh","Softmax","axis","softmax","LogSoftmax","logSoftmax","Swish","mul","Mish","serializeActivation","activation","getClassName","deserializeActivation","config","customObjects","SerializationMap","getMap","classNameMap","getActivation","identifier"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\activations.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {ActivationIdentifier} from './keras_format/activation_config';\nimport {deserializeKerasObject} from './utils/generic_utils';\n\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport abstract class Activation extends serialization.Serializable {\n  abstract apply(tensor: Tensor, axis?: number): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'elu';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x: Input.\n   * @param alpha: Scaling factor the negative section.\n   * @return Output of the ELU activation.\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return K.elu(x, alpha);\n  }\n}\nserialization.registerClass(Elu);\n\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'selu';\n  apply(x: Tensor): Tensor {\n    return tfc.selu(x);\n  }\n}\nserialization.registerClass(Selu);\n\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu';\n  apply(x: Tensor): Tensor {\n    return tfc.relu(x);\n  }\n}\nserialization.registerClass(Relu);\n\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu6';\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n  }\n}\nserialization.registerClass(Relu6);\n\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n  /** @nocollapse */\n  static readonly className = 'linear';\n  apply(x: Tensor): Tensor {\n    return x;\n  }\n}\nserialization.registerClass(Linear);\n\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'sigmoid';\n  apply(x: Tensor): Tensor {\n    return tfc.sigmoid(x);\n  }\n}\nserialization.registerClass(Sigmoid);\n\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'hardSigmoid';\n  apply(x: Tensor): Tensor {\n    return K.hardSigmoid(x);\n  }\n}\nserialization.registerClass(HardSigmoid);\n\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softplus';\n  apply(x: Tensor): Tensor {\n    return tfc.softplus(x);\n  }\n}\nserialization.registerClass(Softplus);\n\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softsign';\n  apply(x: Tensor): Tensor {\n    return K.softsign(x);\n  }\n}\nserialization.registerClass(Softsign);\n\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n  /** @nocollapse */\n  static readonly className = 'tanh';\n  apply(x: Tensor): Tensor {\n    return tfc.tanh(x);\n  }\n}\nserialization.registerClass(Tanh);\n\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softmax';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.softmax(x, axis);\n  }\n}\nserialization.registerClass(Softmax);\n\n/**\n * Log softmax activation function\n */\nexport class LogSoftmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'logSoftmax';\n  /**\n   * Calculate the activation function of log softmax:\n   * log( exp(x_i) / sum(exp(x)) )\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.logSoftmax(x, axis);\n  }\n}\nserialization.registerClass(LogSoftmax);\n\n/**\n * Swish activation function\n */\nexport class Swish extends Activation {\n  /** @nocollapse */\n  static readonly className = 'swish';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param alpha Scaling factor for the sigmoid function.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return tidy(() => tfc.mul(tfc.sigmoid(tfc.mul(x, alpha)), x));\n  }\n}\nserialization.registerClass(Swish);\n\n/**\n * Mish activation function\n */\nexport class Mish extends Activation {\n  /** @nocollapse */\n  static readonly className = 'mish';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.mul(x, tfc.tanh(tfc.softplus(x))));\n  }\n}\nserialization.registerClass(Mish);\n\nexport function serializeActivation(activation: Activation): string {\n  return activation.getClassName();\n}\n\nexport function deserializeActivation(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Activation {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'activation');\n}\n\nexport function getActivation(identifier: ActivationIdentifier|\n                              serialization.ConfigDict|Activation): Activation {\n  if (identifier == null) {\n    const config: serialization.ConfigDict = {};\n    config['className'] = 'linear';\n    config['config'] = {};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === 'string') {\n    const config: serialization.ConfigDict = {};\n    config['className'] = identifier;\n    config['config'] = {};\n    return deserializeActivation(config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}