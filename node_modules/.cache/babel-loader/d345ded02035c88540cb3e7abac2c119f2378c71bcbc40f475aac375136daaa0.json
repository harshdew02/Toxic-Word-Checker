{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { gatherNdImpl } from './GatherNd_Impl';\nexport function gatherNd(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var params = inputs.params,\n    indices = inputs.indices;\n  var paramsSize = util.sizeFromShape(params.shape);\n  var indicesShape = indices.shape;\n  var sliceRank = indicesShape[indicesShape.length - 1];\n  var _backend_util$prepare = backend_util.prepareAndValidate(params, indices),\n    _backend_util$prepare2 = _slicedToArray(_backend_util$prepare, 4),\n    resultShape = _backend_util$prepare2[0],\n    numSlices = _backend_util$prepare2[1],\n    sliceSize = _backend_util$prepare2[2],\n    strides = _backend_util$prepare2[3];\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n  var indicesData = backend.data.get(indices.dataId).values;\n  var paramsBuf = backend.bufferSync(params);\n  var outBuf = gatherNdImpl(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\nexport var gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,QAAQ,EAA0EC,IAAI,QAAO,uBAAuB;AAI1I,SAAQC,YAAY,QAAO,iBAAiB;AAE5C,OAAM,SAAUC,QAAQ,CACpBC,IAAuD;EACzD,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,MAAM,GAAaF,MAAM,CAAzBE,MAAM;IAAEC,OAAO,GAAIH,MAAM,CAAjBG,OAAO;EAEtB,IAAMC,UAAU,GAAGR,IAAI,CAACS,aAAa,CAACH,MAAM,CAACI,KAAK,CAAC;EAEnD,IAAMC,YAAY,GAAGJ,OAAO,CAACG,KAAK;EAClC,IAAME,SAAS,GAAGD,YAAY,CAACA,YAAY,CAACE,MAAM,GAAG,CAAC,CAAC;EAEvD,4BACIf,YAAY,CAACgB,kBAAkB,CAACR,MAAM,EAAEC,OAAO,CAAC;IAAA;IAD7CQ,WAAW;IAAEC,SAAS;IAAEC,SAAS;IAAEC,OAAO;EAEjD,IAAIF,SAAS,KAAK,CAAC,EAAE;IACnB,OAAOX,OAAO,CAACc,cAAc,CAACJ,WAAW,EAAET,MAAM,CAACc,KAAK,EAAE,EAAE,CAAC;;EAG9D,IAAMC,WAAW,GAAGhB,OAAO,CAACiB,IAAI,CAACC,GAAG,CAAChB,OAAO,CAACiB,MAAM,CAAC,CAACC,MAAoB;EACzE,IAAMC,SAAS,GAAGrB,OAAO,CAACsB,UAAU,CAAkBrB,MAAM,CAAC;EAC7D,IAAMsB,MAAM,GAAG3B,YAAY,CACvBoB,WAAW,EAAEK,SAAS,EAAEpB,MAAM,CAACc,KAAK,EAAEJ,SAAS,EAAEJ,SAAS,EAAEK,SAAS,EACrEC,OAAO,EAAEZ,MAAM,CAACI,KAAK,EAAEF,UAAU,CAAC;EAEtC,OAAOH,OAAO,CAACc,cAAc,CAACJ,WAAW,EAAET,MAAM,CAACc,KAAK,EAAEQ,MAAM,CAACH,MAAM,CAAC;AACzE;AAEA,OAAO,IAAMI,cAAc,GAAiB;EAC1CC,UAAU,EAAE/B,QAAQ;EACpBgC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE9B;CACb","names":["backend_util","GatherNd","util","gatherNdImpl","gatherNd","args","inputs","backend","params","indices","paramsSize","sizeFromShape","shape","indicesShape","sliceRank","length","prepareAndValidate","resultShape","numSlices","sliceSize","strides","makeTensorInfo","dtype","indicesData","data","get","dataId","values","paramsBuf","bufferSync","outBuf","gatherNdConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\GatherNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}