{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util';\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport var MPRandGauss = /*#__PURE__*/function () {\n  function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {\n    _classCallCheck(this, MPRandGauss);\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    var seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  /** Returns next sample from a Gaussian distribution. */\n  _createClass(MPRandGauss, [{\n    key: \"nextValue\",\n    value: function nextValue() {\n      if (!isNaN(this.nextVal)) {\n        var value = this.nextVal;\n        this.nextVal = NaN;\n        return value;\n      }\n      var resultX, resultY;\n      var isValid = false;\n      while (!isValid) {\n        var v1 = void 0,\n          v2 = void 0,\n          s = void 0;\n        do {\n          v1 = 2 * this.random() - 1;\n          v2 = 2 * this.random() - 1;\n          s = v1 * v1 + v2 * v2;\n        } while (s >= 1 || s === 0);\n        var mul = Math.sqrt(-2.0 * Math.log(s) / s);\n        resultX = this.mean + this.stdDev * v1 * mul;\n        resultY = this.mean + this.stdDev * v2 * mul;\n        if (!this.truncated || this.isValidTruncated(resultX)) {\n          isValid = true;\n        }\n      }\n      if (!this.truncated || this.isValidTruncated(resultY)) {\n        this.nextVal = this.convertValue(resultY);\n      }\n      return this.convertValue(resultX);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n  }, {\n    key: \"convertValue\",\n    value: function convertValue(value) {\n      if (this.dtype == null || this.dtype === 'float32') {\n        return value;\n      }\n      return Math.round(value);\n    }\n    /** Returns true if less than 2-standard-deviations from the mean. */\n  }, {\n    key: \"isValidTruncated\",\n    value: function isValidTruncated(value) {\n      return value <= this.upper && value >= this.lower;\n    }\n  }]);\n  return MPRandGauss;\n}();\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport var RandGamma = /*#__PURE__*/function () {\n  function RandGamma(alpha, beta, dtype, seed) {\n    _classCallCheck(this, RandGamma);\n    this.alpha = alpha;\n    this.beta = 1 / beta; // convert rate to scale parameter\n    this.dtype = dtype;\n    var seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  /** Returns next sample from a gamma distribution. */\n  _createClass(RandGamma, [{\n    key: \"nextValue\",\n    value: function nextValue() {\n      var x2, v0, v1, x, u, v;\n      while (true) {\n        do {\n          x = this.randn.nextValue();\n          v = 1 + this.c * x;\n        } while (v <= 0);\n        v *= v * v;\n        x2 = x * x;\n        v0 = 1 - 0.331 * x2 * x2;\n        v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n        u = this.randu();\n        if (u < v0 || Math.log(u) < v1) {\n          break;\n        }\n      }\n      v = 1 / this.beta * this.d * v;\n      if (this.alpha < 1) {\n        v *= Math.pow(this.randu(), 1 / this.alpha);\n      }\n      return this.convertValue(v);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n  }, {\n    key: \"convertValue\",\n    value: function convertValue(value) {\n      if (this.dtype === 'float32') {\n        return value;\n      }\n      return Math.round(value);\n    }\n  }]);\n  return RandGamma;\n}();\nexport var UniformRandom = /*#__PURE__*/function () {\n  function UniformRandom() {\n    var _this = this;\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var dtype = arguments.length > 2 ? arguments[2] : undefined;\n    var seed = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, UniformRandom);\n    /** Handles proper rounding for non floating point numbers. */\n    this.canReturnFloat = function () {\n      return _this.dtype == null || _this.dtype === 'float32';\n    };\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\"The difference between \".concat(min, \" - \").concat(max, \" <= 1 and dtype is not float\"));\n    }\n    this.random = seedrandom.alea(seed);\n  }\n  _createClass(UniformRandom, [{\n    key: \"convertValue\",\n    value: function convertValue(value) {\n      if (this.canReturnFloat()) {\n        return value;\n      }\n      return Math.round(value);\n    }\n  }, {\n    key: \"nextValue\",\n    value: function nextValue() {\n      return this.convertValue(this.min + this.range * this.random());\n    }\n  }]);\n  return UniformRandom;\n}();\nexport function jarqueBeraNormalityTest(values) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  var n = values.length;\n  var s = skewness(values);\n  var k = kurtosis(values);\n  var jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n  // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n  var CHI_SQUARE_2DEG = 5.991;\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(\"Invalid p-value for JB: \".concat(jb));\n  }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  var actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\nfunction mean(values) {\n  var sum = 0;\n  for (var i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\nfunction standardDeviation(values, mean) {\n  var squareDiffSum = 0;\n  for (var i = 0; i < values.length; i++) {\n    var diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n  return Math.sqrt(squareDiffSum / values.length);\n}\nfunction kurtosis(values) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  var valuesMean = mean(values);\n  var n = values.length;\n  var sum2 = 0;\n  var sum4 = 0;\n  for (var i = 0; i < n; i++) {\n    var v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);\n}\nfunction skewness(values) {\n  // https://en.wikipedia.org/wiki/Skewness\n  var valuesMean = mean(values);\n  var n = values.length;\n  var sum2 = 0;\n  var sum3 = 0;\n  for (var i = 0; i < n; i++) {\n    var v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);\n}","map":{"version":3,"mappings":"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","names":["seedrandom","expectNumbersClose","testEpsilon","MPRandGauss","mean","stdDeviation","dtype","truncated","seed","stdDev","nextVal","NaN","upper","lower","seedValue","Math","random","alea","toString","isNaN","value","resultX","resultY","isValid","v1","v2","s","mul","sqrt","log","isValidTruncated","convertValue","round","RandGamma","alpha","beta","randu","randn","d","c","x2","v0","x","u","v","nextValue","pow","UniformRandom","min","max","range","canReturnFloat","Error","jarqueBeraNormalityTest","values","n","length","skewness","k","kurtosis","jb","CHI_SQUARE_2DEG","expectArrayInMeanStdRange","actual","expectedMean","expectedStdDev","epsilon","actualMean","standardDeviation","sum","i","squareDiffSum","diff","valuesMean","sum2","sum4","sum3"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\rand_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nimport {expectNumbersClose, testEpsilon} from '../test_util';\nimport {TypedArray} from '../types';\n\nexport interface RandomBase {\n  nextValue(): number;\n}\n\nexport interface RandomGamma {\n  nextValue(): number;\n}\n\nexport interface RandNormalDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\nexport interface RandGammaDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss implements RandomBase {\n  private mean: number;\n  private stdDev: number;\n  private nextVal: number;\n  private dtype?: keyof RandNormalDataTypes;\n  private truncated?: boolean;\n  private upper?: number;\n  private lower?: number;\n  private random: seedrandom.prng;\n\n  constructor(\n      mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes,\n      truncated?: boolean, seed?: number) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  /** Returns next sample from a Gaussian distribution. */\n  public nextValue(): number {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX: number, resultY: number;\n    let isValid = false;\n    while (!isValid) {\n      let v1: number, v2: number, s: number;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  private isValidTruncated(value: number): boolean {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma implements RandomGamma {\n  private alpha: number;\n  private beta: number;\n  private d: number;\n  private c: number;\n  private dtype?: keyof RandGammaDataTypes;\n  private randu: seedrandom.prng;\n  private randn: MPRandGauss;\n\n  constructor(\n      alpha: number, beta: number, dtype: keyof RandGammaDataTypes,\n      seed?: number) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;  // convert rate to scale parameter\n    this.dtype = dtype;\n\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + (2 / 3);\n    } else {\n      this.d = alpha - (1 / 3);\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n\n  /** Returns next sample from a gamma distribution. */\n  public nextValue(): number {\n    let x2: number, v0: number, v1: number, x: number, u: number, v: number;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + (this.c * x);\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - (0.331 * x2 * x2);\n      v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = (1 / this.beta) * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\n\nexport class UniformRandom implements RandomBase {\n  private min: number;\n  private range: number;\n  private random: seedrandom.prng;\n  private dtype?: keyof RandNormalDataTypes;\n\n  constructor(\n      min = 0, max = 1, dtype?: keyof RandNormalDataTypes,\n      seed?: string|number) {\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\n          `The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n\n  /** Handles proper rounding for non floating point numbers. */\n  private canReturnFloat = () =>\n      (this.dtype == null || this.dtype === 'float32');\n\n  private convertValue(value: number): number {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\n\nexport function jarqueBeraNormalityTest(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n  // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n  const CHI_SQUARE_2DEG = 5.991;\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\n\nexport function expectArrayInMeanStdRange(\n    actual: TypedArray|number[], expectedMean: number, expectedStdDev: number,\n    epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(\n      standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values: TypedArray|number[]) {\n  let sum = 0;\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\n\nfunction standardDeviation(values: TypedArray|number[], mean: number) {\n  let squareDiffSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n  return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\n\nfunction skewness(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n  return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}