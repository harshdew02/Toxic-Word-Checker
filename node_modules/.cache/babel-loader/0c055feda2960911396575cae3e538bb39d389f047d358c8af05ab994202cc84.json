{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat as _concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport var TensorArray = /*#__PURE__*/function () {\n  function TensorArray(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    _classCallCheck(this, TensorArray);\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n  _createClass(TensorArray, [{\n    key: \"id\",\n    get: function get() {\n      return this.idTensor.id;\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose(keepIds) {\n      this.tensors.forEach(function (tensor) {\n        if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n          tensor.tensor.dispose();\n        }\n      });\n      this.tensors = [];\n      this.closed_ = true;\n      this.idTensor.dispose();\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n  }, {\n    key: \"read\",\n    value: function read(index) {\n      if (this.closed_) {\n        throw new Error(\"TensorArray \".concat(this.name, \" has already been closed.\"));\n      }\n      if (index < 0 || index >= this.size()) {\n        throw new Error(\"Tried to read from index \".concat(index, \", but array size is: \").concat(this.size()));\n      }\n      var tensorWithState = this.tensors[index];\n      if (tensorWithState.cleared) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not read index \").concat(index, \" twice because it was cleared after a previous read \") + \"(perhaps try setting clear_after_read = false?).\");\n      }\n      if (this.clearAfterRead) {\n        tensorWithState.cleared = true;\n      }\n      tensorWithState.read = true;\n      return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n  }, {\n    key: \"readMany\",\n    value: function readMany(indices) {\n      var _this = this;\n      return indices.map(function (index) {\n        return _this.read(index);\n      });\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n  }, {\n    key: \"write\",\n    value: function write(index, tensor) {\n      if (this.closed_) {\n        throw new Error(\"TensorArray \".concat(this.name, \" has already been closed.\"));\n      }\n      if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n        throw new Error(\"Tried to write to index \".concat(index, \", but array is not resizeable and size is: \").concat(this.maxSize));\n      }\n      var t = this.tensors[index] || {};\n      if (tensor.dtype !== this.dtype) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \",\\n          because the value dtype is \").concat(tensor.dtype, \", but TensorArray dtype is \").concat(this.dtype, \".\"));\n      }\n      // Set the shape for the first time write to unknow shape tensor array\n      if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n        this.elementShape = tensor.shape;\n      }\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, \"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \".\"));\n      if (t.read) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \", because it has already been read.\"));\n      }\n      if (t.written) {\n        throw new Error(\"TensorArray \".concat(this.name, \": Could not write to TensorArray index \").concat(index, \", because it has already been written.\"));\n      }\n      t.tensor = tensor;\n      keep(tensor);\n      t.written = true;\n      this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n  }, {\n    key: \"writeMany\",\n    value: function writeMany(indices, tensors) {\n      var _this2 = this;\n      if (indices.length !== tensors.length) {\n        throw new Error(\"TensorArray \".concat(this.name, \": could not write multiple tensors,\") + \"because the index size: \".concat(indices.length, \" is not the same as tensors size: \").concat(tensors.length, \".\"));\n      }\n      indices.forEach(function (i, index) {\n        return _this2.write(i, tensors[index]);\n      });\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n  }, {\n    key: \"gather\",\n    value: function gather(indices, dtype) {\n      if (!!dtype && dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but gather requested dtype \").concat(dtype));\n      }\n      if (!indices) {\n        indices = [];\n        for (var i = 0; i < this.size(); i++) {\n          indices.push(i);\n        }\n      } else {\n        indices = indices.slice(0, this.size());\n      }\n      if (indices.length === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      }\n      // Read all the PersistentTensors into a vector to keep track of\n      // their memory.\n      var tensors = this.readMany(indices);\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n      return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n  }, {\n    key: \"concat\",\n    value: function concat(dtype) {\n      if (!!dtype && dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but concat requested dtype \").concat(dtype));\n      }\n      if (this.size() === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      }\n      var indices = [];\n      for (var i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n      // Collect all the tensors from the tensors array.\n      var tensors = this.readMany(indices);\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, \"TensorArray shape mismatch: tensor array shape (\".concat(this.elementShape, \") vs first tensor shape (\").concat(tensors[0].shape, \")\"));\n      return _concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices nummber[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n  }, {\n    key: \"scatter\",\n    value: function scatter(indices, tensor) {\n      if (tensor.dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but tensor has dtype \").concat(tensor.dtype));\n      }\n      if (indices.length !== tensor.shape[0]) {\n        throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \".concat(indices.length, \" vs. \").concat(tensor.shape[0]));\n      }\n      var maxIndex = Math.max.apply(Math, _toConsumableArray(indices));\n      if (!this.dynamicSize && maxIndex >= this.maxSize) {\n        throw new Error(\"Max index must be < array size (\".concat(maxIndex, \"  vs. \").concat(this.maxSize, \")\"));\n      }\n      this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n  }, {\n    key: \"split\",\n    value: function split(length, tensor) {\n      var _this3 = this;\n      if (tensor.dtype !== this.dtype) {\n        throw new Error(\"TensorArray dtype is \".concat(this.dtype, \" but tensor has dtype \").concat(tensor.dtype));\n      }\n      var totalLength = 0;\n      var cumulativeLengths = length.map(function (len) {\n        totalLength += len;\n        return totalLength;\n      });\n      if (totalLength !== tensor.shape[0]) {\n        throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \".concat(totalLength, \", and tensor's shape is: \").concat(tensor.shape));\n      }\n      if (!this.dynamicSize && length.length !== this.maxSize) {\n        throw new Error(\"TensorArray's size is not equal to the size of lengths (\".concat(this.maxSize, \" vs. \").concat(length.length, \"), \") + 'and the TensorArray is not marked as dynamically resizeable');\n      }\n      var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n      var tensors = [];\n      tidy(function () {\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (var i = 0; i < length.length; ++i) {\n          var previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n          var _indices = [0, previousLength, 0];\n          var sizes = [1, length[i], elementPerRow];\n          tensors[i] = reshape(slice(tensor, _indices, sizes), _this3.elementShape);\n        }\n        return tensors;\n      });\n      var indices = [];\n      for (var i = 0; i < length.length; i++) {\n        indices[i] = i;\n      }\n      this.writeMany(indices, tensors);\n    }\n  }]);\n  return TensorArray;\n}();","map":{"version":3,"mappings":"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","names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","TensorArray","name","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","idTensor","id","closed_","keepIds","tensors","forEach","has","dispose","length","index","Error","size","tensorWithState","cleared","read","indices","map","t","shape","written","i","write","push","readMany","maxIndex","Math","max","writeMany","totalLength","cumulativeLengths","len","elementPerRow","previousLength","sizes"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\tensor_array.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}