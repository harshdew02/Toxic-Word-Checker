{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  var resolvedPromise = 0;\n  var registerMonitor = function registerMonitor(promise) {\n    promise.then(function (value) {\n      var fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, function () {\n      return 'promises must be a none empty array';\n    });\n  }\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, function () {\n      return \"Progress fraction must be in range [0, 1], but \" + \"got startFraction \".concat(startFraction);\n    });\n    assert(endFraction >= 0 && endFraction <= 1, function () {\n      return \"Progress fraction must be in range [0, 1], but \" + \"got endFraction \".concat(endFraction);\n    });\n    assert(endFraction >= startFraction, function () {\n      return \"startFraction must be no more than endFraction, but \" + \"got startFraction \".concat(startFraction, \" and endFraction \") + \"\".concat(endFraction);\n    });\n  }\n  return Promise.all(promises.map(registerMonitor));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,SAAS;AAI9B;;;;;;;;AAQA,OAAM,SAAUC,uBAAuB,CACnCC,QAAiC,EAAEC,UAA8B,EACjEC,aAAsB,EAAEC,WAAoB;EAC9CC,aAAa,CAACJ,QAAQ,CAAC;EACvBE,aAAa,GAAGA,aAAa,IAAI,IAAI,GAAG,CAAC,GAAGA,aAAa;EACzDC,WAAW,GAAGA,WAAW,IAAI,IAAI,GAAG,CAAC,GAAGA,WAAW;EACnDE,aAAa,CAACH,aAAa,EAAEC,WAAW,CAAC;EACzC,IAAIG,eAAe,GAAG,CAAC;EAEvB,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,OAAoB,EAAI;IAC/CA,OAAO,CAACC,IAAI,CAAC,eAAK,EAAG;MACnB,IAAMC,QAAQ,GAAGR,aAAa,GAC1B,EAAEI,eAAe,GAAGN,QAAQ,CAACW,MAAM,IAAIR,WAAW,GAAGD,aAAa,CAAC;MACvE;MACAD,UAAU,CAACS,QAAQ,CAAC;MACpB,OAAOE,KAAK;IACd,CAAC,CAAC;IACF,OAAOJ,OAAO;EAChB,CAAC;EAED,SAASJ,aAAa,CAACJ,QAAiC;IACtDF,MAAM,CACFE,QAAQ,IAAI,IAAI,IAAIa,KAAK,CAACC,OAAO,CAACd,QAAQ,CAAC,IAAIA,QAAQ,CAACW,MAAM,GAAG,CAAC,EAClE;MAAA,OAAM,qCAAqC;IAAA,EAAC;EAClD;EAEA,SAASN,aAAa,CAACH,aAAqB,EAAEC,WAAmB;IAC/DL,MAAM,CACFI,aAAa,IAAI,CAAC,IAAIA,aAAa,IAAI,CAAC,EACxC;MAAA,OAAM,gFACmBA,aAAa,CAAE;IAAA,EAAC;IAC7CJ,MAAM,CACFK,WAAW,IAAI,CAAC,IAAIA,WAAW,IAAI,CAAC,EACpC;MAAA,OAAM,8EACiBA,WAAW,CAAE;IAAA,EAAC;IACzCL,MAAM,CACFK,WAAW,IAAID,aAAa,EAC5B;MAAA,OAAM,qFACmBA,aAAa,sBAAmB,aAClDC,WAAW,CAAE;IAAA,EAAC;EAC3B;EAEA,OAAOY,OAAO,CAACC,GAAG,CAAChB,QAAQ,CAACiB,GAAG,CAACV,eAAe,CAAC,CAAC;AACnD","names":["assert","monitorPromisesProgress","promises","onProgress","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","registerMonitor","promise","then","fraction","length","value","Array","isArray","Promise","all","map"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\progress.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../util';\n\nimport {OnProgressCallback} from './types';\n\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(\n    promises: Array<Promise<{}|void>>, onProgress: OnProgressCallback,\n    startFraction?: number, endFraction?: number) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = (promise: Promise<{}>) => {\n    promise.then(value => {\n      const fraction = startFraction +\n          ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises: Array<Promise<{}|void>>): void {\n    assert(\n        promises != null && Array.isArray(promises) && promises.length > 0,\n        () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction: number, endFraction: number): void {\n    assert(\n        startFraction >= 0 && startFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n    assert(\n        endFraction >= 0 && endFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n    assert(\n        endFraction >= startFraction,\n        () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}