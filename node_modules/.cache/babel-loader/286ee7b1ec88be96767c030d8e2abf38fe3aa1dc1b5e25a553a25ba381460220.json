{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x,\n    filter = inputs.filter;\n  var strides = attrs.strides,\n    pad = attrs.pad,\n    dilations = attrs.dilations,\n    dimRoundingMode = attrs.dimRoundingMode;\n  var $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n    return 'Error in depthwiseConv2d: Either strides or dilations must be ' + \"1. Got strides \".concat(strides, \" and dilations '\").concat($dilations, \"'\");\n  });\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  var program;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  var customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\nexport var depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,qBAAqB,EAA2DC,GAAG,EAA4BC,IAAI,QAAO,uBAAuB;AAGvK,SAAQC,sBAAsB,QAAO,uBAAuB;AAC5D,SAAQC,4BAA4B,QAAO,8BAA8B;AAEzE,OAAM,SAAUC,qBAAqB,CAACC,IAIrC;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,CAAC,GAAYH,MAAM,CAAnBG,CAAC;IAAEC,MAAM,GAAIJ,MAAM,CAAhBI,MAAM;EAChB,IAAOC,OAAO,GAAqCH,KAAK,CAAjDG,OAAO;IAAEC,GAAG,GAAgCJ,KAAK,CAAxCI,GAAG;IAAEC,SAAS,GAAqBL,KAAK,CAAnCK,SAAS;IAAEC,eAAe,GAAIN,KAAK,CAAxBM,eAAe;EAE/C,IAAIC,UAAU,GAAGF,SAAS;EAC1B,IAAIE,UAAU,IAAI,IAAI,EAAE;IACtBA,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAGrBd,IAAI,CAACe,MAAM,CACPlB,YAAY,CAACmB,8BAA8B,CAACN,OAAO,EAAEI,UAAU,CAAC,EAChE;IAAA,OAAM,gEAAgE,4BAChDJ,OAAO,6BAAmBI,UAAU,MAAG;EAAA,EAAC;EAElE,IAAMG,QAAQ,GAAGpB,YAAY,CAACqB,iBAAiB,CAC3CV,CAAC,CAACW,KAAyC,EAC3CV,MAAM,CAACU,KAAyC,EAAET,OAAO,EAAEI,UAAU,EACrEH,GAAG,EAAEE,eAAe,EAAE,IAAI,CAAC,gBAAgB;EAE/C,IAAIO,OAA4D;EAChE,IAAIrB,GAAG,EAAE,CAACsB,OAAO,CAAC,0BAA0B,CAAC,IAAIJ,QAAQ,CAACK,WAAW,IAAI,CAAC,IACtEL,QAAQ,CAACM,WAAW,GAAGN,QAAQ,CAACO,UAAU,KAAK,CAAC,EAAE;IACpDJ,OAAO,GAAG,IAAIlB,4BAA4B,CAACe,QAAQ,CAAC;GACrD,MAAM;IACLG,OAAO,GAAG,IAAInB,sBAAsB,CAACgB,QAAQ,CAAC;;EAEhD,IAAMQ,YAAY,GAAG,CACnB,CAACR,QAAQ,CAACS,OAAO,CAACC,GAAG,EAAEV,QAAQ,CAACS,OAAO,CAACE,IAAI,CAAC,EAC7C,CAACX,QAAQ,CAACY,YAAY,EAAEZ,QAAQ,CAACK,WAAW,CAAC,EAC7C,CAACL,QAAQ,CAACa,cAAc,EAAEb,QAAQ,CAACc,aAAa,CAAC,EACjD,CAACd,QAAQ,CAACe,QAAQ,EAAEf,QAAQ,CAACgB,OAAO,CAAC,CACtC;EACD,OAAO3B,OAAO,CAAC4B,eAAe,CAACd,OAAO,EAAE,CAACZ,CAAC,EAAEC,MAAM,CAAC,EAAE,SAAS,EAAEgB,YAAY,CAAC;AAC/E;AAEA,OAAO,IAAMU,2BAA2B,GAAiB;EACvDC,UAAU,EAAEtC,qBAAqB;EACjCuC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEnC;CACb","names":["backend_util","DepthwiseConv2dNative","env","util","DepthwiseConv2DProgram","DepthwiseConvPacked2DProgram","depthwiseConv2dNative","args","inputs","backend","attrs","x","filter","strides","pad","dilations","dimRoundingMode","$dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","shape","program","getBool","strideWidth","outChannels","inChannels","customValues","padInfo","top","left","strideHeight","dilationHeight","dilationWidth","inHeight","inWidth","runWebGLProgram","depthwiseConv2dNativeConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\DepthwiseConv2dNative.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}