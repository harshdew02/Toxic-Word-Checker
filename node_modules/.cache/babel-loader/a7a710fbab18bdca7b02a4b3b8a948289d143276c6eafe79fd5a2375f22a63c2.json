{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { TopK } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction topk_(x) {\n  var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var sorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  var lastDim = $x.shape[$x.shape.length - 1];\n  if (k < 0) {\n    throw new Error(\"'k' passed to topk() must be >= 0 but got \".concat(k));\n  }\n  if (k > lastDim) {\n    throw new Error(\"'k' passed to topk() must be <= the last dimension (\".concat(lastDim, \") \") + \"but got \".concat(k));\n  }\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    k: k,\n    sorted: sorted\n  };\n  var _ENGINE$runKernel = ENGINE.runKernel(TopK, inputs, attrs),\n    _ENGINE$runKernel2 = _slicedToArray(_ENGINE$runKernel, 2),\n    values = _ENGINE$runKernel2[0],\n    indices = _ENGINE$runKernel2[1];\n  return {\n    values: values,\n    indices: indices\n  };\n}\nexport var topk = /* @__PURE__ */op({\n  topk_: topk_\n});","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,QAA8B,iBAAiB;AAI3D,SAAQC,eAAe,QAAO,oBAAoB;AAGlD,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,KAAK,CACVC,CAAe,EAAsB;EAAA,IAApBC,CAAC,uEAAG,CAAC;EAAA,IAAEC,MAAM,uEAAG,IAAI;EACvC,IAAMC,EAAE,GAAGN,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC;EAC1C,IAAIG,EAAE,CAACC,IAAI,KAAK,CAAC,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;;EAEvE,IAAMC,OAAO,GAAGH,EAAE,CAACI,KAAK,CAACJ,EAAE,CAACI,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;EAE7C,IAAIP,CAAC,GAAG,CAAC,EAAE;IACT,MAAM,IAAII,KAAK,qDAA8CJ,CAAC,EAAG;;EAGnE,IAAIA,CAAC,GAAGK,OAAO,EAAE;IACf,MAAM,IAAID,KAAK,CACX,8DAAuDC,OAAO,4BACnDL,CAAC,CAAE,CAAC;;EAGrB,IAAMQ,MAAM,GAAe;IAACT,CAAC,EAAEG;EAAE,CAAC;EAClC,IAAMO,KAAK,GAAc;IAACT,CAAC,EAADA,CAAC;IAAEC,MAAM,EAANA;EAAM,CAAC;EAEpC,wBAA0BP,MAAM,CAACgB,SAAS,CACtCf,IAAI,EAAEa,MAAmC,EACzCC,KAAgC,CAAW;IAAA;IAFxCE,MAAM;IAAEC,OAAO;EAItB,OAAO;IAACD,MAAM,EAANA,MAAM;IAAEC,OAAO,EAAPA;EAAO,CAAC;AAC1B;AAEA,OAAO,IAAMC,IAAI,GAAG,eAAgBhB,EAAE,CAAC;EAACC,KAAK,EAALA;AAAK,CAAC,CAAC","names":["ENGINE","TopK","convertToTensor","op","topk_","x","k","sorted","$x","rank","Error","lastDim","shape","length","inputs","attrs","runKernel","values","indices","topk"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\topk.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {TopK, TopKAttrs, TopKInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction topk_<T extends Tensor>(\n    x: T|TensorLike, k = 1, sorted = true): {values: T, indices: T} {\n  const $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n\n  if (k < 0) {\n    throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);\n  }\n\n  if (k > lastDim) {\n    throw new Error(\n        `'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\n        `but got ${k}`);\n  }\n\n  const inputs: TopKInputs = {x: $x};\n  const attrs: TopKAttrs = {k, sorted};\n\n  const [values, indices] = ENGINE.runKernel(\n      TopK, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap) as [T, T];\n\n  return {values, indices};\n}\n\nexport const topk = /* @__PURE__ */ op({topk_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}