{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var ResizeNearestNeigborBackpropProgram = /*#__PURE__*/_createClass(function ResizeNearestNeigborBackpropProgram(dyShape, inputShape, alignCorners) {\n  _classCallCheck(this, ResizeNearestNeigborBackpropProgram);\n  this.variableNames = ['dy'];\n  this.outputShape = [];\n  this.outputShape = inputShape;\n  var _inputShape = _slicedToArray(inputShape, 3),\n    xHeight = _inputShape[1],\n    xWidth = _inputShape[2];\n  var _dyShape = _slicedToArray(dyShape, 3),\n    yHeight = _dyShape[1],\n    yWidth = _dyShape[2];\n  // In the backwards pass, we want to find the pixels that were generated for\n  // each pixel in the input image the forward pass and add the corresponding\n  // coefficient from dy to the gradient (with some interpolation).\n  var effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n  var effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n  var heightScale = effectiveXSize[0] / effectiveYSize[0];\n  var widthScale = effectiveXSize[1] / effectiveYSize[1];\n  var invHeightScale = 1 / heightScale;\n  var invWidthScale = 1 / widthScale;\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  var winHeight = Math.ceil(invHeightScale) * 2 + 2;\n  var winWidth = Math.ceil(invWidthScale) * 2 + 2;\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\".concat(heightScale, \");\\n        const float widthScale = float(\").concat(widthScale, \");\\n\\n        const float invHeightScale = float(\").concat(invHeightScale, \");\\n        const float invWidthScale = float(\").concat(invWidthScale, \");\\n\\n        const int winHeight = int(\").concat(winHeight, \");\\n        const int winWidth = int(\").concat(winWidth, \");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \").concat(yHeight, \") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \").concat(yWidth, \") {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(\").concat(effectiveXSize[0], \") *\\n                (float(dyR) / float(\").concat(effectiveYSize[0], \"));\\n\\n            float sourceFracCol =\\n                float(\").concat(effectiveXSize[1], \") *\\n                  (float(dyC) / float(\").concat(effectiveYSize[1], \"));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(\").concat(xHeight, \") - 1),\\n                \").concat(alignCorners, \" ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(\").concat(xWidth, \") - 1),\\n                \").concat(alignCorners, \" ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;;;;;AAmBA,WAAaA,mCAAmC,6BAK9C,6CACIC,OAAyC,EACzCC,UAA4C,EAAEC,YAAqB;EAAA;EANvE,kBAAa,GAAG,CAAC,IAAI,CAAC;EACtB,gBAAW,GAAa,EAAE;EAMxB,IAAI,CAACC,WAAW,GAAGF,UAAU;EAC7B,iCAA8BA,UAAU;IAA/BG,OAAO;IAAEC,MAAM;EACxB,8BAA4BL,OAAO;IAA1BM,OAAO;IAAEC,MAAM;EAExB;EACA;EACA;EAEA,IAAMC,cAAc,GAAqB,CACtCN,YAAY,IAAII,OAAO,GAAG,CAAC,GAAIF,OAAO,GAAG,CAAC,GAAGA,OAAO,EACpDF,YAAY,IAAIK,MAAM,GAAG,CAAC,GAAIF,MAAM,GAAG,CAAC,GAAGA,MAAM,CACnD;EAED,IAAMI,cAAc,GAAqB,CACtCP,YAAY,IAAII,OAAO,GAAG,CAAC,GAAIA,OAAO,GAAG,CAAC,GAAGA,OAAO,EACpDJ,YAAY,IAAIK,MAAM,GAAG,CAAC,GAAIA,MAAM,GAAG,CAAC,GAAGA,MAAM,CACnD;EAED,IAAMG,WAAW,GAAGF,cAAc,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC,CAAC,CAAC;EACzD,IAAME,UAAU,GAAGH,cAAc,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC,CAAC,CAAC;EAExD,IAAMG,cAAc,GAAG,CAAC,GAAGF,WAAW;EACtC,IAAMG,aAAa,GAAG,CAAC,GAAGF,UAAU;EAEpC;EACA;EACA,IAAMG,SAAS,GAAIC,IAAI,CAACC,IAAI,CAACJ,cAAc,CAAC,GAAG,CAAC,GAAI,CAAC;EACrD,IAAMK,QAAQ,GAAIF,IAAI,CAACC,IAAI,CAACH,aAAa,CAAC,GAAG,CAAC,GAAI,CAAC;EAEnD,IAAI,CAACK,QAAQ,6QAUyBR,WAAW,wDACZC,UAAU,8DAENC,cAAc,2DACfC,aAAa,qDAErBC,SAAS,kDACVG,QAAQ,skBAcTX,OAAO,qRAQLC,MAAM,mHAKpBC,cAAc,CAAC,CAAC,CAAC,sDACDC,cAAc,CAAC,CAAC,CAAC,6EAG/BD,cAAc,CAAC,CAAC,CAAC,wDACDC,cAAc,CAAC,CAAC,CAAC,2FAG7BL,OAAO,sCACjBF,YAAY,0LAIFG,MAAM,sCAChBH,YAAY,uVAYzB;AACH,CAAC","names":["ResizeNearestNeigborBackpropProgram","dyShape","inputShape","alignCorners","outputShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","invHeightScale","invWidthScale","winHeight","Math","ceil","winWidth","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\resize_nearest_neighbor_backprop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}