{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var dims = attrs.dims;\n  assertNotComplex(x, 'reverse');\n  var xRank = x.shape.length;\n  var $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x: x\n      },\n      backend: backend\n    });\n  }\n  var outBuf = new TensorBuffer(x.shape, x.dtype);\n  var xBuf = backend.bufferSync(x);\n  var _loop = function _loop() {\n    var outLoc = outBuf.indexToLoc(i);\n    var inLoc = outLoc.slice();\n    $dims.forEach(function (d) {\n      return inLoc[d] = x.shape[d] - 1 - inLoc[d];\n    });\n    outBuf.set.apply(outBuf, [xBuf.get.apply(xBuf, _toConsumableArray(inLoc))].concat(_toConsumableArray(outLoc)));\n  };\n  for (var i = 0; i < outBuf.size; i++) {\n    _loop();\n  }\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport var reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAO,EAA+BC,YAAY,EAAcC,IAAI,QAAO,uBAAuB;AAGpI,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,QAAQ,QAAO,YAAY;AAEnC,OAAM,SAAUC,OAAO,CACnBC,IACyE;EAE3E,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,CAAC,GAAIH,MAAM,CAAXG,CAAC;EACR,IAAOC,IAAI,GAAIF,KAAK,CAAbE,IAAI;EAEXR,gBAAgB,CAACO,CAAC,EAAE,SAAS,CAAC;EAE9B,IAAME,KAAK,GAAGF,CAAC,CAACG,KAAK,CAACC,MAAM;EAE5B,IAAMC,KAAK,GAAGb,IAAI,CAACc,cAAc,CAACL,IAAI,EAAED,CAAC,CAACG,KAAK,CAAC;EAChD,IAAID,KAAK,KAAK,CAAC,EAAE;IACf,OAAOR,QAAQ,CAAC;MAACG,MAAM,EAAE;QAACG,CAAC,EAADA;MAAC,CAAC;MAAEF,OAAO,EAAPA;IAAO,CAAC,CAAC;;EAGzC,IAAMS,MAAM,GAAG,IAAIhB,YAAY,CAACS,CAAC,CAACG,KAAK,EAAEH,CAAC,CAACQ,KAAK,CAAC;EACjD,IAAMC,IAAI,GAAGX,OAAO,CAACY,UAAU,CAACV,CAAC,CAAC;EAAC,6BAEG;IACpC,IAAMW,MAAM,GAAGJ,MAAM,CAACK,UAAU,CAACC,CAAC,CAAC;IACnC,IAAMC,KAAK,GAAGH,MAAM,CAACI,KAAK,EAAE;IAC5BV,KAAK,CAACW,OAAO,CAAC,WAAC;MAAA,OAAIF,KAAK,CAACG,CAAC,CAAC,GAAGjB,CAAC,CAACG,KAAK,CAACc,CAAC,CAAC,GAAG,CAAC,GAAGH,KAAK,CAACG,CAAC,CAAC;IAAA,EAAC;IACxDV,MAAM,CAACW,GAAG,OAAVX,MAAM,GAAKE,IAAI,CAACU,GAAG,OAARV,IAAI,qBAAQK,KAAK,EAAC,4BAAKH,MAAM,GAAC;GAC1C;EALD,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACa,IAAI,EAAEP,CAAC,EAAE;IAAA;EAAA;EAOpC,OAAOf,OAAO,CAACuB,cAAc,CAACd,MAAM,CAACJ,KAAK,EAAEI,MAAM,CAACC,KAAK,EAAED,MAAM,CAACe,MAAM,CAAC;AAC1E;AAEA,OAAO,IAAMC,aAAa,GAAiB;EACzCC,UAAU,EAAElC,OAAO;EACnBmC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE/B;CACb","names":["Reverse","TensorBuffer","util","assertNotComplex","identity","reverse","args","inputs","backend","attrs","x","dims","xRank","shape","length","$dims","parseAxisParam","outBuf","dtype","xBuf","bufferSync","outLoc","indexToLoc","i","inLoc","slice","forEach","d","set","get","size","makeTensorInfo","values","reverseConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Reverse.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}