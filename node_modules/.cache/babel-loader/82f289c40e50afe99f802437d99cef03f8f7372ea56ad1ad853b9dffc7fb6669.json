{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var blockShape = attrs.blockShape,\n    crops = attrs.crops;\n  assertNotComplex([x], 'batchToSpaceND');\n  var prod = blockShape.reduce(function (a, b) {\n    return a * b;\n  });\n  var reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  var permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  var reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  var sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  var sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  var xReshaped = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  var xTransposed = transpose({\n    inputs: {\n      x: xReshaped\n    },\n    backend: backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  var xTransposedReshaped = reshape({\n    inputs: {\n      x: xTransposed\n    },\n    backend: backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  var result = slice({\n    inputs: {\n      x: xTransposedReshaped\n    },\n    backend: backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n  return result;\n}\nexport var batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,cAAc,QAAwF,uBAAuB;AAGnJ,SAAQC,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,KAAK,QAAO,SAAS;AAC7B,SAAQC,SAAS,QAAO,aAAa;AAErC,OAAM,SAAUC,cAAc,CAACC,IAI9B;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,CAAC,GAAIH,MAAM,CAAXG,CAAC;EACR,IAAOC,UAAU,GAAWF,KAAK,CAA1BE,UAAU;IAAEC,KAAK,GAAIH,KAAK,CAAdG,KAAK;EAExBX,gBAAgB,CAAC,CAACS,CAAC,CAAC,EAAE,gBAAgB,CAAC;EAEvC,IAAMG,IAAI,GAAGF,UAAU,CAACG,MAAM,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,GAAGC,CAAC;EAAA,EAAC;EAE/C,IAAMC,QAAQ,GAAGlB,YAAY,CAACmB,WAAW,CAACR,CAAC,CAACS,KAAK,EAAER,UAAU,EAAEE,IAAI,CAAC;EACpE,IAAMO,QAAQ,GAAGrB,YAAY,CAACsB,WAAW,CAACJ,QAAQ,CAACK,MAAM,EAAEX,UAAU,CAACW,MAAM,CAAC;EAC7E,IAAMC,gBAAgB,GAClBxB,YAAY,CAACyB,mBAAmB,CAACd,CAAC,CAACS,KAAK,EAAER,UAAU,EAAEE,IAAI,CAAC;EAC/D,IAAMY,gBAAgB,GAClB1B,YAAY,CAAC2B,mBAAmB,CAACd,KAAK,EAAED,UAAU,CAACW,MAAM,CAAC;EAC9D,IAAMK,SAAS,GACX5B,YAAY,CAAC6B,YAAY,CAACL,gBAAgB,EAAEX,KAAK,EAAED,UAAU,CAACW,MAAM,CAAC;EAEzE,IAAMO,SAAS,GAAG3B,OAAO,CAAC;IAACK,MAAM,EAAE;MAACG,CAAC,EAADA;IAAC,CAAC;IAAEF,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAAE;MAACU,KAAK,EAAEF;IAAQ;EAAC,CAAC,CAAC;EAC3E,IAAMa,WAAW,GACb1B,SAAS,CAAC;IAACG,MAAM,EAAE;MAACG,CAAC,EAAEmB;IAAS,CAAC;IAAErB,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAAE;MAACsB,IAAI,EAAEX;IAAQ;EAAC,CAAC,CAAC;EACzE,IAAMY,mBAAmB,GAAG9B,OAAO,CAC/B;IAACK,MAAM,EAAE;MAACG,CAAC,EAAEoB;IAAW,CAAC;IAAEtB,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAAE;MAACU,KAAK,EAAEI;IAAgB;EAAC,CAAC,CAAC;EAC1E,IAAMU,MAAM,GAAG9B,KAAK,CAAC;IACnBI,MAAM,EAAE;MAACG,CAAC,EAAEsB;IAAmB,CAAC;IAChCxB,OAAO,EAAPA,OAAO;IACPC,KAAK,EAAE;MAACyB,KAAK,EAAET,gBAAgB;MAAEU,IAAI,EAAER;IAAS;GACjD,CAAC;EAEFnB,OAAO,CAAC4B,6BAA6B,CAACP,SAAS,CAAC;EAChDrB,OAAO,CAAC4B,6BAA6B,CAACN,WAAW,CAAC;EAClDtB,OAAO,CAAC4B,6BAA6B,CAACJ,mBAAmB,CAAC;EAE1D,OAAOC,MAAM;AACf;AAEA,OAAO,IAAMI,oBAAoB,GAAiB;EAChDC,UAAU,EAAEtC,cAAc;EAC1BuC,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEnC;CACb","names":["backend_util","BatchToSpaceND","assertNotComplex","reshape","slice","transpose","batchToSpaceND","args","inputs","backend","attrs","x","blockShape","crops","prod","reduce","a","b","reshaped","getReshaped","shape","permuted","getPermuted","length","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","perm","xTransposedReshaped","result","begin","size","disposeIntermediateTensorInfo","batchToSpaceNDConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\BatchToSpaceND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}