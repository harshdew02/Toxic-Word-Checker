{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n  var outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    var offset = 0;\n    inputs.forEach(function (input) {\n      var size = util.sizeFromShape(input.shape);\n      outVals.set(input.vals, offset);\n      offset += size;\n    });\n  } else {\n    var colOffset = 0;\n    inputs.forEach(function (input) {\n      var decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(input.vals) : input.vals;\n      var tIdx = 0;\n      for (var row = 0; row < input.shape[0]; ++row) {\n        var resIdx = row * outShape[1] + colOffset;\n        for (var col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n      colOffset += input.shape[1];\n    });\n  }\n  return outVals;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAuCC,IAAI,QAAO,uBAAuB;AAE7F,OAAM,SAAUC,UAAU,CACtBC,MAAqD,EAAEC,QAAkB,EACzEC,KAAe,EAAEC,YAAqB;EACxC,IAAMC,OAAO,GAAGN,IAAI,CAACO,iBAAiB,CAACH,KAAK,EAAEJ,IAAI,CAACQ,aAAa,CAACL,QAAQ,CAAC,CAAC;EAE3E,IAAIE,YAAY,IAAID,KAAK,KAAK,QAAQ,EAAE;IACtC;IACA,IAAIK,MAAM,GAAG,CAAC;IACdP,MAAM,CAACQ,OAAO,CAAC,eAAK,EAAG;MACrB,IAAMC,IAAI,GAAGX,IAAI,CAACQ,aAAa,CAACI,KAAK,CAACC,KAAK,CAAC;MAE3CP,OAAsB,CAACQ,GAAG,CAACF,KAAK,CAACG,IAAkB,EAAEN,MAAM,CAAC;MAC7DA,MAAM,IAAIE,IAAI;IAChB,CAAC,CAAC;GACH,MAAM;IACL,IAAIK,SAAS,GAAG,CAAC;IAEjBd,MAAM,CAACQ,OAAO,CAAC,eAAK,EAAG;MACrB,IAAMO,WAAW,GAAGb,KAAK,KAAK,QAAQ,GAClCL,YAAY,CAACmB,sBAAsB,CAACN,KAAK,CAACG,IAAoB,CAAC,GAC/DH,KAAK,CAACG,IAAkB;MAE5B,IAAII,IAAI,GAAG,CAAC;MAEZ,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGR,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAEO,GAAG,EAAE;QAC7C,IAAMC,MAAM,GAAGD,GAAG,GAAGjB,QAAQ,CAAC,CAAC,CAAC,GAAGa,SAAS;QAC5C,KAAK,IAAIM,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAES,GAAG,EAAE;UAC7ChB,OAAO,CAACe,MAAM,GAAGC,GAAG,CAAC,GAAGL,WAAW,CAACE,IAAI,EAAE,CAAC;;;MAI/CH,SAAS,IAAIJ,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;;EAGJ,OAAOP,OAAO;AAChB","names":["backend_util","util","concatImpl","inputs","outShape","dtype","simplyConcat","outVals","getArrayFromDType","sizeFromShape","offset","forEach","size","input","shape","set","vals","colOffset","decodedData","fromUint8ToStringArray","tIdx","row","resIdx","col"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Concat_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}