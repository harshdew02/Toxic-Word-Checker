{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var AvgPool2DBackpropProgram = /*#__PURE__*/_createClass(function AvgPool2DBackpropProgram(convInfo) {\n  _classCallCheck(this, AvgPool2DBackpropProgram);\n  this.variableNames = ['dy'];\n  this.outputShape = convInfo.inShape;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var avgMultiplier = 1 / (filterHeight * filterWidth);\n  this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n      const float avgMultiplier = float(\").concat(avgMultiplier, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n            wR += \").concat(dilationHeight, \") {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \").concat(effectiveFilterWidth, \";\\n            wC+= \").concat(dilationWidth, \") {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});\nexport var AvgPool3DBackpropProgram = /*#__PURE__*/_createClass(function AvgPool3DBackpropProgram(convInfo) {\n  _classCallCheck(this, AvgPool3DBackpropProgram);\n  this.variableNames = ['dy'];\n  this.outputShape = convInfo.inShape;\n  var filterDepth = convInfo.filterDepth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n  this.userCode = \"\\n      const ivec3 pads = ivec3(\".concat(padFront, \", \").concat(padTop, \", \").concat(padLeft, \");\\n      const float avgMultiplier = float(\").concat(avgMultiplier, \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \").concat(effectiveFilterDepth, \";\\n            wD += \").concat(dilationDepth, \") {\\n          float dyD = float(dyDCorner + wD) / \").concat(strideDepth, \".0;\\n\\n          if (dyD < 0.0 || dyD >= \").concat(convInfo.outDepth, \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n              wR += \").concat(dilationHeight, \") {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \").concat(effectiveFilterWidth, \";\\n                wC += \").concat(dilationWidth, \") {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});","map":{"version":3,"mappings":"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","names":["AvgPool2DBackpropProgram","convInfo","outputShape","inShape","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","avgMultiplier","userCode","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outDepth"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\avg_pool_backprop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}