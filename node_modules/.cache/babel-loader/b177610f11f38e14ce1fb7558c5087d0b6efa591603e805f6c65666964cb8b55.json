{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport var CHECK_NAN_SNIPPET_UNARY = \"if (isnan(x)) return x;\";\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(_ref) {\n  var opSnippet = _ref.opSnippet,\n    packedOpSnippet = _ref.packedOpSnippet,\n    cpuKernelImpl = _ref.cpuKernelImpl,\n    dtype = _ref.dtype;\n  return function (_ref2) {\n    var inputs = _ref2.inputs,\n      backend = _ref2.backend;\n    var x = inputs.x;\n    var webglBackend = backend;\n    var $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      var xData = webglBackend.texData.get(x.dataId);\n      var outValues = cpuKernelImpl(xData.values, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n    var shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    var program;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(_ref3) {\n  var opSnippet = _ref3.opSnippet,\n    packedOpSnippet = _ref3.packedOpSnippet,\n    _ref3$checkOutOfBound = _ref3.checkOutOfBounds,\n    checkOutOfBounds = _ref3$checkOutOfBound === void 0 ? false : _ref3$checkOutOfBound,\n    _ref3$supportsComplex = _ref3.supportsComplex,\n    supportsComplex = _ref3$supportsComplex === void 0 ? false : _ref3$supportsComplex,\n    cpuKernelImpl = _ref3.cpuKernelImpl,\n    dtype = _ref3.dtype;\n  return function (_ref4) {\n    var inputs = _ref4.inputs,\n      backend = _ref4.backend;\n    var a = inputs.a,\n      b = inputs.b;\n    var webglBackend = backend;\n    if (supportsComplex && a.dtype === 'complex64') {\n      var aData = webglBackend.texData.get(a.dataId);\n      var bData = webglBackend.texData.get(b.dataId);\n      var _map = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(function (complexParts) {\n          var _complexParts = _slicedToArray(complexParts, 2),\n            aPart = _complexParts[0],\n            bPart = _complexParts[1];\n          var aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          var bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n          var program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n          return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n        }),\n        _map2 = _slicedToArray(_map, 2),\n        real = _map2[0],\n        imag = _map2[1];\n      var complexOutput = complex({\n        inputs: {\n          real: real,\n          imag: imag\n        },\n        backend: webglBackend\n      });\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n      return complexOutput;\n    }\n    var $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' || webglBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {\n      var aVals = webglBackend.texData.get(a.dataId).values;\n      var bVals = webglBackend.texData.get(b.dataId).values;\n      var decodedAVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aVals) : aVals;\n      var decodedBVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bVals) : bVals;\n      var _cpuKernelImpl = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype),\n        _cpuKernelImpl2 = _slicedToArray(_cpuKernelImpl, 2),\n        outValues = _cpuKernelImpl2[0],\n        outShape = _cpuKernelImpl2[1];\n      var out = webglBackend.makeTensorInfo(outShape, $dtype);\n      var outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n    var shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') && packedOpSnippet != null;\n    var program;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\nexport function mapActivationToShaderProgram(activation) {\n  var packed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(\"Activation \".concat(activation, \" has not been implemented for the WebGL backend.\"));\n}","map":{"version":3,"mappings":"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","names":["backend_util","env","upcastType","BinaryOpProgram","BinaryOpPackedProgram","complex","LEAKYRELU","LEAKYRELU_PACKED","PRELU","PRELU_PACKED","unary_op","UnaryOpProgram","unary_packed_op","UnaryOpPackedProgram","CHECK_NAN_SNIPPET_UNARY","unaryKernelFunc","opSnippet","packedOpSnippet","cpuKernelImpl","dtype","inputs","backend","x","webglBackend","$dtype","shouldExecuteOnCPU","xData","texData","get","dataId","outValues","values","makeTensorInfo","shape","shouldUsePackedProgram","getBool","program","runWebGLProgram","binaryKernelFunc","checkOutOfBounds","supportsComplex","a","b","aData","bData","complexTensorInfos","real","imag","map","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","disposeIntermediateTensorInfo","aVals","bVals","decodedAVals","fromUint8ToStringArray","decodedBVals","outShape","out","outData","mapActivationToShaderProgram","activation","packed","LINEAR","RELU","ELU","RELU6","SIGMOID","Error"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernel_utils\\kernel_funcs_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}