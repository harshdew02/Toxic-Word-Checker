{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var ArgMinMaxProgram = /*#__PURE__*/_createClass(function ArgMinMaxProgram(reduceInfo, op, firstPass) {\n  _classCallCheck(this, ArgMinMaxProgram);\n  this.variableNames = ['A'];\n  var windowSize = reduceInfo.windowSize,\n    batchSize = reduceInfo.batchSize,\n    outSize = reduceInfo.outSize;\n  if (!firstPass) {\n    this.variableNames.push('bestIndicesA');\n  }\n  this.outputShape = [batchSize, outSize];\n  var compOp = op === 'max' ? '>' : '<';\n  var indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';\n  this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \".concat(windowSize, \";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \").concat(windowSize, \"; i++) {\\n          int inIdx = \").concat(indexSnippet, \";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \").concat(compOp, \" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAoBA,WAAaA,gBAAgB,6BAK3B,0BACIC,UAAmC,EAAEC,EAAe,EACpDC,SAAkB;EAAA;EANtB,kBAAa,GAAG,CAAC,GAAG,CAAC;EAOnB,IAAOC,UAAU,GAAwBH,UAAU,CAA5CG,UAAU;IAAEC,SAAS,GAAaJ,UAAU,CAAhCI,SAAS;IAAEC,OAAO,GAAIL,UAAU,CAArBK,OAAO;EACrC,IAAI,CAACH,SAAS,EAAE;IACd,IAAI,CAACI,aAAa,CAACC,IAAI,CAAC,cAAc,CAAC;;EAEzC,IAAI,CAACC,WAAW,GAAG,CAACJ,SAAS,EAAEC,OAAO,CAAC;EACvC,IAAMI,MAAM,GAAIR,EAAE,KAAK,KAAK,GAAI,GAAG,GAAG,GAAG;EACzC,IAAMS,YAAY,GAAGR,SAAS,GAC1B,eAAe,GACf,8CAA8C;EAElD,IAAI,CAACS,QAAQ,gLAKiBR,UAAU,sIAKdA,UAAU,6CAChBO,YAAY,yFAEVD,MAAM,mKAO3B;AACH,CAAC","names":["ArgMinMaxProgram","reduceInfo","op","firstPass","windowSize","batchSize","outSize","variableNames","push","outputShape","compOp","indexSnippet","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\argminmax_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}