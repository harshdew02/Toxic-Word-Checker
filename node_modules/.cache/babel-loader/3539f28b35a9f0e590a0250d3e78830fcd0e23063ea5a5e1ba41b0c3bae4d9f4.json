{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImplCPU } from '../kernel_utils/shared';\nexport function stringSplit(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var skipEmpty = attrs.skipEmpty;\n  var input = inputs.input,\n    delimiter = inputs.delimiter;\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(\"Input must be a vector, got shape: \".concat(input.shape));\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\"Delimiter must be a scalar, got shape: \".concat(delimiter.shape));\n  }\n  var $input = backend.readSync(input.dataId);\n  var $delimiter = backend.readSync(delimiter.dataId)[0];\n  var _stringSplitImplCPU = stringSplitImplCPU($input, $delimiter, skipEmpty),\n    _stringSplitImplCPU2 = _slicedToArray(_stringSplitImplCPU, 3),\n    indices = _stringSplitImplCPU2[0],\n    values = _stringSplitImplCPU2[1],\n    shape = _stringSplitImplCPU2[2];\n  var outputSize = values.length;\n  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];\n}\nexport var stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,WAAW,QAAwD,uBAAuB;AAG5H,SAAQC,kBAAkB,QAAO,wBAAwB;AAEzD,OAAM,SAAUC,WAAW,CAACC,IAI3B;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,SAAS,GAAID,KAAK,CAAlBC,SAAS;EAChB,IAAOC,KAAK,GAAeJ,MAAM,CAA1BI,KAAK;IAAEC,SAAS,GAAIL,MAAM,CAAnBK,SAAS;EAEvB,IAAID,KAAK,CAACE,KAAK,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;;EAErD,IAAIH,KAAK,CAACI,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC5B,MAAM,IAAIF,KAAK,8CAAuCH,KAAK,CAACI,KAAK,EAAG;;EAEtE,IAAIH,SAAS,CAACG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAChC,MAAM,IAAIF,KAAK,kDAC+BF,SAAS,CAACG,KAAK,EAAG;;EAGlE,IAAME,MAAM,GAAGT,OAAO,CAACU,QAAQ,CAACP,KAAK,CAACQ,MAAM,CAAiB;EAC7D,IAAMC,UAAU,GAAGZ,OAAO,CAACU,QAAQ,CAACN,SAAS,CAACO,MAAM,CAAC,CAAC,CAAC,CAAe;EAEtE,0BACIf,kBAAkB,CAACa,MAAM,EAAEG,UAAU,EAAEV,SAAS,CAAC;IAAA;IAD9CW,OAAO;IAAEC,MAAM;IAAEP,KAAK;EAE7B,IAAMQ,UAAU,GAAGD,MAAM,CAACN,MAAM;EAChC,OAAO,CACLR,OAAO,CAACgB,cAAc,CAAC,CAACD,UAAU,EAAE,CAAC,CAAC,EAAE,OAAO,EAAEF,OAAO,CAAC,EACzDb,OAAO,CAACgB,cAAc,CAAC,CAACD,UAAU,CAAC,EAAE,QAAQ,EAAED,MAAM,CAAC,EACtDd,OAAO,CAACgB,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,IAAIC,UAAU,CAACV,KAAK,CAAC,CAAC,CAC5D;AACH;AAEA,OAAO,IAAMW,iBAAiB,GAAiB;EAC7CC,UAAU,EAAExB,WAAW;EACvByB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAExB;CACb","names":["StringSplit","stringSplitImplCPU","stringSplit","args","inputs","backend","attrs","skipEmpty","input","delimiter","dtype","Error","shape","length","$input","readSync","dataId","$delimiter","indices","values","outputSize","makeTensorInfo","Int32Array","stringSplitConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\StringSplit.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}