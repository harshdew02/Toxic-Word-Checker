{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight, util } from '@tensorflow/tfjs-core';\nexport var flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n      attrs = _ref.attrs,\n      backend = _ref.backend;\n    var image = inputs.image;\n    var cpuBackend = backend;\n    var output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    var _image$shape = _slicedToArray(image.shape, 4),\n      batch = _image$shape[0],\n      imageHeight = _image$shape[1],\n      imageWidth = _image$shape[2],\n      numChannels = _image$shape[3];\n    var imageVals = cpuBackend.data.get(image.dataId).values;\n    for (var batchIdx = 0; batchIdx < batch; batchIdx++) {\n      var batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n      for (var row = 0; row < imageHeight; row++) {\n        var rowOffset = row * (imageWidth * numChannels);\n        for (var col = 0; col < imageWidth; col++) {\n          var colOffset = col * numChannels;\n          for (var channel = 0; channel < numChannels; channel++) {\n            var coordX = Math.round(imageWidth - col - 1);\n            var outIdx = batchOffset + rowOffset + colOffset + channel;\n            var outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              var rotatedColOffset = coordX * numChannels;\n              var imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n    var dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId: dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,aAAa,EAAuBC,IAAI,QAAO,uBAAuB;AAI9E,OAAO,IAAMC,mBAAmB,GAAiB;EAC/CC,UAAU,EAAEH,aAAa;EACzBI,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE,0BAA6B;IAAA,IAA3BC,MAAM,QAANA,MAAM;MAAEC,KAAK,QAALA,KAAK;MAAEC,OAAO,QAAPA,OAAO;IAClC,IAAOC,KAAK,GAAIH,MAA6B,CAAtCG,KAAK;IACZ,IAAMC,UAAU,GAAGF,OAAyB;IAE5C,IAAMG,MAAM,GAAGV,IAAI,CAACW,sBAAsB,CACtCH,KAAK,CAACI,KAAwB,EAAEZ,IAAI,CAACa,aAAa,CAACL,KAAK,CAACM,KAAK,CAAC,CAAC;IACpE,kCAAsDN,KAAK,CAACM,KAAK;MAA1DC,KAAK;MAAEC,WAAW;MAAEC,UAAU;MAAEC,WAAW;IAElD,IAAMC,SAAS,GAAGV,UAAU,CAACW,IAAI,CAACC,GAAG,CAACb,KAAK,CAACc,MAAM,CAAC,CAACC,MAAoB;IAExE,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGT,KAAK,EAAES,QAAQ,EAAE,EAAE;MACnD,IAAMC,WAAW,GAAGD,QAAQ,GAAGP,UAAU,GAAGD,WAAW,GAAGE,WAAW;MAErE,KAAK,IAAIQ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,WAAW,EAAEU,GAAG,EAAE,EAAE;QAC1C,IAAMC,SAAS,GAAGD,GAAG,IAAIT,UAAU,GAAGC,WAAW,CAAC;QAElD,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,UAAU,EAAEW,GAAG,EAAE,EAAE;UACzC,IAAMC,SAAS,GAAGD,GAAG,GAAGV,WAAW;UAEnC,KAAK,IAAIY,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGZ,WAAW,EAAEY,OAAO,EAAE,EAAE;YACtD,IAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAAChB,UAAU,GAAGW,GAAG,GAAG,CAAC,CAAC;YAC/C,IAAMM,MAAM,GAAGT,WAAW,GAAGE,SAAS,GAAGE,SAAS,GAAGC,OAAO;YAE5D,IAAIK,WAAW,GAAGhB,SAAS,CAACe,MAAM,CAAC;YACnC;YACA,IAAIH,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGd,UAAU,EAAE;cACtC;cACA,IAAMmB,gBAAgB,GAAGL,MAAM,GAAGb,WAAW;cAC7C,IAAMmB,QAAQ,GACVZ,WAAW,GAAGE,SAAS,GAAGS,gBAAgB,GAAGN,OAAO;cACxDK,WAAW,GAAGhB,SAAS,CAACkB,QAAQ,CAAC;;YAEnC3B,MAAM,CAACwB,MAAM,CAAC,GAAGC,WAAW;;;;;IAMpC,IAAMb,MAAM,GAAGb,UAAU,CAAC6B,KAAK,CAAC5B,MAAM,EAAEF,KAAK,CAACM,KAAK,EAAEN,KAAK,CAACI,KAAK,CAAC;IACjE,OAAO;MAACU,MAAM,EAANA,MAAM;MAAER,KAAK,EAAEN,KAAK,CAACM,KAAK;MAAEF,KAAK,EAAEJ,KAAK,CAACI;IAAK,CAAC;EACzD;CACD","names":["FlipLeftRight","util","flipLeftRightConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","image","cpuBackend","output","getTypedArrayFromDType","dtype","sizeFromShape","shape","batch","imageHeight","imageWidth","numChannels","imageVals","data","get","dataId","values","batchIdx","batchOffset","row","rowOffset","col","colOffset","channel","coordX","Math","round","outIdx","outputValue","rotatedColOffset","imageIdx","write"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\FlipLeftRight.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}