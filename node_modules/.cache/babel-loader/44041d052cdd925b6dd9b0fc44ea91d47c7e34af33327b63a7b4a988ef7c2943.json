{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n  var inputs = args.inputs,\n    attrs = args.attrs,\n    backend = args.backend;\n  var dim = attrs.dim;\n  var input = inputs.input;\n  var inputRank = input.shape.length;\n  var newShape = input.shape.slice();\n  var $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(-(inputRank + 1) <= dim, function () {\n      return \"Axis must be in the interval [\".concat(-(inputRank + 1), \", \").concat(inputRank, \"]\");\n    });\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n  return reshape({\n    inputs: {\n      x: input\n    },\n    backend: backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n}\nexport var expandDimsConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,UAAU,EAA2EC,IAAI,QAAO,uBAAuB;AAG/H,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,UAAU,CAACC,IAI1B;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,KAAK,GAAaF,IAAI,CAAtBE,KAAK;IAAEC,OAAO,GAAIH,IAAI,CAAfG,OAAO;EAC7B,IAAOC,GAAG,GAAIF,KAAK,CAAZE,GAAG;EACV,IAAOC,KAAK,GAAIJ,MAAM,CAAfI,KAAK;EAEZ,IAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAACC,MAAM;EACpC,IAAMC,QAAQ,GAAGJ,KAAK,CAACE,KAAK,CAACG,KAAK,EAAE;EACpC,IAAIC,IAAI,GAAGP,GAAG;EACd,IAAIA,GAAG,GAAG,CAAC,EAAE;IACX;IACAP,IAAI,CAACe,MAAM,CACP,EAAEN,SAAS,GAAG,CAAC,CAAC,IAAIF,GAAG,EACvB;MAAA,+CAAuC,EAAGE,SAAS,GAAG,CAAC,CAAC,eACpDA,SAAS;IAAA,CAAG,CAAC;IACrBK,IAAI,GAAGL,SAAS,GAAGF,GAAG,GAAG,CAAC;;EAE5BK,QAAQ,CAACI,MAAM,CAACF,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;EAE3B,OAAOb,OAAO,CAAC;IAACG,MAAM,EAAE;MAACa,CAAC,EAAET;IAAK,CAAC;IAAEF,OAAO,EAAPA,OAAO;IAAED,KAAK,EAAE;MAACK,KAAK,EAAEE;IAAQ;EAAC,CAAC,CAAC;AACzE;AAEA,OAAO,IAAMM,gBAAgB,GAAiB;EAC5CC,UAAU,EAAEpB,UAAU;EACtBqB,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEnB;CACb","names":["ExpandDims","util","reshape","expandDims","args","inputs","attrs","backend","dim","input","inputRank","shape","length","newShape","slice","$dim","assert","splice","x","expandDimsConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\ExpandDims.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}