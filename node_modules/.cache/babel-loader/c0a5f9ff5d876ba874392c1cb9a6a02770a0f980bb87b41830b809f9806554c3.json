{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * Contains global resources of a model.\n */\nexport var ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager() {\n    var hashTableNameToHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var hashTableMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, ResourceManager);\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  _createClass(ResourceManager, [{\n    key: \"addHashTable\",\n    value: function addHashTable(name, hashTable) {\n      this.hashTableNameToHandle[name] = hashTable.handle;\n      this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n  }, {\n    key: \"getHashTableHandleByName\",\n    value: function getHashTableHandleByName(name) {\n      return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n  }, {\n    key: \"getHashTableById\",\n    value: function getHashTableById(id) {\n      return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var key in this.hashTableMap) {\n        this.hashTableMap[key].clearAndClose();\n        delete this.hashTableMap[key];\n      }\n      for (var name in this.hashTableNameToHandle) {\n        this.hashTableNameToHandle[name].dispose();\n        delete this.hashTableNameToHandle[name];\n      }\n    }\n  }]);\n  return ResourceManager;\n}();","map":{"version":3,"mappings":";;AAmBA;;;AAGA,WAAaA,eAAe;EAC1B,2BAE4C;IAAA,IAD/BC,4FAAwC,EAAE;IAAA,IAC1CC,mFAA6B,EAAE;IAAA;IAD/B,0BAAqB,GAArBD,qBAAqB;IACrB,iBAAY,GAAZC,YAAY;EAAsB;EAE/C;;;;;;;;;EAAA;IAAA;IAAA,OASA,sBAAaC,IAAY,EAAEC,SAAoB;MAC7C,IAAI,CAACH,qBAAqB,CAACE,IAAI,CAAC,GAAGC,SAAS,CAACC,MAAM;MACnD,IAAI,CAACH,YAAY,CAACE,SAAS,CAACE,EAAE,CAAC,GAAGF,SAAS;IAC7C;IAEA;;;;;EAAA;IAAA;IAAA,OAKA,kCAAyBD,IAAY;MACnC,OAAO,IAAI,CAACF,qBAAqB,CAACE,IAAI,CAAC;IACzC;IAEA;;;;EAAA;IAAA;IAAA,OAIA,0BAAiBG,EAAU;MACzB,OAAO,IAAI,CAACJ,YAAY,CAACI,EAAE,CAAC;IAC9B;IAEA;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACL,KAAK,IAAMC,GAAG,IAAI,IAAI,CAACL,YAAY,EAAE;QACnC,IAAI,CAACA,YAAY,CAACK,GAAG,CAAC,CAACC,aAAa,EAAE;QACtC,OAAO,IAAI,CAACN,YAAY,CAACK,GAAG,CAAC;;MAG/B,KAAK,IAAMJ,IAAI,IAAI,IAAI,CAACF,qBAAqB,EAAE;QAC7C,IAAI,CAACA,qBAAqB,CAACE,IAAI,CAAC,CAACM,OAAO,EAAE;QAC1C,OAAO,IAAI,CAACR,qBAAqB,CAACE,IAAI,CAAC;;IAE3C;EAAC;EAAA;AAAA","names":["ResourceManager","hashTableNameToHandle","hashTableMap","name","hashTable","handle","id","key","clearAndClose","dispose"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\resource_manager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}