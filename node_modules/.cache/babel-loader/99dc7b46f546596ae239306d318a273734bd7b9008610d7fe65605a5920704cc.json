{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from '../../engine/topology';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { greater, greaterEqual, max, min } from '@tensorflow/tfjs-core';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\nimport * as utils from './preprocessing_utils';\nexport var CategoryEncoding = /*#__PURE__*/function (_Layer) {\n  _inherits(CategoryEncoding, _Layer);\n  var _super = _createSuper(CategoryEncoding);\n  function CategoryEncoding(args) {\n    var _this;\n    _classCallCheck(this, CategoryEncoding);\n    _this = _super.call(this, args);\n    _this.numTokens = args.numTokens;\n    if (args.outputMode) {\n      _this.outputMode = args.outputMode;\n    } else {\n      _this.outputMode = 'multiHot';\n    }\n    return _this;\n  }\n  _createClass(CategoryEncoding, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        'numTokens': this.numTokens,\n        'outputMode': this.outputMode\n      };\n      var baseConfig = _get(_getPrototypeOf(CategoryEncoding.prototype), \"getConfig\", this).call(this);\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      if (inputShape == null) {\n        return [this.numTokens];\n      }\n      if (this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1) {\n        inputShape.push(this.numTokens);\n        return inputShape;\n      }\n      inputShape[inputShape.length - 1] = this.numTokens;\n      return inputShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        if (inputs.dtype !== 'int32') {\n          inputs = K.cast(inputs, 'int32');\n        }\n        var countWeights;\n        if (typeof kwargs['countWeights'] !== 'undefined') {\n          if (_this2.outputMode !== 'count') {\n            throw new ValueError(\"countWeights is not used when outputMode !== count.\\n              Received countWeights=\".concat(kwargs['countWeights']));\n          }\n          countWeights = getExactlyOneTensor(kwargs['countWeights']);\n        }\n        var maxValue = max(inputs);\n        var minValue = min(inputs);\n        var greaterEqualMax = greater(_this2.numTokens, maxValue).bufferSync().get(0);\n        var greaterMin = greaterEqual(minValue, 0).bufferSync().get(0);\n        if (!(greaterEqualMax && greaterMin)) {\n          throw new ValueError('Input values must be between 0 < values <=' + \" numTokens with numTokens=\".concat(_this2.numTokens));\n        }\n        return utils.encodeCategoricalInputs(inputs, _this2.outputMode, _this2.numTokens, countWeights);\n      });\n    }\n  }]);\n  return CategoryEncoding;\n}(Layer);\n/** @nocollapse */\nCategoryEncoding.className = 'CategoryEncoding';\nserialization.registerClass(CategoryEncoding);","map":{"version":3,"mappings":"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","names":["Layer","serialization","tidy","greater","greaterEqual","max","min","getExactlyOneShape","getExactlyOneTensor","ValueError","K","utils","CategoryEncoding","args","numTokens","outputMode","config","baseConfig","Object","assign","inputShape","length","push","inputs","kwargs","dtype","cast","countWeights","maxValue","minValue","greaterEqualMax","bufferSync","get","greaterMin","encodeCategoricalInputs","registerClass"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\preprocessing\\category_encoding.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport { LayerArgs, Layer } from '../../engine/topology';\nimport { serialization, Tensor, tidy, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\nimport { greater, greaterEqual, max, min} from '@tensorflow/tfjs-core';\nimport { Shape } from '../../keras_format/common';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { Kwargs } from '../../types';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\nimport * as utils from './preprocessing_utils';\nimport { OutputMode } from './preprocessing_utils';\n\nexport declare interface CategoryEncodingArgs extends LayerArgs {\n  numTokens: number;\n  outputMode?: OutputMode;\n }\n\nexport class CategoryEncoding extends Layer {\n  /** @nocollapse */\n  static className = 'CategoryEncoding';\n  private readonly numTokens: number;\n  private readonly outputMode: OutputMode;\n\n  constructor(args: CategoryEncodingArgs) {\n    super(args);\n    this.numTokens = args.numTokens;\n\n    if(args.outputMode) {\n    this.outputMode = args.outputMode;\n    } else {\n      this.outputMode = 'multiHot';\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'numTokens': this.numTokens,\n      'outputMode': this.outputMode,\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if(inputShape == null) {\n      return [this.numTokens];\n    }\n\n    if(this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1){\n      inputShape.push(this.numTokens);\n      return inputShape;\n    }\n\n    inputShape[inputShape.length - 1] = this.numTokens;\n    return inputShape;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor[]|Tensor {\n    return tidy(() => {\n\n        inputs = getExactlyOneTensor(inputs);\n        if(inputs.dtype !== 'int32') {\n          inputs = K.cast(inputs, 'int32');\n      }\n\n        let countWeights: Tensor1D | Tensor2D;\n\n        if((typeof kwargs['countWeights']) !== 'undefined') {\n\n          if(this.outputMode !== 'count') {\n            throw new ValueError(\n              `countWeights is not used when outputMode !== count.\n              Received countWeights=${kwargs['countWeights']}`);\n          }\n\n          countWeights\n            =  getExactlyOneTensor(kwargs['countWeights']) as Tensor1D|Tensor2D;\n        }\n\n        const maxValue = max(inputs);\n        const minValue = min(inputs);\n        const greaterEqualMax = greater(this.numTokens, maxValue)\n                                                    .bufferSync().get(0);\n\n        const greaterMin = greaterEqual(minValue, 0).bufferSync().get(0);\n\n        if(!(greaterEqualMax && greaterMin)) {\n\n          throw new ValueError('Input values must be between 0 < values <='\n            + ` numTokens with numTokens=${this.numTokens}`);\n        }\n\n        return utils.encodeCategoricalInputs(inputs,\n          this.outputMode, this.numTokens, countWeights);\n    });\n  }\n}\n\nserialization.registerClass(CategoryEncoding);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}