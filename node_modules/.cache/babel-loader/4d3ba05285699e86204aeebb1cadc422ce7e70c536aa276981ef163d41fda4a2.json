{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport var SearchSortedProgram = /*#__PURE__*/_createClass(function SearchSortedProgram(batchSize, numInputs, numValues, side) {\n  _classCallCheck(this, SearchSortedProgram);\n  this.variableNames = ['sortedSequence', 'values'];\n  this.customUniforms = [{\n    name: 'numInputs',\n    type: 'int'\n  }];\n  this.outputShape = [batchSize, numValues];\n  var webGL2LoopHead = 'while (left < right) {';\n  // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n  // iterations.\n  var webGL1LoopHead = \"for (int i = 0; i < \".concat(Math.ceil(Math.log2(numInputs + 1)), \"; ++i) { if (left >= right) break;\");\n  var loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead : webGL1LoopHead;\n  // left corresponds to lower bound and right to upper bound.\n  var boundComparator = side === 'left' ? '<' : '<=';\n  this.userCode = \"\\n       int findBound(int batch, float value) {\\n         int left = 0;\\n         int right = numInputs;\\n         int mid;\\n         \".concat(loopHead, \"\\n           mid = (left + right) / 2;\\n           if (getSortedSequence(batch, mid) \").concat(boundComparator, \" value) {\\n             left = mid + 1;\\n           } else {\\n             right = mid;\\n           }\\n         }\\n         return right;\\n       }\\n\\n       void main() {\\n         ivec2 coords = getOutputCoords();\\n         int batch = coords[0];\\n         int valueIndex = coords[1];\\n\\n         float value = getValues(batch, valueIndex);\\n\\n         setOutput(float(findBound(batch, value)));\\n       }\\n     \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAG,QAAO,uBAAuB;AAIzC,WAAaC,mBAAmB,6BAM9B,6BACIC,SAAiB,EAAEC,SAAiB,EAAEC,SAAiB,EACvDC,IAAoB;EAAA;EAPxB,kBAAa,GAAG,CAAC,gBAAgB,EAAE,QAAQ,CAAC;EAG5C,mBAAc,GAAG,CAAC;IAACC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAoB,CAAC,CAAC;EAKhE,IAAI,CAACC,WAAW,GAAG,CAACN,SAAS,EAAEE,SAAS,CAAC;EAEzC,IAAMK,cAAc,GAAG,wBAAwB;EAC/C;EACA;EACA,IAAMC,cAAc,iCAChBC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,IAAI,CAACV,SAAS,GAAG,CAAC,CAAC,CAAC,uCAAoC;EAC3E,IAAMW,QAAQ,GAAGd,GAAG,EAAE,CAACe,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,GAAGN,cAAc,GACdC,cAAc;EAExE;EACA,IAAMM,eAAe,GAAGX,IAAI,KAAK,MAAM,GAAG,GAAG,GAAG,IAAI;EACpD,IAAI,CAACY,QAAQ,oJAKNH,QAAQ,kGAE4BE,eAAe,maAkBxD;AACJ,CAAC","names":["env","SearchSortedProgram","batchSize","numInputs","numValues","side","name","type","outputShape","webGL2LoopHead","webGL1LoopHead","Math","ceil","log2","loopHead","getNumber","boundComparator","userCode"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\search_sorted_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}