{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar delayCallback = function () {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n  return function (f) {\n    return f();\n  }; // no delays\n}();\n/**\n * Returns a promise that resolves when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame() {\n  return new Promise(function (resolve) {\n    return delayCallback(function () {\n      return resolve();\n    });\n  });\n}\nexport { nextFrame };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,IAAMA,aAAa,GAAc,YAAK;EACpC,IAAI,OAAOC,qBAAqB,KAAK,WAAW,EAAE;IAChD,OAAOA,qBAAqB;GAC7B,MAAM,IAAI,OAAOC,YAAY,KAAK,WAAW,EAAE;IAC9C,OAAOA,YAAY;;EAErB,OAAO,UAACC,CAAW;IAAA,OAAKA,CAAC,EAAE;EAAA,EAAC,CAAE;AAChC,CAAC,EAAG;AAEJ;;;;;;;;;;AAUA,SAASC,SAAS;EAChB,OAAO,IAAIC,OAAO,CAAO,iBAAO;IAAA,OAAIL,aAAa,CAAC;MAAA,OAAMM,OAAO,EAAE;IAAA,EAAC;EAAA,EAAC;AACrE;AAEA,SAAQF,SAAS","names":["delayCallback","requestAnimationFrame","setImmediate","f","nextFrame","Promise","resolve"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\browser_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst delayCallback: Function = (() => {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n  return (f: Function) => f();  // no delays\n})();\n\n/**\n * Returns a promise that resolves when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame(): Promise<void> {\n  return new Promise<void>(resolve => delayCallback(() => resolve()));\n}\n\nexport {nextFrame};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}