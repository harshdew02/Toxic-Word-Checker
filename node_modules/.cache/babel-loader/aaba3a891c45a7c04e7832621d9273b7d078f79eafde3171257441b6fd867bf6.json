{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {\n  var $x = convertToTensor(x, 'x', 'batchNorm');\n  var $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  var $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  var $scale;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  var $offset;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert($x.rank === 2, function () {\n    return \"Error in batchNorm2D: x must be rank 2 but got rank \" + \"\".concat($x.rank, \".\");\n  });\n  util.assert($mean.rank === 2 || $mean.rank === 1, function () {\n    return \"Error in batchNorm2D: mean must be rank 2 or rank 1 but \" + \"got rank \".concat($mean.rank, \".\");\n  });\n  util.assert($variance.rank === 2 || $variance.rank === 1, function () {\n    return \"Error in batchNorm2D: variance must be rank 2 or rank 1 \" + \"but got rank \".concat($variance.rank, \".\");\n  });\n  if ($scale != null) {\n    util.assert($scale.rank === 2 || $scale.rank === 1, function () {\n      return \"Error in batchNorm2D: scale must be rank 2 or rank 1 \" + \"but got rank \".concat($scale.rank, \".\");\n    });\n  }\n  if ($offset != null) {\n    util.assert($offset.rank === 2 || $offset.rank === 1, function () {\n      return \"Error in batchNorm2D: offset must be rank 2 or rank 1 \" + \"but got rank \".concat($offset.rank, \".\");\n    });\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nexport var batchNorm2d = /* @__PURE__ */op({\n  batchNorm2d_: batchNorm2d_\n});","map":{"version":3,"mappings":"AAiBA,SAAQA,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,SAAS,QAAO,aAAa;AACrC,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;AAWA,SAASC,YAAY,CACjBC,CAAsB,EAAEC,IAAkC,EAC1DC,QAAsC,EACtCC,MAAqC,EAAEC,KAAoC,EAC3EC,eAAwB;EAC1B,IAAMC,EAAE,GAAGX,eAAe,CAACK,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC;EAC/C,IAAMO,KAAK,GAAGZ,eAAe,CAACM,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC;EACxD,IAAMO,SAAS,GAAGb,eAAe,CAACO,QAAQ,EAAE,UAAU,EAAE,WAAW,CAAC;EACpE,IAAIO,MAAyB;EAC7B,IAAIL,KAAK,IAAI,IAAI,EAAE;IACjBK,MAAM,GAAGd,eAAe,CAACS,KAAK,EAAE,OAAO,EAAE,WAAW,CAAC;;EAEvD,IAAIM,OAA0B;EAC9B,IAAIP,MAAM,IAAI,IAAI,EAAE;IAClBO,OAAO,GAAGf,eAAe,CAACQ,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC;;EAE1DP,IAAI,CAACe,MAAM,CACPL,EAAE,CAACM,IAAI,KAAK,CAAC,EACb;IAAA,OAAM,mEACCN,EAAE,CAACM,IAAI,MAAG;EAAA,EAAC;EACtBhB,IAAI,CAACe,MAAM,CACPJ,KAAK,CAACK,IAAI,KAAK,CAAC,IAAIL,KAAK,CAACK,IAAI,KAAK,CAAC,EACpC;IAAA,OAAM,gFACUL,KAAK,CAACK,IAAI,MAAG;EAAA,EAAC;EAClChB,IAAI,CAACe,MAAM,CACPH,SAAS,CAACI,IAAI,KAAK,CAAC,IAAIJ,SAAS,CAACI,IAAI,KAAK,CAAC,EAC5C;IAAA,OAAM,oFACcJ,SAAS,CAACI,IAAI,MAAG;EAAA,EAAC;EAC1C,IAAIH,MAAM,IAAI,IAAI,EAAE;IAClBb,IAAI,CAACe,MAAM,CACPF,MAAM,CAACG,IAAI,KAAK,CAAC,IAAIH,MAAM,CAACG,IAAI,KAAK,CAAC,EACtC;MAAA,OAAM,iFACcH,MAAM,CAACG,IAAI,MAAG;IAAA,EAAC;;EAEzC,IAAIF,OAAO,IAAI,IAAI,EAAE;IACnBd,IAAI,CAACe,MAAM,CACPD,OAAO,CAACE,IAAI,KAAK,CAAC,IAAIF,OAAO,CAACE,IAAI,KAAK,CAAC,EACxC;MAAA,OAAM,kFACcF,OAAO,CAACE,IAAI,MAAG;IAAA,EAAC;;EAG1C,OAAOf,SAAS,CAACS,EAAE,EAAEC,KAAK,EAAEC,SAAS,EAAEE,OAAO,EAAED,MAAM,EAAEJ,eAAe,CAAC;AAC1E;AAEA,OAAO,IAAMQ,WAAW,GAAG,eAAgBf,EAAE,CAAC;EAACC,YAAY,EAAZA;AAAY,CAAC,CAAC","names":["convertToTensor","util","batchNorm","op","batchNorm2d_","x","mean","variance","offset","scale","varianceEpsilon","$x","$mean","$variance","$scale","$offset","assert","rank","batchNorm2d"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\batchnorm2d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike, scale?: Tensor2D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor2D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor2D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 2,\n      () => `Error in batchNorm2D: x must be rank 2 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 2 || $mean.rank === 1,\n      () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 2 || $variance.rank === 1,\n      () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 2 || $scale.rank === 1,\n        () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 2 || $offset.rank === 1,\n        () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm2d = /* @__PURE__ */ op({batchNorm2d_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}