{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { broadcast_util, upcastType, util } from '@tensorflow/tfjs-core';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport var MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport function batchMatMulImpl(_ref) {\n  var a = _ref.a,\n    b = _ref.b,\n    transposeA = _ref.transposeA,\n    transposeB = _ref.transposeB,\n    backend = _ref.backend,\n    _ref$bias = _ref.bias,\n    bias = _ref$bias === void 0 ? null : _ref$bias,\n    _ref$preluActivationW = _ref.preluActivationWeights,\n    preluActivationWeights = _ref$preluActivationW === void 0 ? null : _ref$preluActivationW,\n    _ref$leakyreluAlpha = _ref.leakyreluAlpha,\n    leakyreluAlpha = _ref$leakyreluAlpha === void 0 ? 0 : _ref$leakyreluAlpha,\n    _ref$activation = _ref.activation,\n    activation = _ref$activation === void 0 ? null : _ref$activation;\n  var aRank = a.shape.length;\n  var bRank = b.shape.length;\n  var innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  var innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  var outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  var outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  var outerDimsA = a.shape.slice(0, -2);\n  var outerDimsB = b.shape.slice(0, -2);\n  var batchDimA = util.sizeFromShape(outerDimsA);\n  var batchDimB = util.sizeFromShape(outerDimsB);\n  var outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  var outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util.assert(innerShapeA === innerShapeB, function () {\n    return \"Error in matMul: inner shapes (\".concat(innerShapeA, \") and (\") + \"\".concat(innerShapeB, \") of Tensors with shapes \").concat(a.shape, \" and \") + \"\".concat(b.shape, \" and transposeA=\").concat(transposeA) + \" and transposeB=\".concat(transposeB, \" must match.\");\n  });\n  var a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  var b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  var a3d = reshape({\n    inputs: {\n      x: a\n    },\n    backend: backend,\n    attrs: {\n      shape: a3dShape\n    }\n  });\n  var b3d = reshape({\n    inputs: {\n      x: b\n    },\n    backend: backend,\n    attrs: {\n      shape: b3dShape\n    }\n  });\n  var intermediates = [a3d, b3d];\n  var batchDim = Math.max(batchDimA, batchDimB);\n  var sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  var hasBias = bias != null;\n  var hasPreluActivationWeights = preluActivationWeights != null;\n  var hasLeakyreluAlpha = activation === 'leakyrelu';\n  var fusedActivation = activation != null ? mapActivationToShaderProgram(activation, true) : null;\n  var containsFusedOps = hasBias || hasPreluActivationWeights || hasLeakyreluAlpha || fusedActivation != null;\n  var out;\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    var aVec = a3d;\n    var bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({\n        inputs: {\n          x: a3d\n        },\n        backend: backend,\n        attrs: {\n          perm: [0, 2, 1]\n        }\n      });\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({\n        inputs: {\n          x: b3d\n        },\n        backend: backend,\n        attrs: {\n          perm: [0, 2, 1]\n        }\n      });\n      intermediates.push(bVec);\n    }\n    var shouldReshapeA = outerShapeB !== 1;\n    var shouldReshapeB = outerShapeB === 1;\n    var aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {\n          x: aVec\n        },\n        backend: backend,\n        attrs: {\n          shape: [batchDim, sharedDim, 1]\n        }\n      });\n      intermediates.push(aVec3d);\n    }\n    var axis = outerShapeB === 1 ? 2 : 1;\n    var bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {\n          x: bVec\n        },\n        backend: backend,\n        attrs: {\n          shape: [batchDim, 1, sharedDim]\n        }\n      });\n      intermediates.push(bVec3d);\n    }\n    var product = multiply({\n      inputs: {\n        a: aVec3d,\n        b: bVec3d\n      },\n      backend: backend\n    });\n    out = sum({\n      inputs: {\n        x: product\n      },\n      backend: backend,\n      attrs: {\n        axis: axis,\n        keepDims: true\n      }\n    });\n    intermediates.push(product);\n  } else {\n    var dtype = upcastType(a.dtype, b.dtype);\n    var program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    var inputs = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      var $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n  var outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend: backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  intermediates.push(out);\n  for (var _i = 0, _intermediates = intermediates; _i < _intermediates.length; _i++) {\n    var i = _intermediates[_i];\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}","map":{"version":3,"mappings":"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","names":["broadcast_util","upcastType","util","mapActivationToShaderProgram","MatMulPackedProgram","multiply","reshape","sum","transpose","MATMUL_SHARED_DIM_THRESHOLD","batchMatMulImpl","a","b","transposeA","transposeB","backend","bias","preluActivationWeights","leakyreluAlpha","activation","aRank","shape","length","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","slice","outerDimsB","batchDimA","sizeFromShape","batchDimB","outShapeOuterDims","assertAndGetBroadcastShape","outShape","concat","assert","a3dShape","b3dShape","a3d","inputs","x","attrs","b3d","intermediates","batchDim","Math","max","sharedDim","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","containsFusedOps","out","aVec","bVec","perm","push","shouldReshapeA","shouldReshapeB","aVec3d","axis","bVec3d","product","keepDims","dtype","program","$leakyreluAlpha","makeTensorInfo","createScalarValue","runWebGLProgram","outReshaped","i","disposeIntermediateTensorInfo"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\BatchMatMul_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}