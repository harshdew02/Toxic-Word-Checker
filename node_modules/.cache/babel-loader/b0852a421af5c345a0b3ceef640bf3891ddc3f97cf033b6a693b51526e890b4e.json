{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nvar OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nvar JSON_TYPE = 'application/json';\nexport var HTTPRequest = /*#__PURE__*/function () {\n  function HTTPRequest(path, loadOptions) {\n    _classCallCheck(this, HTTPRequest);\n    this.DEFAULT_METHOD = 'POST';\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', function () {\n        return 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)';\n      });\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n    assert(path != null && path.length > 0, function () {\n      return 'URL path for http must not be null, undefined or ' + 'empty.';\n    });\n    if (Array.isArray(path)) {\n      assert(path.length === 2, function () {\n        return 'URL paths for http must have a length of 2, ' + \"(actual length is \".concat(path.length, \").\");\n      });\n    }\n    this.path = path;\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n  _createClass(HTTPRequest, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(modelArtifacts) {\n        var init, weightsManifest, modelTopologyAndWeightManifest, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n            case 2:\n              init = Object.assign({\n                method: this.DEFAULT_METHOD\n              }, this.requestInit);\n              init.body = new FormData();\n              weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs\n              }];\n              modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n              init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n                type: JSON_TYPE\n              }), 'model.json');\n              if (modelArtifacts.weightData != null) {\n                init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n                  type: OCTET_STREAM_MIME_TYPE\n                }), 'model.weights.bin');\n              }\n              _context.next = 10;\n              return this.fetch(this.path, init);\n            case 10:\n              response = _context.sent;\n              if (!response.ok) {\n                _context.next = 15;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response]\n              });\n            case 15:\n              throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \" + \"\".concat(response.status, \".\"));\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this = this;\n        var modelConfigRequest, modelJSON, message, modelTopology, weightsManifest;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.fetch(this.path, this.requestInit);\n            case 2:\n              modelConfigRequest = _context2.sent;\n              if (modelConfigRequest.ok) {\n                _context2.next = 5;\n                break;\n              }\n              throw new Error(\"Request to \".concat(this.path, \" failed with status code \") + \"\".concat(modelConfigRequest.status, \". Please verify this URL points to \") + \"the model JSON of the model to load.\");\n            case 5:\n              _context2.prev = 5;\n              _context2.next = 8;\n              return modelConfigRequest.json();\n            case 8:\n              modelJSON = _context2.sent;\n              _context2.next = 16;\n              break;\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](5);\n              message = \"Failed to parse model JSON of response from \".concat(this.path, \".\"); // TODO(nsthorat): Remove this after some time when we're comfortable that\n              // .pb files are mostly gone.\n              if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n              } else {\n                message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n              }\n              throw new Error(message);\n            case 16:\n              // We do not allow both modelTopology and weightsManifest to be missing.\n              modelTopology = modelJSON.modelTopology;\n              weightsManifest = modelJSON.weightsManifest;\n              if (!(modelTopology == null && weightsManifest == null)) {\n                _context2.next = 20;\n                break;\n              }\n              throw new Error(\"The JSON from HTTP path \".concat(this.path, \" contains neither model \") + \"topology or manifest for weights.\");\n            case 20:\n              return _context2.abrupt(\"return\", getModelArtifactsForJSON(modelJSON, function (weightsManifest) {\n                return _this.loadWeights(weightsManifest);\n              }));\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[5, 11]]);\n      }));\n      function load() {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }, {\n    key: \"loadWeights\",\n    value: function () {\n      var _loadWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(weightsManifest) {\n        var weightPath, _parseUrl, _parseUrl2, prefix, suffix, pathPrefix, weightSpecs, fetchURLs, urlPromises, _iterator, _step, weightsGroup, _iterator2, _step2, path, buffers;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n              _parseUrl = parseUrl(weightPath), _parseUrl2 = _slicedToArray(_parseUrl, 2), prefix = _parseUrl2[0], suffix = _parseUrl2[1];\n              pathPrefix = this.weightPathPrefix || prefix;\n              weightSpecs = getWeightSpecs(weightsManifest);\n              fetchURLs = [];\n              urlPromises = [];\n              _iterator = _createForOfIteratorHelper(weightsManifest);\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  weightsGroup = _step.value;\n                  _iterator2 = _createForOfIteratorHelper(weightsGroup.paths);\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      path = _step2.value;\n                      if (this.weightUrlConverter != null) {\n                        urlPromises.push(this.weightUrlConverter(path));\n                      } else {\n                        fetchURLs.push(pathPrefix + path + suffix);\n                      }\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              if (!this.weightUrlConverter) {\n                _context3.next = 17;\n                break;\n              }\n              _context3.t0 = fetchURLs.push;\n              _context3.t1 = fetchURLs;\n              _context3.t2 = _toConsumableArray;\n              _context3.next = 14;\n              return Promise.all(urlPromises);\n            case 14:\n              _context3.t3 = _context3.sent;\n              _context3.t4 = (0, _context3.t2)(_context3.t3);\n              _context3.t0.apply.call(_context3.t0, _context3.t1, _context3.t4);\n            case 17:\n              _context3.next = 19;\n              return loadWeightsAsArrayBuffer(fetchURLs, {\n                requestInit: this.requestInit,\n                fetchFunc: this.fetch,\n                onProgress: this.onProgress\n              });\n            case 19:\n              buffers = _context3.sent;\n              return _context3.abrupt(\"return\", [weightSpecs, concatenateArrayBuffers(buffers)]);\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function loadWeights(_x2) {\n        return _loadWeights.apply(this, arguments);\n      }\n      return loadWeights;\n    }()\n  }]);\n  return HTTPRequest;\n}();\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n  var lastSlash = url.lastIndexOf('/');\n  var lastSearchParam = url.lastIndexOf('?');\n  var prefix = url.substring(0, lastSlash);\n  var suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport var httpRouter = function httpRouter(url, loadOptions) {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    var isHTTP = true;\n    if (Array.isArray(url)) {\n      isHTTP = url.every(function (urlItem) {\n        return isHTTPScheme(urlItem);\n      });\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"mappings":"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","names":["env","assert","concatenateArrayBuffers","getModelArtifactsForJSON","getModelArtifactsInfoForJSON","getModelJSONForModelArtifacts","getWeightSpecs","IORouterRegistry","loadWeightsAsArrayBuffer","OCTET_STREAM_MIME_TYPE","JSON_TYPE","HTTPRequest","path","loadOptions","weightPathPrefix","onProgress","weightUrlConverter","fetchFunc","fetch","platform","length","Array","isArray","requestInit","body","Error","modelArtifacts","modelTopology","ArrayBuffer","init","Object","assign","method","DEFAULT_METHOD","FormData","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","append","Blob","JSON","stringify","type","weightData","response","ok","modelArtifactsInfo","responses","status","modelConfigRequest","json","modelJSON","message","endsWith","loadWeights","weightPath","parseUrl","prefix","suffix","pathPrefix","fetchURLs","urlPromises","weightsGroup","push","Promise","all","buffers","url","lastSlash","lastIndexOf","lastSearchParam","substring","isHTTPScheme","match","URL_SCHEME_REGEX","httpRouter","isHTTP","every","urlItem","http","registerSaveRouter","registerLoadRouter","browserHTTPRequest"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\http.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, OnProgressCallback, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: Function;\n  private readonly weightUrlConverter: (weightName: string) => Promise<string>;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly onProgress: OnProgressCallback;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON =\n        getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append(\n          'model.weights.bin',\n          new Blob([modelArtifacts.weightData], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelJSON: ModelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    return getModelArtifactsForJSON(\n        modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n      Promise<[WeightsManifestEntry[], ArrayBuffer]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const weightSpecs = getWeightSpecs(weightsManifest);\n\n    const fetchURLs: string[] = [];\n    const urlPromises: Array<Promise<string>> = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...await Promise.all(urlPromises));\n    }\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, loadOptions?: LoadOptions) => {\n      if (typeof fetch === 'undefined' &&\n          (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, loadOptions);\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}