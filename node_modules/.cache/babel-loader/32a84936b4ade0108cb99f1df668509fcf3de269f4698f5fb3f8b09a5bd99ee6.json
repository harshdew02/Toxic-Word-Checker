{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { _FusedMatMul } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { matMul as unfusedMatMul } from '../mat_mul';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes the dot product of two matrices with optional activation and bias.\n *\n * ```js\n * const a = tf.tensor2d([-1, -2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const bias = tf.tensor2d([1, 2], [1, 2]);\n *\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `a` First matrix in dot product operation.\n * - `b` Second matrix in dot product operation.\n * - `transposeA` If true, `a` is transposed before multiplication.\n * - `transposeB` If true, `b` is transposed before multiplication.\n * - `bias` Matrix to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`).\n * - `preluActivationWeights` Tensor of prelu weights.\n * - `leakyreluAlpha` Alpha of leakyrelu.\n */\nfunction fusedMatMul_(_ref) {\n  var a = _ref.a,\n    b = _ref.b,\n    _ref$transposeA = _ref.transposeA,\n    transposeA = _ref$transposeA === void 0 ? false : _ref$transposeA,\n    _ref$transposeB = _ref.transposeB,\n    transposeB = _ref$transposeB === void 0 ? false : _ref$transposeB,\n    bias = _ref.bias,\n    _ref$activation = _ref.activation,\n    activation = _ref$activation === void 0 ? 'linear' : _ref$activation,\n    preluActivationWeights = _ref.preluActivationWeights,\n    _ref$leakyreluAlpha = _ref.leakyreluAlpha,\n    leakyreluAlpha = _ref$leakyreluAlpha === void 0 ? 0.2 : _ref$leakyreluAlpha;\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    var result = unfusedMatMul(a, b, transposeA, transposeB);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n    return applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n  }\n  var $a = convertToTensor(a, 'a', 'fused matMul');\n  var $b = convertToTensor(b, 'b', 'fused matMul');\n  var _makeTypesMatch = makeTypesMatch($a, $b);\n  var _makeTypesMatch2 = _slicedToArray(_makeTypesMatch, 2);\n  $a = _makeTypesMatch2[0];\n  $b = _makeTypesMatch2[1];\n  var innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n  var innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n  var outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n  var outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n  var outerDimsA = $a.shape.slice(0, -2);\n  var outerDimsB = $b.shape.slice(0, -2);\n  var batchDimA = util.sizeFromShape(outerDimsA);\n  var batchDimB = util.sizeFromShape(outerDimsB);\n  util.assert(innerShapeA === innerShapeB, function () {\n    return \"Error in fused matMul: inner shapes (\".concat(innerShapeA, \") and (\") + \"\".concat(innerShapeB, \") of Tensors with shapes \").concat($a.shape, \" and \") + \"\".concat($b.shape, \" and transposeA=\").concat(transposeA) + \" and transposeB=\".concat(transposeB, \" must match.\");\n  });\n  var outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape($a.shape.slice(0, -2), $b.shape.slice(0, -2));\n  var outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  var a3D = transposeA ? reshape($a, [batchDimA, innerShapeA, outerShapeA]) : reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n  var b3D = transposeB ? reshape($b, [batchDimB, outerShapeB, innerShapeB]) : reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n  var $bias;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused matMul');\n    var _makeTypesMatch3 = makeTypesMatch($bias, $a);\n    var _makeTypesMatch4 = _slicedToArray(_makeTypesMatch3, 1);\n    $bias = _makeTypesMatch4[0];\n    broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);\n  }\n  var $preluActivationWeights;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused matMul');\n  }\n  var grad = function grad(dy, saved) {\n    var _saved = _slicedToArray(saved, 4),\n      a3D = _saved[0],\n      b3D = _saved[1],\n      y = _saved[2],\n      $bias = _saved[3];\n    // we reshape dy because the result of the forward is not\n    // necessarily going to be a 3d tensor due to a reshape done at the end of\n    // the customOp.\n    var dyActivation = getFusedDyActivation(reshape(dy, y.shape), y, activation);\n    var aDer;\n    var bDer;\n    if (!transposeA && !transposeB) {\n      aDer = unfusedMatMul(dyActivation, b3D, false, true);\n      bDer = unfusedMatMul(a3D, dyActivation, true, false);\n    } else if (!transposeA && transposeB) {\n      aDer = unfusedMatMul(dyActivation, b3D, false, false);\n      bDer = unfusedMatMul(dyActivation, a3D, true, false);\n    } else if (transposeA && !transposeB) {\n      aDer = unfusedMatMul(b3D, dyActivation, false, true);\n      bDer = unfusedMatMul(a3D, dyActivation, false, false);\n    } else {\n      aDer = unfusedMatMul(b3D, dyActivation, true, true);\n      bDer = unfusedMatMul(dyActivation, a3D, true, true);\n    }\n    if (bias != null) {\n      var biasDer = getFusedBiasGradient($bias, dyActivation);\n      return [aDer, bDer, biasDer];\n    } else {\n      return [aDer, bDer];\n    }\n  };\n  var inputs = {\n    a: a3D,\n    b: b3D,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  var attrs = {\n    transposeA: transposeA,\n    transposeB: transposeB,\n    activation: activation,\n    leakyreluAlpha: leakyreluAlpha\n  };\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    var customOp = customGrad(function (a3D, b3D, save) {\n      var res =\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      ENGINE.runKernel(_FusedMatMul, inputs, attrs);\n      save([a3D, b3D, res]);\n      return {\n        value: reshape(res, outShape),\n        gradFunc: grad\n      };\n    });\n    return customOp(a3D, b3D);\n  } else {\n    var customOpWithBias = customGrad(function (a3D, b3D, $bias, save) {\n      var res =\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      ENGINE.runKernel(_FusedMatMul, inputs, attrs);\n      save([a3D, b3D, res, $bias]);\n      return {\n        value: reshape(res, outShape),\n        gradFunc: grad\n      };\n    });\n    return customOpWithBias(a3D, b3D, $bias);\n  }\n}\nexport var matMul = /* @__PURE__ */op({\n  fusedMatMul_: fusedMatMul_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","customGrad","_FusedMatMul","makeTypesMatch","convertToTensor","util","add","broadcast_util","applyActivation","getFusedBiasGradient","getFusedDyActivation","shouldFuse","matMul","unfusedMatMul","op","reshape","fusedMatMul_","a","b","transposeA","transposeB","bias","activation","preluActivationWeights","leakyreluAlpha","state","gradientDepth","result","$a","$b","innerShapeA","shape","rank","innerShapeB","outerShapeA","outerShapeB","outerDimsA","slice","outerDimsB","batchDimA","sizeFromShape","batchDimB","assert","outShapeOuterDims","assertAndGetBroadcastShape","outShape","concat","a3D","b3D","$bias","$preluActivationWeights","grad","dy","saved","y","dyActivation","aDer","bDer","biasDer","inputs","attrs","customOp","save","res","runKernel","value","gradFunc","customOpWithBias"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\fused\\mat_mul.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {matMul as unfusedMatMul} from '../mat_mul';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes the dot product of two matrices with optional activation and bias.\n *\n * ```js\n * const a = tf.tensor2d([-1, -2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const bias = tf.tensor2d([1, 2], [1, 2]);\n *\n * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();\n * ```\n *\n * @param obj An object with the following properties:\n * - `a` First matrix in dot product operation.\n * - `b` Second matrix in dot product operation.\n * - `transposeA` If true, `a` is transposed before multiplication.\n * - `transposeB` If true, `b` is transposed before multiplication.\n * - `bias` Matrix to be added to the result.\n * - `activation` Name of activation kernel (defaults to `linear`).\n * - `preluActivationWeights` Tensor of prelu weights.\n * - `leakyreluAlpha` Alpha of leakyrelu.\n */\nfunction fusedMatMul_({\n  a,\n  b,\n  transposeA = false,\n  transposeB = false,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha = 0.2,\n}: {\n  a: Tensor|TensorLike,\n  b: Tensor|TensorLike,\n  transposeA?: boolean,\n  transposeB?: boolean,\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor\n  leakyreluAlpha?: number\n}): Tensor {\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n      let result = unfusedMatMul(a, b, transposeA, transposeB);\n      if (bias != null) {\n        result = add(result, bias);\n      }\n\n      return applyActivation(\n                 result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n\n    let $a = convertToTensor(a, 'a', 'fused matMul');\n    let $b = convertToTensor(b, 'b', 'fused matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n\n    const innerShapeA =\n        transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n    const innerShapeB =\n        transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n\n    const outerShapeA =\n        transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n    const outerShapeB =\n        transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n\n    const outerDimsA = $a.shape.slice(0, -2);\n    const outerDimsB = $b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n\n    util.assert(\n        innerShapeA === innerShapeB,\n        () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +\n            `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n            `${$b.shape} and transposeA=${transposeA}` +\n            ` and transposeB=${transposeB} must match.`);\n\n    const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n        $a.shape.slice(0, -2), $b.shape.slice(0, -2));\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n    const a3D: Tensor3D = transposeA ?\n        reshape($a, [batchDimA, innerShapeA, outerShapeA]) :\n        reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n    const b3D: Tensor3D = transposeB ?\n        reshape($b, [batchDimB, outerShapeB, innerShapeB]) :\n        reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n\n    let $bias: Tensor;\n    if (bias != null) {\n      $bias = convertToTensor(bias, 'bias', 'fused matMul');\n      [$bias] = makeTypesMatch($bias, $a);\n\n      broadcast_util.assertAndGetBroadcastShape(outShape, $bias.shape);\n    }\n\n    let $preluActivationWeights: Tensor;\n    if (preluActivationWeights != null) {\n      $preluActivationWeights = convertToTensor(\n          preluActivationWeights, 'prelu weights', 'fused matMul');\n    }\n\n    const grad = (dy: Tensor3D, saved: Tensor[]) => {\n      const [a3D, b3D, y, $bias] = saved;\n      // we reshape dy because the result of the forward is not\n      // necessarily going to be a 3d tensor due to a reshape done at the end of\n      // the customOp.\n      const dyActivation =\n          getFusedDyActivation(reshape(dy, y.shape), y, activation);\n      let aDer: Tensor;\n      let bDer: Tensor;\n\n      if (!transposeA && !transposeB) {\n        aDer = unfusedMatMul(dyActivation, b3D, false, true);\n        bDer = unfusedMatMul(a3D, dyActivation, true, false);\n      } else if (!transposeA && transposeB) {\n        aDer = unfusedMatMul(dyActivation, b3D, false, false);\n        bDer = unfusedMatMul(dyActivation, a3D, true, false);\n      } else if (transposeA && !transposeB) {\n        aDer = unfusedMatMul(b3D, dyActivation, false, true);\n        bDer = unfusedMatMul(a3D, dyActivation, false, false);\n      } else {\n        aDer = unfusedMatMul(b3D, dyActivation, true, true);\n        bDer = unfusedMatMul(dyActivation, a3D, true, true);\n      }\n\n      if (bias != null) {\n        const biasDer = getFusedBiasGradient($bias, dyActivation);\n        return [aDer, bDer, biasDer];\n      } else {\n        return [aDer, bDer];\n      }\n    };\n\n    const inputs: _FusedMatMulInputs = {\n      a: a3D,\n      b: b3D,\n      bias: $bias,\n      preluActivationWeights: $preluActivationWeights\n    };\n    const attrs: _FusedMatMulAttrs =\n        {transposeA, transposeB, activation, leakyreluAlpha};\n\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n      const customOp =\n          customGrad((a3D: Tensor3D, b3D: Tensor3D, save: GradSaveFunc) => {\n            const res =\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                ENGINE.runKernel(\n                    _FusedMatMul, inputs as unknown as NamedTensorMap,\n                    attrs as unknown as NamedAttrMap) as Tensor;\n\n            save([a3D, b3D, res]);\n\n            return {value: reshape(res, outShape), gradFunc: grad};\n          });\n      return customOp(a3D, b3D);\n    } else {\n      const customOpWithBias = customGrad(\n          (a3D: Tensor3D, b3D: Tensor3D, $bias: Tensor, save: GradSaveFunc) => {\n            const res =\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                ENGINE.runKernel(\n                    _FusedMatMul, inputs as unknown as NamedTensorMap,\n                    attrs as unknown as NamedAttrMap) as Tensor;\n\n            save([a3D, b3D, res, $bias]);\n\n            return {value: reshape(res, outShape), gradFunc: grad};\n          });\n\n      return customOpWithBias(a3D, b3D, $bias);\n    }\n  }\n\n  export const matMul = /* @__PURE__ */ op({fusedMatMul_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}