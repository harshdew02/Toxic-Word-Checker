{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, concat, slice, stack, tensor, tidy, unstack, util, io, Tensor, add, addN, mod, mul, div, divNoNan, floorDiv, sub, minimum, maximum, pow, squaredDifference, abs, acos, acosh, asin, asinh, atan, atan2, atanh, ceil, complex, cos, cosh, elu, erf, exp, expm1, floor, log, log1p, imag, neg, reciprocal, real, relu, round, selu, sigmoid, sin, sign, sinh, softplus, sqrt, square, tanh, tan, clipByValue, rsqrt, prod, leakyRelu, prelu, scalar, conv1d, conv2d, fused, conv2dTranspose, depthwiseConv2d, conv3d, avgPool, maxPool, maxPoolWithArgmax, avgPool3d, maxPool3d, fill, linspace, multinomial, oneHot, ones, onesLike, randomUniform, range, truncatedNormal, zeros, zerosLike, image, whereAsync, setdiff1dAsync, topk, tensor1d, equal, notEqual, greater, greaterEqual, less, lessEqual, logicalAnd, logicalNot, logicalOr, where, matMul, transpose, batchNorm, localResponseNormalization, softmax, logSoftmax, sparseToDense, max, mean, min, sum, all, any, argMax, argMin, gather, reverse, stridedSlice, tile, split, scatterND, gatherND, fft, ifft, rfft, irfft, cast, expandDims, squeeze, reshape, pad, spaceToBatchND, batchToSpaceND, depthToSpace } from \"@tensorflow/tfjs-core\";\nvar DataType,\n  SaverDef,\n  _assign = function __assign() {\n    return (_assign = Object.assign || function (e) {\n      for (var t, a = 1, r = arguments.length; a < r; a++) for (var n in t = arguments[a]) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n      return e;\n    }).apply(this, arguments);\n  };\nfunction __awaiter(e, t, a, r) {\n  return new (a || (a = Promise))(function (n, s) {\n    function o(e) {\n      try {\n        u(r.next(e));\n      } catch (e) {\n        s(e);\n      }\n    }\n    function p(e) {\n      try {\n        u(r.throw(e));\n      } catch (e) {\n        s(e);\n      }\n    }\n    function u(e) {\n      e.done ? n(e.value) : new a(function (t) {\n        t(e.value);\n      }).then(o, p);\n    }\n    u((r = r.apply(e, t || [])).next());\n  });\n}\nfunction __generator(e, t) {\n  var a,\n    r,\n    n,\n    s,\n    o = {\n      label: 0,\n      sent: function sent() {\n        if (1 & n[0]) throw n[1];\n        return n[1];\n      },\n      trys: [],\n      ops: []\n    };\n  return s = {\n    next: p(0),\n    throw: p(1),\n    return: p(2)\n  }, \"function\" == typeof Symbol && (s[Symbol.iterator] = function () {\n    return this;\n  }), s;\n  function p(s) {\n    return function (p) {\n      return function (s) {\n        if (a) throw new TypeError(\"Generator is already executing.\");\n        for (; o;) try {\n          if (a = 1, r && (n = 2 & s[0] ? r.return : s[0] ? r.throw || ((n = r.return) && n.call(r), 0) : r.next) && !(n = n.call(r, s[1])).done) return n;\n          switch (r = 0, n && (s = [2 & s[0], n.value]), s[0]) {\n            case 0:\n            case 1:\n              n = s;\n              break;\n            case 4:\n              return o.label++, {\n                value: s[1],\n                done: !1\n              };\n            case 5:\n              o.label++, r = s[1], s = [0];\n              continue;\n            case 7:\n              s = o.ops.pop(), o.trys.pop();\n              continue;\n            default:\n              if (!(n = (n = o.trys).length > 0 && n[n.length - 1]) && (6 === s[0] || 2 === s[0])) {\n                o = 0;\n                continue;\n              }\n              if (3 === s[0] && (!n || s[1] > n[0] && s[1] < n[3])) {\n                o.label = s[1];\n                break;\n              }\n              if (6 === s[0] && o.label < n[1]) {\n                o.label = n[1], n = s;\n                break;\n              }\n              if (n && o.label < n[2]) {\n                o.label = n[2], o.ops.push(s);\n                break;\n              }\n              n[2] && o.ops.pop(), o.trys.pop();\n              continue;\n          }\n          s = t.call(e, o);\n        } catch (e) {\n          s = [6, e], r = 0;\n        } finally {\n          a = n = 0;\n        }\n        if (5 & s[0]) throw s[1];\n        return {\n          value: s[0] ? s[1] : void 0,\n          done: !0\n        };\n      }([s, p]);\n    };\n  }\n}\n!function (e) {\n  e[e.DT_INVALID = 0] = \"DT_INVALID\", e[e.DT_FLOAT = 1] = \"DT_FLOAT\", e[e.DT_DOUBLE = 2] = \"DT_DOUBLE\", e[e.DT_INT32 = 3] = \"DT_INT32\", e[e.DT_UINT8 = 4] = \"DT_UINT8\", e[e.DT_INT16 = 5] = \"DT_INT16\", e[e.DT_INT8 = 6] = \"DT_INT8\", e[e.DT_STRING = 7] = \"DT_STRING\", e[e.DT_COMPLEX64 = 8] = \"DT_COMPLEX64\", e[e.DT_INT64 = 9] = \"DT_INT64\", e[e.DT_BOOL = 10] = \"DT_BOOL\", e[e.DT_QINT8 = 11] = \"DT_QINT8\", e[e.DT_QUINT8 = 12] = \"DT_QUINT8\", e[e.DT_QINT32 = 13] = \"DT_QINT32\", e[e.DT_BFLOAT16 = 14] = \"DT_BFLOAT16\", e[e.DT_FLOAT_REF = 101] = \"DT_FLOAT_REF\", e[e.DT_DOUBLE_REF = 102] = \"DT_DOUBLE_REF\", e[e.DT_INT32_REF = 103] = \"DT_INT32_REF\", e[e.DT_UINT8_REF = 104] = \"DT_UINT8_REF\", e[e.DT_INT16_REF = 105] = \"DT_INT16_REF\", e[e.DT_INT8_REF = 106] = \"DT_INT8_REF\", e[e.DT_STRING_REF = 107] = \"DT_STRING_REF\", e[e.DT_COMPLEX64_REF = 108] = \"DT_COMPLEX64_REF\", e[e.DT_INT64_REF = 109] = \"DT_INT64_REF\", e[e.DT_BOOL_REF = 110] = \"DT_BOOL_REF\", e[e.DT_QINT8_REF = 111] = \"DT_QINT8_REF\", e[e.DT_QUINT8_REF = 112] = \"DT_QUINT8_REF\", e[e.DT_QINT32_REF = 113] = \"DT_QINT32_REF\", e[e.DT_BFLOAT16_REF = 114] = \"DT_BFLOAT16_REF\";\n}(DataType || (DataType = {})), function (e) {\n  !function (e) {\n    e[e.LEGACY = 0] = \"LEGACY\", e[e.V1 = 1] = \"V1\", e[e.V2 = 2] = \"V2\";\n  }(e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {}));\n}(SaverDef || (SaverDef = {}));\nvar CUSTOM_OPS = {};\nfunction registerOp(e, t) {\n  var a = {\n    tfOpName: e,\n    category: \"custom\",\n    inputs: [],\n    attrs: [],\n    customExecutor: t\n  };\n  CUSTOM_OPS[e] = a;\n}\nfunction getRegisteredOp(e) {\n  return CUSTOM_OPS[e];\n}\nfunction deregisterOp(e) {\n  delete CUSTOM_OPS[e];\n}\nfunction getParamValue(e, t, a, r) {\n  var n = t.inputParams[e];\n  if (n && void 0 !== n.inputIndexStart) {\n    var s = n.inputIndexStart,\n      o = 0 === n.inputIndexEnd ? void 0 : void 0 === n.inputIndexEnd ? s + 1 : n.inputIndexEnd;\n    if (\"tensor\" === n.type) return getTensor(t.inputNames[n.inputIndexStart], a, r);\n    if (\"tensors\" === n.type) return t.inputNames.slice(s, o).map(function (e) {\n      return getTensor(e, a, r);\n    });\n    var p = Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0], a, r).dataSync());\n    return \"number\" === n.type ? p[0] : p;\n  }\n  var u = t.attrParams[e];\n  return u && u.value;\n}\nfunction getTensor(e, t, a) {\n  var r = parseNodeName(e),\n    n = r[0],\n    s = r[1],\n    o = a.currentContextIds.find(function (e) {\n      return !!t[getNodeNameWithContextId(n, e)];\n    });\n  return void 0 !== o ? t[getNodeNameWithContextId(n, o)][s] : void 0;\n}\nfunction getTensorsForCurrentContenxt(e, t, a) {\n  return t[getNodeNameWithContextId(e, a.currentContextId)];\n}\nfunction getNodeNameAndIndex(e, t) {\n  var a = parseNodeName(e),\n    r = a[0],\n    n = a[1];\n  return [getNodeNameWithContextId(r, t && t.currentContextId), n];\n}\nfunction getNodeNameWithContextId(e, t) {\n  return t ? e + \"-\" + t : e;\n}\nfunction parseNodeName(e) {\n  var t = e.lastIndexOf(\":\");\n  return -1 === t ? [e, 0] : [e.substring(0, t), Number(e.substring(t + 1))];\n}\nfunction split$1(e, t) {\n  for (var a = [], r = 0; r < e.length; r += t) a.push(e.slice(r, r + t));\n  return a;\n}\nvar json = [{\n    tfOpName: \"Add\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"AddV2\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"AddN\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"BiasAdd\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sub\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"RealDiv\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Div\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"DivNoNan\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FloorDiv\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Mul\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Maximum\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Minimum\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Pow\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"SquaredDifference\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Mod\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FloorMod\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  arithmetic = Object.freeze({\n    json: json\n  }),\n  json$1 = [{\n    tfOpName: \"Abs\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Acos\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Asin\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Atan\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Atan2\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"y\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Ceil\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ClipByValue\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"clip_value_min\",\n      name: \"clipValueMin\",\n      type: \"number\"\n    }, {\n      tfName: \"clip_value_max\",\n      name: \"clipValueMax\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Complex\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"real\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"imag\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ComplexAbs\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Cos\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Cosh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Elu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Exp\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Floor\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Log\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Imag\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"Tout\",\n      name: \"outputType\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Neg\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Real\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"Tout\",\n      name: \"outputType\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Prelu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"alpha\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Relu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Relu6\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"clipValueMin\",\n      name: \"clipValueMin\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"clipValueMax\",\n      name: \"clipValueMax\",\n      type: \"number\",\n      defaultValue: 6\n    }]\n  }, {\n    tfOpName: \"Selu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sigmoid\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sin\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sinh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sqrt\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Rsqrt\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Square\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Tan\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Tanh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sign\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Round\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Expm1\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Log1p\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Reciprocal\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Softplus\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Asinh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Acosh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Atanh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Erf\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Prod\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axes\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\",\n      notSupported: !0\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LeakyRelu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"alpha\",\n      name: \"alpha\",\n      type: \"number\",\n      defaultValue: .2\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  basicMath = Object.freeze({\n    json: json$1\n  }),\n  json$2 = [{\n    tfOpName: \"LoopCond\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"pred\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Switch\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"data\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"pred\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Merge\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"Enter\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"frame_name\",\n      name: \"frameName\",\n      type: \"string\"\n    }, {\n      tfName: \"is_constant\",\n      name: \"isConstant\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Exit\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"NextIteration\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArrayV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"size\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"element_shape\",\n      name: \"elementShape\",\n      type: \"shape\"\n    }, {\n      tfName: \"dynamic_size\",\n      name: \"dynamicSize\",\n      type: \"bool\"\n    }, {\n      tfName: \"clear_after_read\",\n      name: \"clearAfterRead\",\n      type: \"bool\"\n    }, {\n      tfName: \"identical_element_shapes\",\n      name: \"identicalElementShapes\",\n      type: \"bool\"\n    }, {\n      tfName: \"tensor_array_name\",\n      name: \"name\",\n      type: \"string\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayWriteV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"index\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"tensor\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArrayReadV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"index\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArrayGatherV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"element_shape\",\n      name: \"elementShape\",\n      type: \"shape\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayScatterV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"tensor\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayConcatV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"element_shape_except0\",\n      name: \"elementShapeExcept0\",\n      type: \"shape\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArraySplitV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"tensor\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"lengths\",\n      type: \"number[]\"\n    }, {\n      start: 3,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"TensorArraySizeV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"flowIn\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayCloseV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }]\n  }],\n  control = Object.freeze({\n    json: json$2\n  }),\n  json$3 = [{\n    tfOpName: \"AvgPool\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"MaxPool\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"MaxPoolWithArgmax\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"include_batch_in_index\",\n      name: \"includeBatchInIndex\",\n      type: \"bool\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"AvgPool3D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"MaxPool3D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Conv1D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"stride\",\n      name: \"stride\",\n      type: \"number\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NWC\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"dilation\",\n      name: \"dilation\",\n      type: \"number\",\n      defaultValue: 1\n    }]\n  }, {\n    tfOpName: \"Conv2D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"useCudnnOnGpu\",\n      name: \"useCudnnOnGpu\",\n      type: \"bool\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"_FusedConv2D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      end: 0,\n      name: \"args\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"num_args\",\n      name: \"numArgs\",\n      type: \"number\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"explicit_paddings\",\n      name: \"explicitPaddings\",\n      type: \"number[]\",\n      defaultValue: []\n    }, {\n      tfName: \"use_cudnn_on_gpu\",\n      name: \"useCudnnOnGpu\",\n      type: \"bool\",\n      defaultValue: !0\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\",\n      defaultValue: [1, 1, 1, 1]\n    }, {\n      tfName: \"fused_ops\",\n      name: \"fusedOps\",\n      type: \"string[]\",\n      defaultValue: []\n    }, {\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: 1e-4\n    }]\n  }, {\n    tfOpName: \"Conv2DBackpropInput\",\n    category: \"convolution\",\n    inputs: [{\n      start: 2,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }, {\n      start: 0,\n      name: \"outputShape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"DepthwiseConv2d\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"input\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"DepthwiseConv2dNative\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"input\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"FusedDepthwiseConv2dNative\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      end: 0,\n      name: \"args\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"num_args\",\n      name: \"numArgs\",\n      type: \"number\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\",\n      defaultValue: [1, 1, 1, 1]\n    }, {\n      tfName: \"fused_ops\",\n      name: \"fusedOps\",\n      type: \"string[]\",\n      defaultValue: []\n    }]\n  }, {\n    tfOpName: \"Conv3D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }],\n  convolution = Object.freeze({\n    json: json$3\n  }),\n  json$4 = [{\n    tfOpName: \"Fill\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }, {\n      start: 1,\n      name: \"value\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"LinSpace\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"start\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"stop\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"num\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"OneHot\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"indices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"depth\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"onValue\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      start: 3,\n      name: \"offValue\",\n      type: \"number\",\n      defaultValue: 0\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      notSupported: !0\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Ones\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"OnesLike\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"RandomUniform\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"minval\",\n      name: \"minval\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"maxval\",\n      name: \"maxval\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"seed\",\n      name: \"seed\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"seed2\",\n      name: \"seed2\",\n      type: \"number\",\n      defaultValue: 0,\n      notSupported: !0\n    }, {\n      tfName: \"T\",\n      name: \"T\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Range\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"start\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"stop\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"step\",\n      type: \"number\",\n      defaultValue: 0\n    }],\n    attrs: [{\n      tfName: \"Tidx\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"TruncatedNormal\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"means\",\n      name: \"mean\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"stddev\",\n      name: \"stdDev\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"seed\",\n      name: \"seed\",\n      type: \"number\"\n    }, {\n      tfName: \"seed2\",\n      name: \"seed2\",\n      type: \"number\",\n      defaultValue: 0,\n      notSupported: !0\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"T\",\n      name: \"T\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Zeros\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"ZerosLike\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"Multinomial\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"logits\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"numSamples\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"seed\",\n      name: \"seed\",\n      type: \"number\"\n    }, {\n      tfName: \"seed2\",\n      name: \"seed2\",\n      type: \"number\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"output_dtype\",\n      name: \"output_dtype\",\n      type: \"dtype\"\n    }]\n  }],\n  creation = Object.freeze({\n    json: json$4\n  }),\n  json$5 = [{\n    tfOpName: \"NonMaxSuppressionV2\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"boxes\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scores\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"maxOutputSize\",\n      type: \"number\"\n    }, {\n      start: 3,\n      name: \"iouThreshold\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"NonMaxSuppressionV3\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"boxes\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scores\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"maxOutputSize\",\n      type: \"number\"\n    }, {\n      start: 3,\n      name: \"iouThreshold\",\n      type: \"number\"\n    }, {\n      start: 4,\n      name: \"scoreThreshold\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"NonMaxSuppressionV5\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"boxes\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scores\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"maxOutputSize\",\n      type: \"number\"\n    }, {\n      start: 3,\n      name: \"iouThreshold\",\n      type: \"number\"\n    }, {\n      start: 4,\n      name: \"scoreThreshold\",\n      type: \"number\"\n    }, {\n      start: 5,\n      name: \"softNmsSigma\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Where\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"condition\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ListDiff\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"y\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  dynamic = Object.freeze({\n    json: json$5\n  }),\n  json$6 = [{\n    tfOpName: \"TopKV2\",\n    category: \"evaluation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"k\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"sorted\",\n      name: \"sorted\",\n      type: \"bool\"\n    }]\n  }],\n  evaluation = Object.freeze({\n    json: json$6\n  }),\n  json$7 = [{\n    tfOpName: \"PlaceholderWithDefault\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"default\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"shape\",\n      name: \"shape\",\n      type: \"shape\"\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"Placeholder\",\n    category: \"graph\",\n    attrs: [{\n      tfName: \"shape\",\n      name: \"shape\",\n      type: \"shape\"\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"Const\",\n    category: \"graph\"\n  }, {\n    tfOpName: \"Identity\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"IdentityN\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"x\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"Snapshot\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Rank\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Size\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Shape\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"ShapeN\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"x\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"Print\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"data\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"message\",\n      name: \"message\",\n      type: \"string\"\n    }, {\n      tfName: \"first_n\",\n      name: \"firstN\",\n      type: \"number\",\n      notSupported: !0\n    }, {\n      tfName: \"summarize\",\n      name: \"summarize\",\n      type: \"number\",\n      defaultValue: 3\n    }]\n  }, {\n    tfOpName: \"NoOp\",\n    category: \"graph\",\n    inputs: []\n  }, {\n    tfOpName: \"StopGradient\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"FakeQuantWithMinMaxVars\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"min\",\n      name: \"min\",\n      type: \"number\"\n    }, {\n      tfName: \"max\",\n      name: \"max\",\n      type: \"number\"\n    }]\n  }],\n  graph = Object.freeze({\n    json: json$7\n  }),\n  json$8 = [{\n    tfOpName: \"ResizeBilinear\",\n    category: \"image\",\n    inputs: [{\n      start: 0,\n      name: \"images\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"size\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"align_corners\",\n      name: \"alignCorners\",\n      type: \"bool\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ResizeNearestNeighbor\",\n    category: \"image\",\n    inputs: [{\n      start: 0,\n      name: \"images\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"size\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"align_corners\",\n      name: \"alignCorners\",\n      type: \"bool\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"CropAndResize\",\n    category: \"image\",\n    inputs: [{\n      start: 0,\n      name: \"image\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"boxes\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"boxInd\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"cropSize\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"method\",\n      name: \"method\",\n      type: \"string\"\n    }, {\n      tfName: \"extrapolation_value\",\n      name: \"extrapolationValue\",\n      type: \"number\"\n    }]\n  }],\n  image$1 = Object.freeze({\n    json: json$8\n  }),\n  json$9 = [{\n    tfOpName: \"Equal\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"NotEqual\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Greater\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"GreaterEqual\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Less\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LessEqual\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LogicalAnd\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LogicalNot\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LogicalOr\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Select\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"condition\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"SelectV2\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"condition\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  logical = Object.freeze({\n    json: json$9\n  }),\n  json$10 = [{\n    tfOpName: \"_FusedMatMul\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      end: 0,\n      name: \"args\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"num_args\",\n      name: \"numArgs\",\n      type: \"number\"\n    }, {\n      tfName: \"fused_ops\",\n      name: \"fusedOps\",\n      type: \"string[]\",\n      defaultValue: []\n    }, {\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: 1e-4\n    }, {\n      tfName: \"transpose_a\",\n      name: \"transposeA\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"transpose_b\",\n      name: \"transposeB\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"MatMul\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"transpose_a\",\n      name: \"transposeA\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"transpose_b\",\n      name: \"transposeB\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"BatchMatMul\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"adj_x\",\n      name: \"transposeA\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"adj_y\",\n      name: \"transposeB\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"BatchMatMulV2\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"adj_x\",\n      name: \"transposeA\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"adj_y\",\n      name: \"transposeB\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Transpose\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"perm\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  matrices = Object.freeze({\n    json: json$10\n  }),\n  json$11 = [{\n    tfOpName: \"FusedBatchNorm\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scale\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"offset\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"mean\",\n      type: \"tensor\"\n    }, {\n      start: 4,\n      name: \"variance\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: .001\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FusedBatchNormV2\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scale\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"offset\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"mean\",\n      type: \"tensor\"\n    }, {\n      start: 4,\n      name: \"variance\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: .001\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FusedBatchNormV3\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scale\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"offset\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"mean\",\n      type: \"tensor\"\n    }, {\n      start: 4,\n      name: \"variance\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: .001\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LRN\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"depth_radius\",\n      name: \"radius\",\n      type: \"number\",\n      defaultValue: 5\n    }, {\n      tfName: \"bias\",\n      name: \"bias\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"alpha\",\n      name: \"alpha\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"beta\",\n      name: \"beta\",\n      type: \"number\",\n      defaultValue: .5\n    }]\n  }, {\n    tfOpName: \"Softmax\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"LogSoftmax\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"SparseToDense\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"sparseIndices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"outputShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"sparseValues\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"defaultValue\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"validate_indices\",\n      name: \"validateIndices\",\n      type: \"bool\",\n      defaultValue: !0,\n      notSupported: !0\n    }]\n  }],\n  normalization = Object.freeze({\n    json: json$11\n  }),\n  json$12 = [{\n    tfOpName: \"Max\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Mean\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Min\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Sum\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"All\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Any\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"ArgMax\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"ArgMin\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Prod\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }],\n  reduction = Object.freeze({\n    json: json$12\n  }),\n  json$13 = [{\n    tfOpName: \"ConcatV2\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      end: -1,\n      name: \"tensors\",\n      type: \"tensors\"\n    }, {\n      start: -1,\n      name: \"axis\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"N\",\n      name: \"n\",\n      type: \"number\",\n      defaultValue: 2\n    }]\n  }, {\n    tfOpName: \"Concat\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 1,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }, {\n      start: 0,\n      name: \"axis\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"N\",\n      name: \"n\",\n      type: \"number\",\n      defaultValue: 2\n    }]\n  }, {\n    tfOpName: \"GatherV2\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Gather\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"validate_indices\",\n      name: \"validateIndices\",\n      type: \"bool\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Reverse\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"dims\",\n      type: \"bool\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ReverseV2\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"Slice\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"begin\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"size\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"StridedSlice\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"begin\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"end\",\n      type: \"number[]\"\n    }, {\n      start: 3,\n      name: \"strides\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"begin_mask\",\n      name: \"beginMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"end_mask\",\n      name: \"endMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"new_axis_mask\",\n      name: \"newAxisMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"ellipsis_mask\",\n      name: \"ellipsisMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"shrink_axis_mask\",\n      name: \"shrinkAxisMask\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Pack\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Unpack\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"num\",\n      name: \"num\",\n      type: \"number\",\n      defaultValue: 0,\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Tile\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"reps\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"Split\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      start: 1,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"num_split\",\n      name: \"numOrSizeSplits\",\n      type: \"number\",\n      defaultValue: 1\n    }]\n  }, {\n    tfOpName: \"SplitV\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"numOrSizeSplits\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"ScatterNd\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"indices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"values\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"shape\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"GatherNd\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"SparseToDense\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"sparseIndices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"outputShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"sparseValues\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"defaultValue\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"validate_indices\",\n      name: \"validateIndices\",\n      type: \"bool\",\n      defaultValue: !1,\n      notSupported: !0\n    }]\n  }],\n  sliceJoin = Object.freeze({\n    json: json$13\n  }),\n  json$14 = [{\n    tfOpName: \"FFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"IFFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"RFFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"fft_length\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"IRFFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"fft_length\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }],\n  spectral = Object.freeze({\n    json: json$14\n  }),\n  json$15 = [{\n    tfOpName: \"Cast\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"SrcT\",\n      name: \"sdtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"DstT\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"ExpandDims\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Pad\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"padding\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"constant_value\",\n      name: \"constantValue\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"PadV2\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"padding\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"constantValue\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Reshape\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"shape\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"Squeeze\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      tfDeprecatedName: \"squeeze_dims\",\n      name: \"axis\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"SpaceToBatchND\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"blockShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"paddings\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"BatchToSpaceND\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"blockShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"crops\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"DepthToSpace\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"block_size\",\n      name: \"blockSize\",\n      type: \"number\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\"\n    }]\n  }],\n  transformation = Object.freeze({\n    json: json$15\n  }),\n  OperationMapper = function () {\n    function e() {\n      var e = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image$1, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation],\n        t = [].concat.apply([], e.map(function (e) {\n          return e.json;\n        }));\n      this.opMappers = t.reduce(function (e, t) {\n        return e[t.tfOpName] = t, e;\n      }, {});\n    }\n    return Object.defineProperty(e, \"Instance\", {\n      get: function get() {\n        return this._instance || (this._instance = new this());\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.transformGraph = function (e, t) {\n      var a = this;\n      void 0 === t && (t = {});\n      var r = [],\n        n = [],\n        s = e.node.reduce(function (e, t) {\n          return e[t.name] = a.mapNode(t), t.op.startsWith(\"Placeholder\") && r.push(e[t.name]), \"Const\" === t.op && n.push(e[t.name]), e;\n        }, {}),\n        o = [],\n        p = [],\n        u = {},\n        i = {};\n      null != t && (u = this.mapSignatureEntries(t.inputs), i = this.mapSignatureEntries(t.outputs));\n      var m = Object.keys(s);\n      return m.forEach(function (e) {\n        var t = s[e];\n        t.inputNames.forEach(function (e) {\n          var a = getNodeNameAndIndex(e)[0];\n          t.inputs.push(s[a]), s[a].children.push(t);\n        });\n      }), 0 === Object.keys(i).length ? m.forEach(function (e) {\n        var t = s[e];\n        0 === t.children.length && p.push(t);\n      }) : Object.keys(i).forEach(function (e) {\n        var t = getNodeNameAndIndex(e)[0],\n          a = s[t];\n        null != a && (a.signatureKey = i[e], p.push(a));\n      }), Object.keys(u).length > 0 ? Object.keys(u).forEach(function (e) {\n        var t = getNodeNameAndIndex(e)[0],\n          a = s[t];\n        a && (a.signatureKey = u[e], o.push(a));\n      }) : o = r, {\n        nodes: s,\n        inputs: o,\n        outputs: p,\n        weights: n,\n        placeholders: r,\n        signature: t\n      };\n    }, e.prototype.mapSignatureEntries = function (e) {\n      return Object.keys(e || {}).reduce(function (t, a) {\n        return t[e[a].name] = a, t;\n      }, {});\n    }, e.prototype.mapNode = function (e) {\n      var t = getRegisteredOp(e.op) || this.opMappers[e.op] || {};\n      null == e.attr && (e.attr = {});\n      var a = {\n        name: e.name,\n        op: e.op,\n        category: t.category,\n        inputNames: (e.input || []).map(function (e) {\n          return e.startsWith(\"^\") ? e.substr(1) : e;\n        }),\n        inputs: [],\n        children: [],\n        inputParams: {},\n        attrParams: {},\n        rawAttrs: e.attr\n      };\n      return null != t.inputs && (a.inputParams = t.inputs.reduce(function (e, t) {\n        return e[t.name] = {\n          type: t.type,\n          inputIndexStart: t.start,\n          inputIndexEnd: t.end\n        }, e;\n      }, {})), null != t.attrs && (a.attrParams = t.attrs.reduce(function (t, a) {\n        var r = a.type,\n          n = void 0;\n        switch (a.type) {\n          case \"string\":\n            void 0 === (n = getStringParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"string[]\":\n            void 0 === (n = getStringArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"number\":\n            void 0 === (n = getNumberParam(e.attr, a.tfName, a.defaultValue || 0)) && a.tfDeprecatedName && (n = getNumberParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"number[]\":\n            void 0 === (n = getNumericArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getNumericArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"bool\":\n            void 0 === (n = getBoolParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"bool[]\":\n            void 0 === (n = getBoolArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"shape\":\n            void 0 === (n = getTensorShapeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"shape[]\":\n            void 0 === (n = getTensorShapeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"dtype\":\n            void 0 === (n = getDtypeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"dtype[]\":\n            void 0 === (n = getDtypeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"tensor\":\n          case \"tensors\":\n            break;\n          default:\n            throw new Error(\"Unsupported param type: \" + a.type + \" for op: \" + e.op);\n        }\n        return t[a.name] = {\n          value: n,\n          type: r\n        }, t;\n      }, {})), a;\n    }, e;\n  }();\nfunction decodeBase64(e) {\n  var t = env().global;\n  if (void 0 !== t.atob) return t.atob(e);\n  if (\"undefined\" != typeof Buffer) return new Buffer(e, \"base64\").toString();\n  throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\");\n}\nfunction parseStringParam(e, t) {\n  var a = Array.isArray(e) ? String.fromCharCode.apply(null, e) : decodeBase64(e);\n  return t ? a : a.toLowerCase();\n}\nfunction getStringParam(e, t, a, r) {\n  void 0 === r && (r = !1);\n  var n = e[t];\n  return null != n ? parseStringParam(n.s, r) : a;\n}\nfunction getBoolParam(e, t, a) {\n  var r = e[t];\n  return r ? r.b : a;\n}\nfunction getNumberParam(e, t, a) {\n  var r = e[t] || {},\n    n = null != r.i ? r.i : null != r.f ? r.f : a;\n  return \"number\" == typeof n ? n : parseInt(n, 10);\n}\nfunction parseDtypeParam(e) {\n  switch (\"string\" == typeof e && (e = DataType[e]), e) {\n    case DataType.DT_FLOAT:\n      return \"float32\";\n    case DataType.DT_INT32:\n    case DataType.DT_INT64:\n    case DataType.DT_INT8:\n    case DataType.DT_UINT8:\n      return \"int32\";\n    case DataType.DT_BOOL:\n      return \"bool\";\n    case DataType.DT_DOUBLE:\n      return \"float32\";\n    case DataType.DT_STRING:\n      return \"string\";\n    default:\n      return null;\n  }\n}\nfunction getDtypeParam(e, t, a) {\n  var r = e[t];\n  return r && r.type ? parseDtypeParam(r.type) : a;\n}\nfunction getDtypeArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.type ? r.list.type.map(function (e) {\n    return parseDtypeParam(e);\n  }) : a;\n}\nfunction parseTensorShapeParam(e) {\n  if (!e.unknownRank) return null != e.dim ? e.dim.map(function (e) {\n    return \"number\" == typeof e.size ? e.size : parseInt(e.size, 10);\n  }) : [];\n}\nfunction getTensorShapeParam(e, t, a) {\n  var r = e[t];\n  return r && r.shape ? parseTensorShapeParam(r.shape) : a;\n}\nfunction getNumericArrayParam(e, t, a) {\n  var r = e[t];\n  return r ? ((r.list.f && r.list.f.length ? r.list.f : r.list.i) || []).map(function (e) {\n    return \"number\" == typeof e ? e : parseInt(e, 10);\n  }) : a;\n}\nfunction getStringArrayParam(e, t, a, r) {\n  void 0 === r && (r = !1);\n  var n = e[t];\n  return n && n.list && n.list.s ? n.list.s.map(function (e) {\n    return parseStringParam(e, r);\n  }) : a;\n}\nfunction getTensorShapeArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.shape ? r.list.shape.map(function (e) {\n    return parseTensorShapeParam(e);\n  }) : a;\n}\nfunction getBoolArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.b ? r.list.b : a;\n}\nvar NodeValueImpl = function () {\n    function e(e, t, a) {\n      var r = this;\n      this.node = e, this.tensorMap = t, this.context = a, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map(function (e) {\n        return r.getInput(e);\n      }), null != e.rawAttrs && (this.attrs = Object.keys(e.rawAttrs).reduce(function (e, t) {\n        return e[t] = r.getAttr(t), e;\n      }, {}));\n    }\n    return e.prototype.getInput = function (e) {\n      return getTensor(e, this.tensorMap, this.context);\n    }, e.prototype.getAttr = function (e, t) {\n      var a = this.node.rawAttrs[e];\n      if (null != a.tensor) return getTensor(e, this.tensorMap, this.context);\n      if (null != a.i || null != a.f) return getNumberParam(this.node.rawAttrs, e, t);\n      if (null != a.s) return getStringParam(this.node.rawAttrs, e, t);\n      if (null != a.b) return getBoolParam(this.node.rawAttrs, e, t);\n      if (null != a.shape) return getTensorShapeParam(this.node.rawAttrs, e, t);\n      if (null != a.type) return getDtypeParam(this.node.rawAttrs, e, t);\n      if (null != a.list) {\n        if (null != a.list.i || null != a.list.f) return getNumericArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.s) return getStringArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.shape) return getTensorShapeArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.b) return getBoolArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.type) return getDtypeArrayParam(this.node.rawAttrs, e, t);\n      }\n      return t;\n    }, e;\n  }(),\n  executeOp = function executeOp(e, t, a) {\n    switch (e.op) {\n      case \"BiasAdd\":\n      case \"AddV2\":\n      case \"Add\":\n        return [add(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"AddN\":\n        return [addN(getParamValue(\"tensors\", e, t, a))];\n      case \"FloorMod\":\n      case \"Mod\":\n        return [mod(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Mul\":\n        return [mul(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"RealDiv\":\n      case \"Div\":\n        return [div(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"DivNoNan\":\n        return [divNoNan(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"FloorDiv\":\n        return [floorDiv(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Sub\":\n        return [sub(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Minimum\":\n        return [minimum(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Maximum\":\n        return [maximum(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Pow\":\n        return [pow(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"SquaredDifference\":\n        return [squaredDifference(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$1 = function executeOp$1(e, t, a) {\n    switch (e.op) {\n      case \"Abs\":\n      case \"ComplexAbs\":\n        return [abs(getParamValue(\"x\", e, t, a))];\n      case \"Acos\":\n        return [acos(getParamValue(\"x\", e, t, a))];\n      case \"Acosh\":\n        return [acosh(getParamValue(\"x\", e, t, a))];\n      case \"Asin\":\n        return [asin(getParamValue(\"x\", e, t, a))];\n      case \"Asinh\":\n        return [asinh(getParamValue(\"x\", e, t, a))];\n      case \"Atan\":\n        return [atan(getParamValue(\"x\", e, t, a))];\n      case \"Atan2\":\n        return [atan2(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))];\n      case \"Atanh\":\n        return [atanh(getParamValue(\"x\", e, t, a))];\n      case \"Ceil\":\n        return [ceil(getParamValue(\"x\", e, t, a))];\n      case \"Complex\":\n        return [complex(getParamValue(\"real\", e, t, a), getParamValue(\"imag\", e, t, a))];\n      case \"Cos\":\n        return [cos(getParamValue(\"x\", e, t, a))];\n      case \"Cosh\":\n        return [cosh(getParamValue(\"x\", e, t, a))];\n      case \"Elu\":\n        return [elu(getParamValue(\"x\", e, t, a))];\n      case \"Erf\":\n        return [erf(getParamValue(\"x\", e, t, a))];\n      case \"Exp\":\n        return [exp(getParamValue(\"x\", e, t, a))];\n      case \"Expm1\":\n        return [expm1(getParamValue(\"x\", e, t, a))];\n      case \"Floor\":\n        return [floor(getParamValue(\"x\", e, t, a))];\n      case \"Log\":\n        return [log(getParamValue(\"x\", e, t, a))];\n      case \"Log1p\":\n        return [log1p(getParamValue(\"x\", e, t, a))];\n      case \"Imag\":\n        return [imag(getParamValue(\"x\", e, t, a))];\n      case \"Neg\":\n        return [neg(getParamValue(\"x\", e, t, a))];\n      case \"Reciprocal\":\n        return [reciprocal(getParamValue(\"x\", e, t, a))];\n      case \"Real\":\n        return [real(getParamValue(\"x\", e, t, a))];\n      case \"Relu\":\n        return [relu(getParamValue(\"x\", e, t, a))];\n      case \"Round\":\n        return [round(getParamValue(\"x\", e, t, a))];\n      case \"Selu\":\n        return [selu(getParamValue(\"x\", e, t, a))];\n      case \"Sigmoid\":\n        return [sigmoid(getParamValue(\"x\", e, t, a))];\n      case \"Sin\":\n        return [sin(getParamValue(\"x\", e, t, a))];\n      case \"Sign\":\n        return [sign(getParamValue(\"x\", e, t, a))];\n      case \"Sinh\":\n        return [sinh(getParamValue(\"x\", e, t, a))];\n      case \"Softplus\":\n        return [softplus(getParamValue(\"x\", e, t, a))];\n      case \"Sqrt\":\n        return [sqrt(getParamValue(\"x\", e, t, a))];\n      case \"Square\":\n        return [square(getParamValue(\"x\", e, t, a))];\n      case \"Tanh\":\n        return [tanh(getParamValue(\"x\", e, t, a))];\n      case \"Tan\":\n        return [tan(getParamValue(\"x\", e, t, a))];\n      case \"Relu6\":\n      case \"ClipByValue\":\n        return [clipByValue(getParamValue(\"x\", e, t, a), getParamValue(\"clipValueMin\", e, t, a), getParamValue(\"clipValueMax\", e, t, a))];\n      case \"Rsqrt\":\n        return [rsqrt(getTensor(e.inputNames[0], t, a))];\n      case \"Prod\":\n        return [prod(getParamValue(\"x\", e, t, a), getParamValue(\"axes\", e, t, a))];\n      case \"LeakyRelu\":\n        return [leakyRelu(getParamValue(\"x\", e, t, a), getParamValue(\"alpha\", e, t, a))];\n      case \"Prelu\":\n        return [prelu(getParamValue(\"x\", e, t, a), getParamValue(\"alpha\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  TensorArray = function () {\n    function e(t, a, r, n, s, o, p) {\n      this.name = t, this.dtype = a, this.maxSize = r, this.elementShape = n, this.identicalElementShapes = s, this.dynamicSize = o, this.clearAfterRead = p, this.tensors = [], this.closed_ = !1, this.id = e.nextId++;\n    }\n    return Object.defineProperty(e.prototype, \"closed\", {\n      get: function get() {\n        return this.closed_;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.clearAndClose = function () {\n      this.tensors.forEach(function (e) {\n        return e.tensor.dispose();\n      }), this.tensors = [], this.closed_ = !0;\n    }, e.prototype.size = function () {\n      return this.tensors.length;\n    }, e.prototype.read = function (e) {\n      if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n      if (e < 0 || e >= this.tensors.length) throw new Error(\"Tried to read from index \" + e + \", but array size is: \" + this.tensors.length);\n      var t = this.tensors[e];\n      if (t.cleared) throw new Error(\"TensorArray \" + this.name + \": Could not read index \" + e + \" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");\n      return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;\n    }, e.prototype.readMany = function (e) {\n      var t = this;\n      return e.map(function (e) {\n        return t.read(e);\n      });\n    }, e.prototype.write = function (e, t) {\n      if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n      if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error(\"Tried to write to index \" + e + \", but array is not resizeable and size is: \" + this.maxSize);\n      var a = this.tensors[e] || {};\n      if (t.dtype !== this.dtype) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \",\\n          because the value dtype is \" + t.dtype + \", but TensorArray dtype is \" + this.dtype + \".\");\n      if (0 !== this.size() || null != this.elementShape && 0 !== this.elementShape.length || (this.elementShape = t.shape), this.assertShapesMatchAllowUndefinedSize(this.elementShape, t.shape, \"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \".\"), a && a.read) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been read.\");\n      if (a && a.written) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been written.\");\n      a.tensor = t, a.written = !0, this.tensors[e] = a;\n    }, e.prototype.writeMany = function (e, t) {\n      var a = this;\n      if (e.length !== t.length) throw new Error(\"TensorArray \" + this.name + \": could not write multiple tensors,because the index size: \" + e.length + \" is not the same as tensors size: \" + t.length + \".\");\n      e.forEach(function (e, r) {\n        return a.write(e, t[r]);\n      });\n    }, e.prototype.gather = function (e, t) {\n      if (t && t !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but gather requested dtype \" + t);\n      if (!e) {\n        e = [];\n        for (var a = 0; a < this.size(); a++) e.push(a);\n      }\n      if (0 === e.length) return tensor([], [0].concat(this.elementShape));\n      var r = this.readMany(e);\n      return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: \"), stack(r, 0);\n    }, e.prototype.concat = function (e) {\n      if (e && e !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but concat requested dtype \" + e);\n      if (0 === this.size()) return tensor([], [0].concat(this.elementShape));\n      for (var t = [], a = 0; a < this.size(); a++) t.push(a);\n      var r = this.readMany(t);\n      return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: tensor array shape (\" + this.elementShape + \") vs first tensor shape (\" + r[0].shape + \")\"), concat(r, 0);\n    }, e.prototype.scatter = function (e, t) {\n      if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n      if (e.length !== t.shape[0]) throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \" + e.length + \" vs. \" + t.shape[0]);\n      var a = Math.max.apply(Math, e);\n      if (!this.dynamicSize && a >= this.maxSize) throw new Error(\"Max index must be < array size (\" + a + \"  vs. \" + this.maxSize + \")\");\n      this.writeMany(e, unstack(t, 0));\n    }, e.prototype.split = function (e, t) {\n      var a = this;\n      if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n      var r = 0,\n        n = e.map(function (e) {\n          return r += e;\n        });\n      if (r !== t.shape[0]) throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \" + r + \", and tensor's shape is: \" + t.shape);\n      if (!this.dynamicSize && e.length !== this.maxSize) throw new Error(\"TensorArray's size is not equal to the size of lengths (\" + this.maxSize + \" vs. \" + e.length + \"), and the TensorArray is not marked as dynamically resizeable\");\n      var s = 0 === r ? 0 : t.size / r,\n        o = [];\n      tidy(function () {\n        t = t.reshape([1, r, s]);\n        for (var p = 0; p < e.length; ++p) {\n          var u = [0, 0 === p ? 0 : n[p - 1], 0],\n            i = [1, e[p], s];\n          o[p] = slice(t, u, i).reshape(a.elementShape);\n        }\n        return o;\n      });\n      for (var p = [], u = 0; u < e.length; u++) p[u] = u;\n      this.writeMany(p, o);\n    }, e.prototype.assertShapesMatchAllowUndefinedSize = function (e, t, a) {\n      void 0 === a && (a = \"\"), util.assert(this.shapesEqualAllowUndefinedSize(e, t), function () {\n        return a + \" Shapes \" + e + \" and \" + t + \" must match\";\n      });\n    }, e.prototype.shapesEqualAllowUndefinedSize = function (e, t) {\n      if (e.length !== t.length) return !1;\n      for (var a = 0; a < e.length; a++) if (-1 !== e[a] && -1 !== t[a] && e[a] !== t[a]) return !1;\n      return !0;\n    }, e.nextId = 0, e;\n  }(),\n  _this = void 0,\n  executeOp$2 = function executeOp$2(e, t, a) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var r, n, s, o, p, u, i, m, l, c, d, y, f, g, h, N, x, V, b, P, T, v, O, S, _, w, A, D, E, I, M, C, k, z, F;\n      return __generator(this, function (j) {\n        switch (j.label) {\n          case 0:\n            switch (e.op) {\n              case \"LoopCond\":\n                return [3, 1];\n              case \"Switch\":\n                return [3, 2];\n              case \"Merge\":\n                return [3, 4];\n              case \"Enter\":\n                return [3, 5];\n              case \"Exit\":\n                return [3, 6];\n              case \"NextIteration\":\n                return [3, 7];\n              case \"TensorArrayV3\":\n                return [3, 8];\n              case \"TensorArrayWriteV3\":\n                return [3, 9];\n              case \"TensorArrayReadV3\":\n                return [3, 10];\n              case \"TensorArrayGatherV3\":\n                return [3, 11];\n              case \"TensorArrayScatterV3\":\n                return [3, 12];\n              case \"TensorArrayConcatV3\":\n                return [3, 13];\n              case \"TensorArraySplitV3\":\n                return [3, 14];\n              case \"TensorArraySizeV3\":\n                return [3, 15];\n              case \"TensorArrayCloseV3\":\n                return [3, 16];\n            }\n            return [3, 17];\n          case 1:\n            return [2, [getParamValue(\"pred\", e, t, a).clone()]];\n          case 2:\n            return r = getParamValue(\"pred\", e, t, a), n = getParamValue(\"data\", e, t, a), [4, r.data()];\n          case 3:\n            return [2, j.sent()[0] ? [void 0, n.clone()] : [n.clone(), void 0]];\n          case 4:\n            return [2, (s = e.inputNames.find(function (e) {\n              return void 0 !== getTensor(e, t, a);\n            })) ? [getTensor(s, t, a).clone()] : void 0];\n          case 5:\n            return o = getParamValue(\"frameName\", e, t, a), p = getParamValue(\"tensor\", e, t, a), a.enterFrame(o), [2, [p.clone()]];\n          case 6:\n            return u = getParamValue(\"tensor\", e, t, a), a.exitFrame(), [2, [u.clone()]];\n          case 7:\n            return i = getParamValue(\"tensor\", e, t, a), a.nextIteration(), [2, [i.clone()]];\n          case 8:\n            return m = getParamValue(\"size\", e, t, a), l = getParamValue(\"dtype\", e, t, a), c = getParamValue(\"elementShape\", e, t, a), d = getParamValue(\"dynamicSize\", e, t, a), y = getParamValue(\"clearAfterRead\", e, t, a), f = getParamValue(\"identicalElementShapes\", e, t, a), g = getParamValue(\"name\", e, t, a), h = new TensorArray(g, l, m, c, f, d, y), a.addTensorArray(h), [2, [scalar(h.id), scalar(1)]];\n          case 9:\n            return N = getParamValue(\"tensorArrayId\", e, t, a), x = getParamValue(\"index\", e, t, a), V = getParamValue(\"tensor\", e, t, a), a.getTensorArray(N).write(x, V), [2, [scalar(1)]];\n          case 10:\n            return b = getParamValue(\"tensorArrayId\", e, t, a), P = getParamValue(\"index\", e, t, a), [2, [a.getTensorArray(b).read(P)]];\n          case 11:\n            return T = getParamValue(\"tensorArrayId\", e, t, a), v = getParamValue(\"indices\", e, t, a), O = getParamValue(\"dtype\", e, t, a), [2, [a.getTensorArray(T).gather(v, O)]];\n          case 12:\n            return S = getParamValue(\"tensorArrayId\", e, t, a), _ = getParamValue(\"indices\", e, t, a), w = getParamValue(\"tensor\", e, t, a), a.getTensorArray(S).scatter(_, w), [2, [scalar(1)]];\n          case 13:\n            return A = getParamValue(\"tensorArrayId\", e, t, a), D = a.getTensorArray(A), E = getParamValue(\"dtype\", e, t, a), [2, [D.concat(E)]];\n          case 14:\n            return I = getParamValue(\"tensorArrayId\", e, t, a), M = getParamValue(\"tensor\", e, t, a), C = getParamValue(\"lengths\", e, t, a), a.getTensorArray(I).split(C, M), [2, [scalar(1)]];\n          case 15:\n            return k = getParamValue(\"tensorArrayId\", e, t, a), z = a.getTensorArray(k), [2, [scalar(z.size(), \"int32\")]];\n          case 16:\n            return F = getParamValue(\"tensorArrayId\", e, t, a), a.getTensorArray(F).clearAndClose(), [2, [scalar(0)]];\n          case 17:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n        }\n      });\n    });\n  },\n  executeOp$3 = function executeOp$3(e, t, a) {\n    switch (e.op) {\n      case \"Conv1D\":\n        var r = getParamValue(\"stride\", e, t, a),\n          n = getParamValue(\"pad\", e, t, a),\n          s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(),\n          o = getParamValue(\"dilation\", e, t, a);\n        return [conv1d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), r, n, s, o)];\n      case \"Conv2D\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n        var p = getParamValue(\"dilations\", e, t, a);\n        return [conv2d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [r[1], r[2]], n, s, [p[1], p[2]])];\n      case \"_FusedConv2D\":\n      case \"FusedDepthwiseConv2dNative\":\n        var u = getParamValue(\"fusedOps\", e, t, a),\n          i = u[0],\n          m = u[1],\n          l = \"biasadd\" === i,\n          c = \"prelu\" === m,\n          d = \"fusedbatchnorm\" === i,\n          y = getParamValue(\"numArgs\", e, t, a);\n        if (l) {\n          if (c && 2 !== y) throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n          if (!c && 1 !== y) throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\");\n        }\n        if (d) throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.\");\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), p = getParamValue(\"dilations\", e, t, a);\n        var f = getParamValue(\"args\", e, t, a),\n          g = f[0],\n          h = f[1];\n        return [(\"_FusedConv2D\" === e.op ? fused.conv2d : fused.depthwiseConv2d)({\n          x: getParamValue(\"x\", e, t, a),\n          filter: getParamValue(\"filter\", e, t, a),\n          strides: [r[1], r[2]],\n          pad: n,\n          dataFormat: s,\n          dilations: [p[1], p[2]],\n          bias: g,\n          activation: m,\n          preluActivationWeights: h\n        })];\n      case \"Conv2DBackpropInput\":\n      case \"Conv2dTranspose\":\n        var N = getParamValue(\"outputShape\", e, t, a);\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a);\n        return [conv2dTranspose(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), N, [r[1], r[2]], n)];\n      case \"DepthwiseConv2dNative\":\n      case \"DepthwiseConv2d\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), p = getParamValue(\"dilations\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n        return [depthwiseConv2d(getParamValue(\"input\", e, t, a), getParamValue(\"filter\", e, t, a), [r[1], r[2]], n, s, [p[1], p[2]])];\n      case \"Conv3D\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), p = getParamValue(\"dilations\", e, t, a);\n        return [conv3d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [r[1], r[2], r[3]], n, s, [p[1], p[2], p[3]])];\n      case \"AvgPool\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a);\n        var x = getParamValue(\"kernelSize\", e, t, a);\n        return [avgPool(getParamValue(\"x\", e, t, a), [x[1], x[2]], [r[1], r[2]], n)];\n      case \"MaxPool\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n        return [maxPool(getParamValue(\"x\", e, t, a), [x[1], x[2]], [r[1], r[2]], n)];\n      case \"MaxPoolWithArgmax\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n        var V = getParamValue(\"includeBatchInIndex\", e, t, a),\n          b = maxPoolWithArgmax(getParamValue(\"x\", e, t, a), [x[1], x[2]], [r[1], r[2]], n, V);\n        return [b.result, b.indexes];\n      case \"AvgPool3D\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n        return [avgPool3d(getParamValue(\"x\", e, t, a), [x[1], x[2], x[3]], [r[1], r[2], r[3]], n)];\n      case \"MaxPool3D\":\n        r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n        return [maxPool3d(getParamValue(\"x\", e, t, a), [x[1], x[2], x[3]], [r[1], r[2], r[3]], n)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$4 = function executeOp$4(e, t, a) {\n    switch (e.op) {\n      case \"Fill\":\n        var r = getParamValue(\"shape\", e, t, a),\n          n = getParamValue(\"dtype\", e, t, a),\n          s = getParamValue(\"value\", e, t, a);\n        return [fill(r, s, n)];\n      case \"LinSpace\":\n        var o = getParamValue(\"start\", e, t, a),\n          p = getParamValue(\"stop\", e, t, a),\n          u = getParamValue(\"num\", e, t, a);\n        return [linspace(o, p, u)];\n      case \"Multinomial\":\n        var i = getParamValue(\"logits\", e, t, a),\n          m = getParamValue(\"numSamples\", e, t, a),\n          l = getParamValue(\"seed\", e, t, a);\n        return [multinomial(i, m, l)];\n      case \"OneHot\":\n        var c = getParamValue(\"indices\", e, t, a),\n          d = getParamValue(\"depth\", e, t, a),\n          y = getParamValue(\"onValue\", e, t, a),\n          f = getParamValue(\"offValue\", e, t, a);\n        return [oneHot(c, d, y, f)];\n      case \"Ones\":\n        return [ones(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"OnesLike\":\n        return [onesLike(getParamValue(\"x\", e, t, a))];\n      case \"RandomUniform\":\n        return [randomUniform(getParamValue(\"shape\", e, t, a), getParamValue(\"minval\", e, t, a), getParamValue(\"maxval\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"Range\":\n        o = getParamValue(\"start\", e, t, a);\n        var g = getParamValue(\"stop\", e, t, a),\n          h = getParamValue(\"step\", e, t, a);\n        return [range(o, g, h, getParamValue(\"dtype\", e, t, a))];\n      case \"TruncatedNormal\":\n        r = getParamValue(\"shape\", e, t, a);\n        var N = getParamValue(\"mean\", e, t, a),\n          x = getParamValue(\"stdDev\", e, t, a);\n        l = getParamValue(\"seed\", e, t, a);\n        return [truncatedNormal(r, N, x, getParamValue(\"dtype\", e, t, a), l)];\n      case \"Zeros\":\n        return [zeros(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"ZerosLike\":\n        return [zerosLike(getParamValue(\"x\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  _this$1 = void 0,\n  executeOp$5 = function executeOp$5(e, t, a) {\n    return __awaiter(_this$1, void 0, void 0, function () {\n      var r, n, s, o, p, u, i, m;\n      return __generator(this, function (l) {\n        switch (l.label) {\n          case 0:\n            switch (e.op) {\n              case \"NonMaxSuppressionV5\":\n              case \"NonMaxSuppressionV3\":\n              case \"NonMaxSuppressionV2\":\n                return [3, 1];\n              case \"Where\":\n                return [3, 5];\n              case \"ListDiff\":\n                return [3, 7];\n            }\n            return [3, 8];\n          case 1:\n            return r = getParamValue(\"boxes\", e, t, a), n = getParamValue(\"scores\", e, t, a), s = getParamValue(\"maxOutputSize\", e, t, a), o = getParamValue(\"iouThreshold\", e, t, a), p = getParamValue(\"scoreThreshold\", e, t, a), \"NonMaxSuppressionV5\" !== e.op ? [3, 3] : (u = getParamValue(\"softNmsSigma\", e, t, a), [4, image.nonMaxSuppressionWithScoreAsync(r, n, s, o, p, u)]);\n          case 2:\n            return [2, [(m = l.sent()).selectedIndices, m.selectedScores]];\n          case 3:\n            return [4, image.nonMaxSuppressionAsync(r, n, s, o, p)];\n          case 4:\n            return [2, [l.sent()]];\n          case 5:\n            return i = getParamValue(\"condition\", e, t, a).asType(\"bool\"), [4, whereAsync(i)];\n          case 6:\n            return m = [l.sent()], i.dispose(), [2, m];\n          case 7:\n            return [2, setdiff1dAsync(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))];\n          case 8:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n        }\n      });\n    });\n  },\n  executeOp$6 = function executeOp$6(e, t, a) {\n    switch (e.op) {\n      case \"TopKV2\":\n        var r = getParamValue(\"x\", e, t, a),\n          n = getParamValue(\"k\", e, t, a),\n          s = getParamValue(\"sorted\", e, t, a),\n          o = topk(r, n, s);\n        return [o.values, o.indices];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$7 = function executeOp$7(e, t, a) {\n    switch (e.op) {\n      case \"Const\":\n        return t[e.name];\n      case \"PlaceholderWithDefault\":\n        var r = getParamValue(\"default\", e, t, a);\n        return [getTensor(e.name, t, a) || r];\n      case \"Placeholder\":\n        return [getTensor(e.name, t, a)];\n      case \"Identity\":\n      case \"StopGradient\":\n      case \"FakeQuantWithMinMaxVars\":\n        return [getParamValue(\"x\", e, t, a).clone()];\n      case \"IdentityN\":\n        return getParamValue(\"x\", e, t, a).map(function (e) {\n          return e.clone();\n        });\n      case \"Snapshot\":\n        return [getParamValue(\"x\", e, t, a).clone()];\n      case \"Shape\":\n        return [tensor1d(getParamValue(\"x\", e, t, a).shape, \"int32\")];\n      case \"ShapeN\":\n        return getParamValue(\"x\", e, t, a).map(function (e) {\n          return tensor1d(e.shape);\n        });\n      case \"Size\":\n        return [scalar(getParamValue(\"x\", e, t, a).size, \"int32\")];\n      case \"Rank\":\n        return [scalar(getParamValue(\"x\", e, t, a).rank, \"int32\")];\n      case \"NoOp\":\n        return [scalar(1)];\n      case \"Print\":\n        var n = getParamValue(\"x\", e, t, a),\n          s = getParamValue(\"data\", e, t, a),\n          o = getParamValue(\"message\", e, t, a),\n          p = getParamValue(\"summarize\", e, t, a);\n        console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"), console.log(o);\n        for (var u = 0; u < s.length; u++) console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0, p));\n        return [n];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$8 = function executeOp$8(e, t, a) {\n    switch (e.op) {\n      case \"ResizeBilinear\":\n        var r = getParamValue(\"images\", e, t, a),\n          n = getParamValue(\"size\", e, t, a),\n          s = getParamValue(\"alignCorners\", e, t, a);\n        return [image.resizeBilinear(r, [n[0], n[1]], s)];\n      case \"ResizeNearestNeighbor\":\n        r = getParamValue(\"images\", e, t, a), n = getParamValue(\"size\", e, t, a), s = getParamValue(\"alignCorners\", e, t, a);\n        return [image.resizeNearestNeighbor(r, [n[0], n[1]], s)];\n      case \"CropAndResize\":\n        var o = getParamValue(\"image\", e, t, a),\n          p = getParamValue(\"boxes\", e, t, a),\n          u = getParamValue(\"boxInd\", e, t, a),\n          i = getParamValue(\"cropSize\", e, t, a),\n          m = getParamValue(\"method\", e, t, a),\n          l = getParamValue(\"extrapolationValue\", e, t, a);\n        return [image.cropAndResize(o, p, u, i, m, l)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$9 = function executeOp$9(e, t, a) {\n    switch (e.op) {\n      case \"Equal\":\n        return [equal(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"NotEqual\":\n        return [notEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Greater\":\n        return [greater(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"GreaterEqual\":\n        return [greaterEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Less\":\n        return [less(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"LessEqual\":\n        return [lessEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"LogicalAnd\":\n        return [logicalAnd(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"LogicalNot\":\n        return [logicalNot(getParamValue(\"a\", e, t, a))];\n      case \"LogicalOr\":\n        return [logicalOr(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Select\":\n      case \"SelectV2\":\n        return [where(getParamValue(\"condition\", e, t, a), getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$10 = function executeOp$10(e, t, a) {\n    switch (e.op) {\n      case \"BatchMatMul\":\n      case \"BatchMatMulV2\":\n      case \"MatMul\":\n        return [matMul(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a), getParamValue(\"transposeA\", e, t, a), getParamValue(\"transposeB\", e, t, a))];\n      case \"Transpose\":\n        return [transpose(getParamValue(\"x\", e, t, a), getParamValue(\"perm\", e, t, a))];\n      case \"_FusedMatMul\":\n        var r = getParamValue(\"fusedOps\", e, t, a),\n          n = r[0],\n          s = r[1],\n          o = \"biasadd\" === n,\n          p = \"prelu\" === s,\n          u = getParamValue(\"numArgs\", e, t, a);\n        if (o) {\n          if (p && 2 !== u) throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n          if (!p && 1 !== u) throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\");\n        }\n        var i = getParamValue(\"args\", e, t, a),\n          m = i[0],\n          l = i[1];\n        return [fused.matMul({\n          a: getParamValue(\"a\", e, t, a),\n          b: getParamValue(\"b\", e, t, a),\n          transposeA: getParamValue(\"transposeA\", e, t, a),\n          transposeB: getParamValue(\"transposeB\", e, t, a),\n          bias: m,\n          activation: s,\n          preluActivationWeights: l\n        })];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$11 = function executeOp$11(e, t, a) {\n    switch (e.op) {\n      case \"FusedBatchNorm\":\n      case \"FusedBatchNormV2\":\n      case \"FusedBatchNormV3\":\n        return [batchNorm(getParamValue(\"x\", e, t, a), getParamValue(\"mean\", e, t, a), getParamValue(\"variance\", e, t, a), getParamValue(\"offset\", e, t, a), getParamValue(\"scale\", e, t, a), getParamValue(\"epsilon\", e, t, a))];\n      case \"LRN\":\n        return [localResponseNormalization(getParamValue(\"x\", e, t, a), getParamValue(\"radius\", e, t, a), getParamValue(\"bias\", e, t, a), getParamValue(\"alpha\", e, t, a), getParamValue(\"beta\", e, t, a))];\n      case \"Softmax\":\n        return [softmax(getParamValue(\"x\", e, t, a))];\n      case \"LogSoftmax\":\n        return [logSoftmax(getParamValue(\"x\", e, t, a))];\n      case \"SparseToDense\":\n        return [sparseToDense(getParamValue(\"sparseIndices\", e, t, a), getParamValue(\"outputShape\", e, t, a), getParamValue(\"sparseValues\", e, t, a), getParamValue(\"defaultValue\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$12 = function executeOp$12(e, t, a) {\n    switch (e.op) {\n      case \"Max\":\n        var r = getParamValue(\"axis\", e, t, a),\n          n = getParamValue(\"keepDims\", e, t, a);\n        return [max(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Mean\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [mean(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Min\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [min(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Sum\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [sum(getParamValue(\"x\", e, t, a), r, n)];\n      case \"All\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [all(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Any\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [any(getParamValue(\"x\", e, t, a), r, n)];\n      case \"ArgMax\":\n        r = getParamValue(\"axis\", e, t, a);\n        return [argMax(getParamValue(\"x\", e, t, a), r)];\n      case \"ArgMin\":\n        r = getParamValue(\"axis\", e, t, a);\n        return [argMin(getParamValue(\"x\", e, t, a), r)];\n      case \"Prod\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [prod(getParamValue(\"x\", e, t, a), r, n)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$13 = function executeOp$13(e, t, a) {\n    switch (e.op) {\n      case \"ConcatV2\":\n      case \"Concat\":\n        var r = getParamValue(\"n\", e, t, a),\n          n = getParamValue(\"axis\", e, t, a),\n          s = getParamValue(\"tensors\", e, t, a);\n        return s = s.slice(0, r), [concat(s, n)];\n      case \"GatherV2\":\n      case \"Gather\":\n        n = getParamValue(\"axis\", e, t, a);\n        var o = getParamValue(\"x\", e, t, a),\n          p = getParamValue(\"indices\", e, t, a);\n        return [gather(o, p.asType(\"int32\"), n)];\n      case \"ReverseV2\":\n      case \"Reverse\":\n        n = getParamValue(\"axis\", e, t, a), o = getParamValue(\"x\", e, t, a);\n        return [reverse(o, n)];\n      case \"Slice\":\n        var u = getParamValue(\"begin\", e, t, a),\n          i = getParamValue(\"size\", e, t, a);\n        return [slice(getParamValue(\"x\", e, t, a), u, i)];\n      case \"StridedSlice\":\n        u = getParamValue(\"begin\", e, t, a);\n        var m = getParamValue(\"end\", e, t, a),\n          l = getParamValue(\"strides\", e, t, a),\n          c = getParamValue(\"beginMask\", e, t, a),\n          d = getParamValue(\"endMask\", e, t, a),\n          y = getParamValue(\"ellipsisMask\", e, t, a),\n          f = getParamValue(\"newAxisMask\", e, t, a),\n          g = getParamValue(\"shrinkAxisMask\", e, t, a),\n          h = getParamValue(\"x\", e, t, a);\n        if (1 === u.length && h.shape.length > 1) for (var N = 1; N < h.shape.length; N++) u.push(0), m.push(h.shape[N]), l.push(l[0]);\n        return [stridedSlice(h, u, m, l, c, d, y, f, g)];\n      case \"Pack\":\n        return tidy(function () {\n          var r = getParamValue(\"axis\", e, t, a),\n            n = getParamValue(\"tensors\", e, t, a),\n            s = n[0].shape,\n            o = n[0].squeeze().shape,\n            p = n.map(function (e) {\n              var t = util.arraysEqual(e.shape, s);\n              if (!t && !util.arraysEqual(e.squeeze().shape, o)) throw new Error(\"the input tensors shape does not match\");\n              return t ? e : e.reshape(s);\n            });\n          return [stack(p, r)];\n        });\n      case \"Unpack\":\n        return tidy(function () {\n          var r = getParamValue(\"axis\", e, t, a),\n            n = getParamValue(\"tensor\", e, t, a);\n          return unstack(n, r);\n        });\n      case \"Tile\":\n        var x = getParamValue(\"reps\", e, t, a);\n        return [tile(getParamValue(\"x\", e, t, a), x)];\n      case \"Split\":\n      case \"SplitV\":\n        n = getParamValue(\"axis\", e, t, a);\n        var V = getParamValue(\"numOrSizeSplits\", e, t, a);\n        return split(getParamValue(\"x\", e, t, a), V, n);\n      case \"ScatterNd\":\n        p = getParamValue(\"indices\", e, t, a);\n        var b = getParamValue(\"values\", e, t, a),\n          P = getParamValue(\"shape\", e, t, a);\n        return [scatterND(p, b, P)];\n      case \"GatherNd\":\n        var T = getParamValue(\"x\", e, t, a);\n        p = getParamValue(\"indices\", e, t, a);\n        return [gatherND(T, p)];\n      case \"SparseToDense\":\n        p = getParamValue(\"sparseIndices\", e, t, a), P = getParamValue(\"outputShape\", e, t, a);\n        var v = getParamValue(\"sparseValues\", e, t, a),\n          O = getParamValue(\"defaultValue\", e, t, a);\n        return [sparseToDense(p, v, P, v.dtype === O.dtype ? O : O.asType(v.dtype))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$14 = function executeOp$14(e, t, a) {\n    switch (e.op) {\n      case \"FFT\":\n        return [fft(getParamValue(\"x\", e, t, a))];\n      case \"IFFT\":\n        return [ifft(getParamValue(\"x\", e, t, a))];\n      case \"RFFT\":\n        return [rfft(getParamValue(\"x\", e, t, a))];\n      case \"IRFFT\":\n        return [irfft(getParamValue(\"x\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$15 = function executeOp$15(e, t, a) {\n    switch (e.op) {\n      case \"Cast\":\n        return [cast(getParamValue(\"x\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"ExpandDims\":\n        var r = getParamValue(\"axis\", e, t, a);\n        return [expandDims(getParamValue(\"x\", e, t, a), r)];\n      case \"Squeeze\":\n        r = getParamValue(\"axis\", e, t, a);\n        return [squeeze(getParamValue(\"x\", e, t, a), r)];\n      case \"Reshape\":\n        return [reshape(getParamValue(\"x\", e, t, a), getParamValue(\"shape\", e, t, a))];\n      case \"PadV2\":\n      case \"Pad\":\n        return [pad(getParamValue(\"x\", e, t, a), split$1(getParamValue(\"padding\", e, t, a), 2), getParamValue(\"constantValue\", e, t, a))];\n      case \"SpaceToBatchND\":\n        var n = getParamValue(\"blockShape\", e, t, a),\n          s = split$1(getParamValue(\"paddings\", e, t, a), 2);\n        return [spaceToBatchND(getParamValue(\"x\", e, t, a), n, s)];\n      case \"BatchToSpaceND\":\n        n = getParamValue(\"blockShape\", e, t, a);\n        var o = split$1(getParamValue(\"crops\", e, t, a), 2);\n        return [batchToSpaceND(getParamValue(\"x\", e, t, a), n, o)];\n      case \"DepthToSpace\":\n        var p = getParamValue(\"blockSize\", e, t, a),\n          u = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n        return [depthToSpace(getParamValue(\"x\", e, t, a), p, u)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  };\nfunction executeOp$16(e, t, a) {\n  var r = function (e, t, a) {\n    switch (e.category) {\n      case \"arithmetic\":\n        return tidy(function () {\n          return executeOp(e, t, a);\n        });\n      case \"basic_math\":\n        return tidy(function () {\n          return executeOp$1(e, t, a);\n        });\n      case \"control\":\n        return executeOp$2(e, t, a);\n      case \"convolution\":\n        return tidy(function () {\n          return executeOp$3(e, t, a);\n        });\n      case \"creation\":\n        return tidy(function () {\n          return executeOp$4(e, t, a);\n        });\n      case \"dynamic\":\n        return executeOp$5(e, t, a);\n      case \"evaluation\":\n        return tidy(function () {\n          return executeOp$6(e, t, a);\n        });\n      case \"image\":\n        return tidy(function () {\n          return executeOp$8(e, t, a);\n        });\n      case \"graph\":\n        return tidy(function () {\n          return executeOp$7(e, t, a);\n        });\n      case \"logical\":\n        return tidy(function () {\n          return executeOp$9(e, t, a);\n        });\n      case \"matrices\":\n        return tidy(function () {\n          return executeOp$10(e, t, a);\n        });\n      case \"normalization\":\n        return tidy(function () {\n          return executeOp$11(e, t, a);\n        });\n      case \"reduction\":\n        return tidy(function () {\n          return executeOp$12(e, t, a);\n        });\n      case \"slice_join\":\n        return tidy(function () {\n          return executeOp$13(e, t, a);\n        });\n      case \"spectral\":\n        return tidy(function () {\n          return executeOp$14(e, t, a);\n        });\n      case \"transformation\":\n        return tidy(function () {\n          return executeOp$15(e, t, a);\n        });\n      case \"custom\":\n        var r = getRegisteredOp(e.op);\n        if (r && r.customExecutor) return r.customExecutor(new NodeValueImpl(e, t, a));\n        throw TypeError(\"Custom op \" + e.op + \" is not registered.\");\n      default:\n        throw TypeError(\"Unknown op '\" + e.op + \"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\");\n    }\n  }(e, t, a);\n  return r instanceof Promise ? r.then(function (e) {\n    return [].concat(e);\n  }) : [].concat(r);\n}\nvar ExecutionContext = function () {\n  function e(e, t) {\n    this.weightMap = e, this.tensorArrayMap = t, this.rootContext = {\n      id: 0,\n      frameName: \"\",\n      iterationId: 0\n    }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();\n  }\n  return e.prototype.newFrame = function (e, t) {\n    return {\n      id: e,\n      frameName: t,\n      iterationId: 0\n    };\n  }, Object.defineProperty(e.prototype, \"currentContext\", {\n    get: function get() {\n      return this.contexts;\n    },\n    set: function set(e) {\n      this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"currentContextId\", {\n    get: function get() {\n      return this._currentContextIds[0];\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"currentContextIds\", {\n    get: function get() {\n      return this._currentContextIds;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.prototype.generateCurrentContextIds = function () {\n    for (var e = [], t = 0; t < this.contexts.length - 1; t++) {\n      var a = this.contexts.slice(0, this.contexts.length - t);\n      e.push(this.contextIdforContexts(a));\n    }\n    e.push(\"\"), this._currentContextIds = e;\n  }, e.prototype.contextIdforContexts = function (e) {\n    return e ? e.map(function (e) {\n      return 0 === e.id && 0 === e.iterationId ? \"\" : e.frameName + \"-\" + e.iterationId;\n    }).join(\"/\") : \"\";\n  }, e.prototype.enterFrame = function (e) {\n    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));\n  }, e.prototype.exitFrame = function () {\n    if (!(this.contexts && this.contexts.length > 1)) throw new Error(\"Cannot exit frame, the context is empty\");\n    this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();\n  }, e.prototype.nextIteration = function () {\n    if (!(this.contexts && this.contexts.length > 0)) throw new Error(\"Cannot increase frame iteration, the context is empty\");\n    this.contexts = this.contexts.slice(), this.lastId++;\n    var e = Object.assign({}, this.contexts[this.contexts.length - 1]);\n    e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n  }, e.prototype.getWeight = function (e) {\n    return this.weightMap[e];\n  }, e.prototype.addTensorArray = function (e) {\n    this.tensorArrayMap[e.id] = e;\n  }, e.prototype.getTensorArray = function (e) {\n    return this.tensorArrayMap[e];\n  }, e;\n}();\nfunction getExecutionSubgraph(e, t, a) {\n  for (var r = new Set(), n = [], s = null, o = null, p = new Set(), u = Object.keys(e).map(function (e) {\n      return parseNodeName(e)[0];\n    }), i = t.slice(); i.length > 0;) {\n    var m = i.pop();\n    (isControlFlow(m) || isDynamicShape(m)) && null == s && (o = (s = m).children.map(function (e) {\n      return e.name;\n    }).filter(function (e) {\n      return r.has(e);\n    })), r.add(m.name), null == a[m.name] && -1 === u.indexOf(m.name) && (0 !== m.inputs.length ? m.inputs.forEach(function (e) {\n      p.has(e.name) || (p.add(e.name), i.push(e));\n    }) : n.push(m.name));\n  }\n  return {\n    inputs: e,\n    outputs: t,\n    usedNodes: r,\n    missingInputs: n,\n    dynamicNode: s,\n    syncInputs: o\n  };\n}\nfunction getNodesInTopologicalOrder(e, t, a) {\n  var r = a.usedNodes,\n    n = a.inputs,\n    s = [];\n  Object.keys(n).map(function (e) {\n    return parseNodeName(e)[0];\n  }).map(function (t) {\n    return e.nodes[t];\n  }).forEach(function (e) {\n    r.has(e.name) && s.push(e);\n  }), e.weights.forEach(function (e) {\n    r.has(e.name) && s.push(e);\n  });\n  for (var o = new Set(), p = []; s.length > 0;) {\n    var u = s.pop();\n    o.add(u.name), t[u.name] || p.push(u), u.children.forEach(function (e) {\n      !o.has(e.name) && r.has(e.name) && e.inputs.every(function (e) {\n        return o.has(e.name);\n      }) && s.push(e);\n    });\n  }\n  return p;\n}\nvar CONTROL_FLOW_OPS = [\"Switch\", \"Merge\", \"Enter\", \"Exit\", \"NextIteration\"],\n  DYNAMIC_SHAPE_OPS = [\"NonMaxSuppressionV2\", \"NonMaxSuppressionV3\", \"NonMaxSuppressionV5\", \"Where\"];\nfunction isControlFlow(e) {\n  return CONTROL_FLOW_OPS.indexOf(e.op) >= 0;\n}\nfunction isDynamicShape(e) {\n  return DYNAMIC_SHAPE_OPS.indexOf(e.op) >= 0;\n}\nvar GraphExecutor = function () {\n    function e(e) {\n      this.graph = e, this.compiledMap = new Map(), this._weightMap = {}, this.SEPERATOR = \",\", this._outputs = e.outputs, this._inputs = e.inputs, this._signature = e.signature;\n    }\n    return Object.defineProperty(e.prototype, \"weightMap\", {\n      get: function get() {\n        return this._weightMap;\n      },\n      set: function set(e) {\n        var t = Object.keys(e).map(function (t) {\n          return e[t].map(function (e) {\n            return e.id;\n          });\n        });\n        this.weightIds = [].concat.apply([], t), this._weightMap = e;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputs\", {\n      get: function get() {\n        return this._inputs.map(function (e) {\n          return {\n            name: e.name,\n            shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n            dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n          };\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputs\", {\n      get: function get() {\n        return this._outputs.map(function (e) {\n          return {\n            name: e.name,\n            shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n            dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n          };\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputNodes\", {\n      get: function get() {\n        return this._inputs.map(function (e) {\n          return e.signatureKey || e.name;\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputNodes\", {\n      get: function get() {\n        return this._outputs.map(function (e) {\n          return e.signatureKey || e.name;\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.getCompilationKey = function (e, t) {\n      var a = e.map(function (e) {\n          return e.name;\n        }).sort(),\n        r = t.map(function (e) {\n          return e.name;\n        }).sort();\n      return a.join(this.SEPERATOR) + \"--\" + r.join(this.SEPERATOR);\n    }, e.prototype.compile = function (e, t) {\n      var a = getExecutionSubgraph(e, t, this.weightMap),\n        r = a.missingInputs,\n        n = a.dynamicNode,\n        s = a.syncInputs;\n      if (null != n) throw new Error(\"This execution contains the node '\" + n.name + \"', which has the dynamic op '\" + n.op + \"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\" + s + \"]\");\n      if (r.length > 0) {\n        var o = t.map(function (e) {\n            return e.name;\n          }),\n          p = Object.keys(e);\n        throw new Error(\"Cannot compute the outputs [\" + o + \"] from the provided inputs [\" + p + \"]. Missing the following inputs: [\" + r + \"]\");\n      }\n      return getNodesInTopologicalOrder(this.graph, this.weightMap, a);\n    }, e.prototype.execute = function (e, t) {\n      var a = this;\n      e = this.mapInputs(e);\n      var r = Object.keys(e).sort();\n      this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);\n      var n = r.map(function (e) {\n          return a.graph.nodes[parseNodeName(e)[0]];\n        }),\n        s = t.map(function (e) {\n          return a.graph.nodes[parseNodeName(e)[0]];\n        }),\n        o = this.getCompilationKey(n, s),\n        p = this.compiledMap.get(o);\n      null == p && (p = this.compile(e, s), this.compiledMap.set(o, p));\n      var u = {};\n      return tidy(function () {\n        var r = new ExecutionContext(a._weightMap, u),\n          n = _assign({}, a.weightMap);\n        Object.keys(e).forEach(function (t) {\n          var a = parseNodeName(t),\n            r = a[0],\n            s = [];\n          s[a[1]] = e[t], n[r] = s;\n        });\n        for (var s = a.getFrozenTensorIds(n), o = {}, i = 0; i < p.length; i++) {\n          var m = p[i];\n          if (!n[m.name]) {\n            var l = executeOp$16(m, n, r);\n            if (l instanceof Promise) throw new Error(\"The execution of the op '\" + m.op + \"' returned a promise. Please use model.executeAsync() instead.\");\n            n[m.name] = l, a.checkTensorForDisposal(m.name, m, n, r, s, t, o);\n          }\n        }\n        return t.map(function (e) {\n          return getTensor(e, n, r);\n        });\n      });\n    }, e.prototype.getFrozenTensorIds = function (e) {\n      var t = [].concat.apply([], Object.keys(e).map(function (t) {\n        return e[t];\n      }).map(function (e) {\n        return e.map(function (e) {\n          return e.id;\n        });\n      }));\n      return new Set(t);\n    }, e.prototype.checkTensorForDisposal = function (e, t, a, r, n, s, o) {\n      \"control\" !== t.category && -1 === s.indexOf(e) && (a[e].forEach(function (e) {\n        null != e && (o[e.id] = (o[e.id] || 0) + t.children.length);\n      }), t.inputs.forEach(function (e) {\n        if (\"control\" !== e.category) {\n          var t = getTensorsForCurrentContenxt(e.name, a, r);\n          null != t && t.forEach(function (e) {\n            if (e && !n.has(e.id)) {\n              var t = o[e.id];\n              1 === t ? (e.dispose(), delete o[e.id]) : null != t && o[e.id]--;\n            }\n          });\n        }\n      }));\n    }, e.prototype.executeAsync = function (e, t) {\n      return __awaiter(this, void 0, void 0, function () {\n        var a,\n          r,\n          n,\n          s,\n          o,\n          p,\n          u = this;\n        return __generator(this, function (i) {\n          switch (i.label) {\n            case 0:\n              return e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t), a = {}, r = new ExecutionContext(this._weightMap, a), [4, this.executeWithControlFlow(e, r, t)];\n            case 1:\n              return n = i.sent(), s = t.map(function (e) {\n                return getTensor(e, n, r);\n              }), o = new Set(s.map(function (e) {\n                return e.id;\n              })), p = new Set(Object.keys(e).map(function (t) {\n                return e[t].id;\n              })), Object.keys(n).forEach(function (e) {\n                n[e].forEach(function (e) {\n                  !e || e.isDisposed || o.has(e.id) || p.has(e.id) || -1 !== u.weightIds.indexOf(e.id) || e.dispose();\n                });\n              }), [2, s];\n          }\n        });\n      });\n    }, e.prototype.executeWithControlFlow = function (e, t, a) {\n      return __awaiter(this, void 0, void 0, function () {\n        var r,\n          n,\n          s,\n          o,\n          p,\n          u,\n          i,\n          m,\n          l,\n          c,\n          d,\n          y,\n          f,\n          g,\n          h,\n          N,\n          x = this;\n        return __generator(this, function (V) {\n          switch (V.label) {\n            case 0:\n              r = Object.keys(e), n = r.map(function (e) {\n                return x.graph.nodes[parseNodeName(e)[0]];\n              }), s = a.map(function (e) {\n                return x.graph.nodes[parseNodeName(e)[0]];\n              }), o = getExecutionSubgraph(e, s, this.weightMap), p = o.usedNodes, u = o.missingInputs, i = o.dynamicNode, m = o.syncInputs, l = n.concat(this.graph.weights).map(function (e) {\n                return {\n                  node: e,\n                  contexts: t.currentContext\n                };\n              }), c = _assign({}, this.weightMap), Object.keys(e).forEach(function (t) {\n                var a = parseNodeName(t),\n                  r = a[0],\n                  n = [];\n                n[a[1]] = e[t], c[r] = n;\n              }), d = {}, y = this.getFrozenTensorIds(c), f = {}, V.label = 1;\n            case 1:\n              return l.length > 0 ? (g = this.processStack(n, l, t, c, f, y, a, d, p), [4, Promise.all(g)]) : [3, 3];\n            case 2:\n              return V.sent(), [3, 1];\n            case 3:\n              if (null == i && console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"), (h = s.filter(function (e) {\n                return !isControlFlow(e) && !getTensor(e.name, c, t);\n              }).map(function (e) {\n                return e.name;\n              })).length > 0) throw N = \"\", null != i && (N = \"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\" + m + \"]\"), new Error(\"Cannot compute the outputs [\" + h + \"] from the provided inputs [\" + r + \"]. Consider providing the following inputs: [\" + u + \"]. \" + N);\n              return [2, c];\n          }\n        });\n      });\n    }, e.prototype.processStack = function (e, t, a, r, n, s, o, p, u) {\n      for (var i = this, m = [], l = function l() {\n          var l = t.pop();\n          a.currentContext = l.contexts;\n          var d = \"\";\n          if (\"Enter\" === l.node.op && getParamValue(\"isConstant\", l.node, r, a) && (d = getNodeNameAndIndex(l.node.name, a)[0]), -1 === e.indexOf(l.node)) {\n            var y = executeOp$16(l.node, r, a);\n            d || (d = getNodeNameAndIndex(l.node.name, a)[0]);\n            var f = a.currentContext;\n            y instanceof Promise ? m.push(y.then(function (e) {\n              return r[d] = e, a.currentContext = f, i.checkTensorForDisposal(d, l.node, r, a, s, o, p), i.processChildNodes(l.node, t, a, r, n, u), e;\n            })) : (r[d] = y, c.checkTensorForDisposal(d, l.node, r, a, s, o, p), c.processChildNodes(l.node, t, a, r, n, u));\n          } else c.processChildNodes(l.node, t, a, r, n, u);\n        }, c = this; t.length > 0;) l();\n      return m;\n    }, e.prototype.processChildNodes = function (e, t, a, r, n, s) {\n      e.children.forEach(function (e) {\n        var o = getNodeNameAndIndex(e.name, a)[0];\n        !n[o] && s.has(e.name) && (\"Merge\" === e.op ? e.inputNames.some(function (e) {\n          return !!getTensor(e, r, a);\n        }) && (n[o] = !0, t.push({\n          contexts: a.currentContext,\n          node: e\n        })) : e.inputNames.every(function (e) {\n          return !!getTensor(e, r, a);\n        }) && (n[o] = !0, t.push({\n          contexts: a.currentContext,\n          node: e\n        })));\n      });\n    }, e.prototype.dispose = function () {\n      var e = this;\n      Object.keys(this.weightMap).forEach(function (t) {\n        return e.weightMap[t].forEach(function (e) {\n          return e.dispose();\n        });\n      });\n    }, e.prototype.checkInputShapeAndType = function (e) {\n      var t = this;\n      Object.keys(e).forEach(function (a) {\n        var r = e[a],\n          n = parseNodeName(a)[0],\n          s = t.graph.nodes[n];\n        if (s.attrParams.shape && s.attrParams.shape.value) {\n          var o = s.attrParams.shape.value,\n            p = o.length === r.shape.length && r.shape.every(function (e, t) {\n              return -1 === o[t] || o[t] === e;\n            });\n          util.assert(p, function () {\n            return \"The shape of dict['\" + s.name + \"'] provided in model.execute(dict) must be [\" + o + \"], but was [\" + r.shape + \"]\";\n          });\n        }\n        s.attrParams.dtype && s.attrParams.dtype.value && util.assert(r.dtype === s.attrParams.dtype.value, function () {\n          return \"The dtype of dict['\" + s.name + \"'] provided in model.execute(dict) must be \" + s.attrParams.dtype.value + \", but was \" + r.dtype;\n        });\n      });\n    }, e.prototype.mapInputs = function (e) {\n      var t = {};\n      for (var a in e) {\n        if (null != this._signature && null != this._signature.inputs && null != this._signature.inputs[a]) t[this._signature.inputs[a].name] = e[a];else t[a] = e[a];\n      }\n      return t;\n    }, e.prototype.checkInputs = function (e) {\n      var t = this,\n        a = Object.keys(e).filter(function (e) {\n          var a = parseNodeName(e)[0];\n          return null == t.graph.nodes[a];\n        });\n      if (a.length > 0) throw new Error(\"The dict provided in model.execute(dict) has keys: [\" + a + \"] that are not part of graph\");\n    }, e.prototype.mapOutputs = function (e) {\n      var t = this;\n      return e.map(function (e) {\n        return null != t._signature && null != t._signature.outputs && null != t._signature.outputs[e] ? t._signature.outputs[e].name : e;\n      }, {});\n    }, e.prototype.checkOutputs = function (e) {\n      var t = this;\n      e.forEach(function (e) {\n        var a = parseNodeName(e)[0];\n        if (!t.graph.nodes[a]) throw new Error(\"The output '\" + e + \"' is not found in the graph\");\n      });\n    }, e;\n  }(),\n  TFHUB_SEARCH_PARAM = \"?tfjs-format=file\",\n  DEFAULT_MODEL_NAME = \"model.json\",\n  GraphModel = function () {\n    function e(e, t) {\n      void 0 === t && (t = {}), this.modelUrl = e, this.loadOptions = t, this.version = \"n/a\", null == t && (this.loadOptions = {});\n    }\n    return Object.defineProperty(e.prototype, \"modelVersion\", {\n      get: function get() {\n        return this.version;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputNodes\", {\n      get: function get() {\n        return this.executor.inputNodes;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputNodes\", {\n      get: function get() {\n        return this.executor.outputNodes;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputs\", {\n      get: function get() {\n        return this.executor.inputs;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputs\", {\n      get: function get() {\n        return this.executor.outputs;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"weights\", {\n      get: function get() {\n        return this.executor.weightMap;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.findIOHandler = function () {\n      var e = this.modelUrl;\n      if (null != e.load) this.handler = e;else if (null != this.loadOptions.requestInit) this.handler = io.browserHTTPRequest(e, this.loadOptions);else {\n        var t = io.getLoadHandlers(e, this.loadOptions.onProgress);\n        if (0 === t.length) t.push(io.browserHTTPRequest(e, this.loadOptions));else if (t.length > 1) throw new Error(\"Found more than one (\" + t.length + \") load handlers for URL '\" + [e] + \"'\");\n        this.handler = t[0];\n      }\n    }, e.prototype.load = function () {\n      return __awaiter(this, void 0, void 0, function () {\n        var e, t, a, r;\n        return __generator(this, function (n) {\n          switch (n.label) {\n            case 0:\n              if (this.findIOHandler(), null == this.handler.load) throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");\n              return e = this, [4, this.handler.load()];\n            case 1:\n              return e.artifacts = n.sent(), t = this.artifacts.modelTopology, a = {}, null != this.artifacts.userDefinedMetadata && (a = this.artifacts.userDefinedMetadata.signature), this.version = t.versions.producer + \".\" + t.versions.minConsumer, r = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs), this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(t, a)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), [2, !0];\n          }\n        });\n      });\n    }, e.prototype.save = function (e, t) {\n      return __awaiter(this, void 0, void 0, function () {\n        var t;\n        return __generator(this, function (a) {\n          if (\"string\" == typeof e) {\n            if (0 === (t = io.getSaveHandlers(e)).length) throw new Error(\"Cannot find any save handlers for URL '\" + e + \"'\");\n            if (t.length > 1) throw new Error(\"Found more than one (\" + t.length + \") save handlers for URL '\" + e + \"'\");\n            e = t[0];\n          }\n          if (null == e.save) throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");\n          return [2, e.save(this.artifacts)];\n        });\n      });\n    }, e.prototype.predict = function (e, t) {\n      return this.execute(e, this.outputNodes);\n    }, e.prototype.normalizeInputs = function (e) {\n      if (!(e instanceof Tensor || Array.isArray(e))) return e;\n      if ((e = Array.isArray(e) ? e : [e]).length !== this.inputNodes.length) throw new Error(\"Input tensor count mismatch,the graph model has \" + this.inputNodes.length + \" placeholders, while there are \" + e.length + \" input tensors.\");\n      return this.inputNodes.reduce(function (t, a, r) {\n        return t[a] = e[r], t;\n      }, {});\n    }, e.prototype.normalizeOutputs = function (e) {\n      return e = e || this.outputNodes, Array.isArray(e) ? e : [e];\n    }, e.prototype.execute = function (e, t) {\n      e = this.normalizeInputs(e), t = this.normalizeOutputs(t);\n      var a = this.executor.execute(e, t);\n      return a.length > 1 ? a : a[0];\n    }, e.prototype.executeAsync = function (e, t) {\n      return __awaiter(this, void 0, void 0, function () {\n        var a;\n        return __generator(this, function (r) {\n          switch (r.label) {\n            case 0:\n              return e = this.normalizeInputs(e), t = this.normalizeOutputs(t), [4, this.executor.executeAsync(e, t)];\n            case 1:\n              return [2, (a = r.sent()).length > 1 ? a : a[0]];\n          }\n        });\n      });\n    }, e.prototype.convertTensorMapToTensorsMap = function (e) {\n      return Object.keys(e).reduce(function (t, a) {\n        return t[a] = [e[a]], t;\n      }, {});\n    }, e.prototype.dispose = function () {\n      this.executor.dispose();\n    }, e;\n  }();\nfunction loadGraphModel(e, t) {\n  return void 0 === t && (t = {}), __awaiter(this, void 0, void 0, function () {\n    var a;\n    return __generator(this, function (r) {\n      switch (r.label) {\n        case 0:\n          if (null == e) throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");\n          return null == t && (t = {}), t.fromTFHub && null == e.load && (e.endsWith(\"/\") || (e += \"/\"), e = \"\" + e + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM), [4, (a = new GraphModel(e, t)).load()];\n        case 1:\n          return r.sent(), [2, a];\n      }\n    });\n  });\n}\nvar version = \"1.7.4\";\nexport { GraphModel, loadGraphModel, deregisterOp, registerOp, version as version_converter };","map":{"version":3,"mappings":"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","names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","registerOp","name","opFunc","opMapper","tfOpName","category","inputs","attrs","customExecutor","getRegisteredOp","deregisterOp","getParamValue","paramName","node","tensorMap","context","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","data","Array","prototype","call","dataSync","attrParam","attrParams","value","tensorsMap","nodeName","index","contextId","currentContextIds","find","getNodeNameWithContextId","getTensorsForCurrentContenxt","currentContextId","getNodeNameAndIndex","inputName","parseNodeName","lastIndexOf","substring","Number","split","arr","size","res","i","length","push","json","tfName","notSupported","arithmetic","defaultValue","basicMath","control","convolution","creation","dynamic","evaluation","graph","image$1","logical","matrices","normalization","reduction","sliceJoin","spectral","tfDeprecatedName","transformation","OperationMapper","ops","image","mappersJson","concat","this","opMappers","reduce","mapper","Object","_instance","signature","placeholders","weights","nodes","_this","mapNode","op","startsWith","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","keys","forEach","key","children","signatureKey","entries","prev","curr","attr","newNode","input","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","Error","decodeBase64","text","global","env","atob","Buffer","toString","parseStringParam","s","keepCase","isArray","String","fromCharCode","apply","toLowerCase","def","b","f","parseInt","parseDtypeParam","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","shape","unknownRank","dim","getInput","getAttr","NodeValueImpl","tensor","executeOp","tfc.add","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.divNoNan","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","TypeError","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.complex","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.imag","tfc.neg","tfc.reciprocal","tfc.real","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.rsqrt","tfc.prod","tfc.leakyRelu","tfc.prelu","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","id","TensorArray","nextId","closed_","tensors","dispose","tensorWithState","cleared","read","indices","t","assertShapesMatchAllowUndefinedSize","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","indices_1","sizes","shapeA","shapeB","errorMessagePrefix","util","assert","shapesEqualAllowUndefinedSize","n1","n2","clone","pred","data_1","_b","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","scalar","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","sizeId","sizeTensorArray","closeId","clearAndClose","stride","pad","dataFormat","toUpperCase","dilation","tfc.conv1d","dilations","tfc.conv2d","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","biasArg","preluArg","tfc.fused","conv2d","depthwiseConv2d","x","filter","strides","bias","activation","preluActivationWeights","tfc.conv2dTranspose","tfc.depthwiseConv2d","tfc.conv3d","kernelSize","tfc.avgPool","tfc.maxPool","includeBatchInIndex","_c","tfc.avgPool3d","tfc.maxPool3d","tfc.fill","stop_1","num","tfc.linspace","logits","numSamples","seed","tfc.multinomial","depth","onValue","offValue","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","stop_2","step","tfc.range","mean","stdDev","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","tfc.image","nonMaxSuppressionWithScoreAsync","result","selectedIndices","selectedScores","nonMaxSuppressionAsync","condition","asType","tfc.whereAsync","tfc.setdiff1dAsync","k","sorted","tfc.topk","values","tfc.tensor1d","tfc.scalar","rank","message","summarize","console","warn","log","images","alignCorners","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","tfc.matMul","tfc.transpose","matMul","a","transposeA","transposeB","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","axis","keepDims","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","n","tfc.concat","tfc.gather","tfc.reverse","begin","tfc.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfc.stridedSlice","tfc.tidy","squeezedShape","squeeze","mapped","sameShape","tfc.util","arraysEqual","tfc.stack","tfc.unstack","reps","tfc.tile","numOrSizeSplits","tfc.split","tfc.scatterND","tfc.gatherND","sparseValues","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","blockShape","paddings","tfc.spaceToBatchND","crops","tfc.batchToSpaceND","blockSize","tfc.depthToSpace","control.executeOp","dynamic.executeOp","Promise","then","weightMap","tensorArrayMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","enumerable","configurable","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","frontier","pop","isControlFlow","isDynamicShape","has","add","indexOf","getNodesInTopologicalOrder","executionInfo","weight","orderedNodes","child","every","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","Map","_outputs","_inputs","_signature","GraphExecutor","_weightMap","weightIds","sortedInputs","sort","sortedOutputs","SEPERATOR","outNames","inNames","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","inputNodes","outputNodes","compilationKey","getCompilationKey","compiledMap","get","compile","set","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","count","executeWithControlFlow","_a","results","outputIds","inputIds","isDisposed","currentContext","added","promises","processStack","all","missingOutputs","alternativeMsg","item","currentContext_1","processChildNodes","this_1","childNode","some","shape_1","match","notInGraph","normalizedName","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","GraphModel","modelUrl","loadOptions","version","executor","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","onProgress","findIOHandler","artifacts","modelTopology","userDefinedMetadata","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","executeAsync","newMap","loadGraphModel","options","fromTFHub","endsWith","model"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\data\\compiled_api.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\custom_op\\register.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\utils.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\arithmetic.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\basic_math.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\control.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\convolution.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\creation.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\dynamic.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\evaluation.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\graph.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\image.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\logical.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\matrices.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\normalization.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\reduction.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\slice_join.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\spectral.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\transformation.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\operation_mapper.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\custom_op\\node_value_impl.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\arithmetic_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\basic_math_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\tensor_array.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\control_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\convolution_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\creation_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\dynamic_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\evaluation_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\graph_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\image_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\logical_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\matrices_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\normalization_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\reduction_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\slice_join_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\spectral_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\transformation_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\operation_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\execution_context.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\model_analysis.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\graph_executor.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\graph_model.ts","E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-converter\\src\\version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) {\n    return [name, 0];\n  }\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'DivNoNan': {\n      return [tfc.divNoNan(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    case 'Prelu':\n      return [tfc.prelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as tfc.Tensor)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  /**\n   * This differs from util.assertShapesMatch in that it allows values of\n   * negative one, an undefined size of a dimensinon, in a shape to match\n   * anything.\n   */\n  private assertShapesMatchAllowUndefinedSize(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.shapesEqualAllowUndefinedSize(shapeA, shapeB),\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [scalar(0)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Conv1D': {\n      const stride =\n          getParamValue('stride', node, tensorMap, context) as number;\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilation =\n          getParamValue('dilation', node, tensorMap, context) as number;\n      return [tfc.conv1d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n          stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n          dilation)];\n    }\n    case 'Conv2D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv2d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case '_FusedConv2D':\n    case 'FusedDepthwiseConv2dNative': {\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n      const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n              'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n              'one extra argument: bias.');\n        }\n      }\n      if (isBatchNorm) {\n        throw new Error(\n            'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n      }\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      const kernelMethod = node.op === '_FusedConv2D' ?\n          tfc.fused.conv2d :\n          tfc.fused.depthwiseConv2d;\n      return [kernelMethod({\n        x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n            tfc.Tensor4D,\n        filter: getParamValue('filter', node, tensorMap, context) as\n            tfc.Tensor4D,\n        strides: [stride[1], stride[2]],\n        pad: pad as 'valid' | 'same',\n        dataFormat: dataFormat as 'NHWC' | 'NCHW',\n        dilations: [dilations[1], dilations[2]],\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n    }\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose': {\n      const shape = getParamValue(\n                        'outputShape', node, tensorMap,\n                        context) as [number, number, number] |\n          [number, number, number, number];\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      return [tfc.conv2dTranspose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n    }\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n\n      return [tfc.depthwiseConv2d(\n          getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case 'Conv3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n              tfc.Tensor<tfc.Rank.R5>,\n          getParamValue('filter', node, tensorMap, context) as\n              tfc.Tensor<tfc.Rank.R5>,\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n          dataFormat as 'NDHWC' | 'NCDHW',\n          [dilations[1], dilations[2], dilations[3]])];\n    }\n    case 'AvgPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n    case 'MaxPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n    case 'MaxPoolWithArgmax': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n      const includeBatchInIndex =\n          getParamValue('includeBatchInIndex', node, tensorMap, context) as\n          boolean;\n      const {result, indexes} = tfc.maxPoolWithArgmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same', includeBatchInIndex);\n      return [result, indexes];\n    }\n    case 'AvgPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    case 'MaxPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n\n      if (node.op === 'NonMaxSuppressionV5') {\n        const softNmsSigma =\n            getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n        const result = await tfc.image.nonMaxSuppressionWithScoreAsync(\n            boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n            iouThreshold, scoreThreshold, softNmsSigma);\n\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      const condition =\n          (getParamValue('condition', node, tensorMap, context) as tfc.Tensor)\n              .asType('bool');\n      const result = [await tfc.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [tfc.scalar(1)];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                              tensorMap: NamedTensorsMap,\n                                              context: ExecutionContext):\n                                                 tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select':\n    case 'SelectV2': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused MatMul with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n        b: getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n        transposeA: getParamValue('transposeA', node, tensorMap, context) as\n            boolean,\n        transposeB: getParamValue('transposeB', node, tensorMap, context) as\n            boolean,\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const n = getParamValue('n', node, tensorMap, context) as number;\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      let inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      inputs = inputs.slice(0, n);\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, split} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map(node => node.signatureKey || node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._signature = graph.signature;\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    inputs = this.mapInputs(inputs);\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap =\n        await this.executeWithControlFlow(inputs, context, outputs);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers =\n          io.getLoadHandlers(path as string, this.loadOptions.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    this.artifacts = await this.handler.load();\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n    let signature = {};\n    if (this.artifacts.userDefinedMetadata != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    }\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.7.4';\nexport {version};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}