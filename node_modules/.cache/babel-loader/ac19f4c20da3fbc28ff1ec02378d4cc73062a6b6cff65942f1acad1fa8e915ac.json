{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedRange } from '@tensorflow/tfjs-core';\nimport { raggedRangeImpl } from './RaggedRange_impl';\nexport function raggedRange(args) {\n  var inputs = args.inputs,\n    backend = args.backend;\n  var starts = inputs.starts,\n    limits = inputs.limits,\n    deltas = inputs.deltas;\n  var $starts = backend.data.get(starts.dataId).values;\n  var $limits = backend.data.get(limits.dataId).values;\n  var $deltas = backend.data.get(deltas.dataId).values;\n  var _raggedRangeImpl = raggedRangeImpl($starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas, deltas.shape),\n    _raggedRangeImpl2 = _slicedToArray(_raggedRangeImpl, 2),\n    rtNestedSplitsData = _raggedRangeImpl2[0],\n    rtDenseValuesData = _raggedRangeImpl2[1];\n  var rtNestedSplits = backend.makeTensorInfo([rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  var rtDenseValues = backend.makeTensorInfo([rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n  return [rtNestedSplits, rtDenseValues];\n}\nexport var raggedRangeConfig = {\n  kernelName: RaggedRange,\n  backendName: 'cpu',\n  kernelFunc: raggedRange\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,WAAW,QAAkD,uBAAuB;AAItH,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAM,SAAUC,WAAW,CACvBC,IAA0D;EAE5D,IAAOC,MAAM,GAAaD,IAAI,CAAvBC,MAAM;IAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;EACtB,IAAOC,MAAM,GAAoBF,MAAM,CAAhCE,MAAM;IAAEC,MAAM,GAAYH,MAAM,CAAxBG,MAAM;IAAEC,MAAM,GAAIJ,MAAM,CAAhBI,MAAM;EAE7B,IAAMC,OAAO,GAAGJ,OAAO,CAACK,IAAI,CAACC,GAAG,CAACL,MAAM,CAACM,MAAM,CAAC,CAACC,MAAoB;EACpE,IAAMC,OAAO,GAAGT,OAAO,CAACK,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACK,MAAM,CAAC,CAACC,MAAoB;EACpE,IAAME,OAAO,GAAGV,OAAO,CAACK,IAAI,CAACC,GAAG,CAACH,MAAM,CAACI,MAAM,CAAC,CAACC,MAAoB;EAEpE,uBAAgDZ,eAAe,CAC3DQ,OAAO,EAAEH,MAAM,CAACU,KAAK,EAAEV,MAAM,CAACW,KAAK,EAAEH,OAAO,EAAEP,MAAM,CAACS,KAAK,EAAED,OAAO,EACnEP,MAAM,CAACQ,KAAK,CAAC;IAAA;IAFVE,kBAAkB;IAAEC,iBAAiB;EAI5C,IAAMC,cAAc,GAAGf,OAAO,CAACgB,cAAc,CACzC,CAACH,kBAAkB,CAACI,MAAM,CAAC,EAAE,OAAO,EAAEJ,kBAAkB,CAAC;EAC7D,IAAMK,aAAa,GAAGlB,OAAO,CAACgB,cAAc,CACxC,CAACF,iBAAiB,CAACG,MAAM,CAAC,EAAEhB,MAAM,CAACW,KAAK,EAAEE,iBAAiB,CAAC;EAEhE,OAAO,CAACC,cAAc,EAAEG,aAAa,CAAC;AACxC;AAEA,OAAO,IAAMC,iBAAiB,GAAiB;EAC7CC,UAAU,EAAEzB,WAAW;EACvB0B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEzB;CACb","names":["RaggedRange","raggedRangeImpl","raggedRange","args","inputs","backend","starts","limits","deltas","$starts","data","get","dataId","values","$limits","$deltas","shape","dtype","rtNestedSplitsData","rtDenseValuesData","rtNestedSplits","makeTensorInfo","length","rtDenseValues","raggedRangeConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\RaggedRange.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedRangeImpl} from './RaggedRange_impl';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.data.get(starts.dataId).values as TypedArray;\n  const $limits = backend.data.get(limits.dataId).values as TypedArray;\n  const $deltas = backend.data.get(deltas.dataId).values as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImpl(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'cpu',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}