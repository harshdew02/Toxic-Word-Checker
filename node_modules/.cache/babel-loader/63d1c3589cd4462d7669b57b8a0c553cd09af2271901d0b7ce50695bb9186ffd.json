{"ast":null,"code":"import _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\nexport var LruCache = /*#__PURE__*/function () {\n  function LruCache(maxEntries) {\n    _classCallCheck(this, LruCache);\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map();\n  }\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  _createClass(LruCache, [{\n    key: \"get\",\n    value: function get(key) {\n      var entry;\n      if (this.cache.has(key)) {\n        entry = this.cache.get(key);\n        this.cache.delete(key);\n        this.cache.set(key, entry);\n      }\n      return entry;\n    }\n    /**\n     * Put the entry into the cache. If the key already existed, mark the key as\n     * used recently.\n     */\n  }, {\n    key: \"put\",\n    value: function put(key, value) {\n      if (this.cache.has(key)) {\n        this.cache.delete(key);\n      } else if (this.cache.size >= this.maxEntries) {\n        var keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n      this.cache.set(key, value);\n    }\n    /**\n     * Get the MaxEntries of the cache.\n     */\n  }, {\n    key: \"getMaxEntries\",\n    value: function getMaxEntries() {\n      return this.maxEntries;\n    }\n    /**\n     * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n     * entries in the cache.\n     */\n  }, {\n    key: \"setMaxEntries\",\n    value: function setMaxEntries(maxEntries) {\n      if (maxEntries < 0) {\n        throw new Error(\"The maxEntries of LRU caches must be at least 0, but got \".concat(maxEntries, \".\"));\n      }\n      if (this.maxEntries > maxEntries) {\n        for (var i = 0; i < this.maxEntries - maxEntries; i++) {\n          var keyToDelete = this.cache.keys().next().value;\n          this.cache.delete(keyToDelete);\n        }\n      }\n      this.maxEntries = maxEntries;\n    }\n  }]);\n  return LruCache;\n}();","map":{"version":3,"mappings":";;AAAA;;;;;;;;;AASA;;;;;AAMA,WAAaA,QAAQ;EAInB,kBAAYC,UAAmB;IAAA;IAC7B,IAAI,CAACA,UAAU,GAAGA,UAAU,IAAI,GAAG;IACnC,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAAa;EACnC;EAEA;;;EAAA;IAAA;IAAA,OAGO,aAAIC,GAAW;MACpB,IAAIC,KAAQ;MACZ,IAAI,IAAI,CAACH,KAAK,CAACI,GAAG,CAACF,GAAG,CAAC,EAAE;QACvBC,KAAK,GAAG,IAAI,CAACH,KAAK,CAACK,GAAG,CAACH,GAAG,CAAC;QAC3B,IAAI,CAACF,KAAK,CAACM,MAAM,CAACJ,GAAG,CAAC;QACtB,IAAI,CAACF,KAAK,CAACO,GAAG,CAACL,GAAG,EAAEC,KAAK,CAAC;;MAE5B,OAAOA,KAAK;IACd;IAEA;;;;EAAA;IAAA;IAAA,OAIO,aAAID,GAAW,EAAEM,KAAQ;MAC9B,IAAI,IAAI,CAACR,KAAK,CAACI,GAAG,CAACF,GAAG,CAAC,EAAE;QACvB,IAAI,CAACF,KAAK,CAACM,MAAM,CAACJ,GAAG,CAAC;OACvB,MAAM,IAAI,IAAI,CAACF,KAAK,CAACS,IAAI,IAAI,IAAI,CAACV,UAAU,EAAE;QAC7C,IAAMW,WAAW,GAAG,IAAI,CAACV,KAAK,CAACW,IAAI,EAAE,CAACC,IAAI,EAAE,CAACJ,KAAK;QAClD,IAAI,CAACR,KAAK,CAACM,MAAM,CAACI,WAAW,CAAC;;MAEhC,IAAI,CAACV,KAAK,CAACO,GAAG,CAACL,GAAG,EAAEM,KAAK,CAAC;IAC5B;IAEA;;;EAAA;IAAA;IAAA,OAGO,yBAAa;MAClB,OAAO,IAAI,CAACT,UAAU;IACxB;IAEA;;;;EAAA;IAAA;IAAA,OAIO,uBAAcA,UAAkB;MACrC,IAAIA,UAAU,GAAG,CAAC,EAAE;QAClB,MAAM,IAAIc,KAAK,oEAEPd,UAAU,OAAI;;MAGxB,IAAI,IAAI,CAACA,UAAU,GAAGA,UAAU,EAAE;QAChC,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACf,UAAU,GAAGA,UAAU,EAAEe,CAAC,EAAE,EAAE;UACrD,IAAMJ,WAAW,GAAG,IAAI,CAACV,KAAK,CAACW,IAAI,EAAE,CAACC,IAAI,EAAE,CAACJ,KAAK;UAClD,IAAI,CAACR,KAAK,CAACM,MAAM,CAACI,WAAW,CAAC;;;MAIlC,IAAI,CAACX,UAAU,GAAGA,UAAU;IAC9B;EAAC;EAAA;AAAA","names":["LruCache","maxEntries","cache","Map","key","entry","has","get","delete","set","value","size","keyToDelete","keys","next","Error","i"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-layers\\src\\utils\\executor_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\n\nexport class LruCache<T> {\n  private cache: Map<string, T>;\n  private maxEntries: number;\n\n  constructor(maxEntries?: number) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map<string, T>();\n  }\n\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  public get(key: string): T {\n    let entry: T;\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n    return entry;\n  }\n\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n  public put(key: string, value: T): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n    this.cache.set(key, value);\n  }\n\n  /**\n   * Get the MaxEntries of the cache.\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries;\n  }\n\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n  public setMaxEntries(maxEntries: number): void {\n    if (maxEntries < 0) {\n      throw new Error(\n          `The maxEntries of LRU caches must be at least 0, but got ${\n              maxEntries}.`);\n    }\n\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n\n    this.maxEntries = maxEntries;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}