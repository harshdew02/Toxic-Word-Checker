{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function any(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var axis = attrs.axis,\n    keepDims = attrs.keepDims;\n  assertNotComplex(x, 'any');\n  var origAxes = util.parseAxisParam(axis, x.shape);\n  var axes = origAxes;\n  var permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  var $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  var _backend_util$compute = backend_util.computeOutAndReduceShapes($x.shape, axes),\n    _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n    outShape = _backend_util$compute2[0],\n    reduceShape = _backend_util$compute2[1];\n  var reduceSize = util.sizeFromShape(reduceShape);\n  var vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n  var aVals = backend.data.get($x.dataId).values;\n  for (var i = 0; i < vals.length; ++i) {\n    var offset = i * reduceSize;\n    var anyVal = aVals[offset];\n    for (var j = 0; j < reduceSize; ++j) {\n      var value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n  var result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n  if (keepDims) {\n    var expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    var reshapedResult = reshape({\n      inputs: {\n        x: result\n      },\n      backend: backend,\n      attrs: {\n        shape: expandedShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n  }\n  return result;\n}\nexport var anyConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any\n};","map":{"version":3,"mappings":"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","names":["Any","backend_util","util","assertNotComplex","reshape","transpose","any","args","inputs","backend","attrs","x","axis","keepDims","origAxes","parseAxisParam","shape","axes","permutedAxes","getAxesPermutation","length","$x","perm","getInnerMostAxes","assertAxesAreInnerMostDims","computeOutAndReduceShapes","outShape","reduceShape","reduceSize","sizeFromShape","vals","makeZerosTypedArray","dtype","aVals","data","get","dataId","values","i","offset","anyVal","j","value","disposeIntermediateTensorInfo","result","makeTensorInfo","expandedShape","expandShapeToKeepDim","reshapedResult","anyConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Any.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}