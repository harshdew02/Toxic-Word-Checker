{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var equation = attrs.equation;\n  var tensors = inputs;\n  var _backend_util$decodeE = backend_util.decodeEinsumEquation(equation, tensors.length),\n    allDims = _backend_util$decodeE.allDims,\n    summedDims = _backend_util$decodeE.summedDims,\n    idDims = _backend_util$decodeE.idDims;\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  var _backend_util$getEins = backend_util.getEinsumComputePath(summedDims, idDims),\n    path = _backend_util$getEins.path,\n    steps = _backend_util$getEins.steps;\n  var nSteps = steps.length;\n  var out = null;\n  var numDimsRemaining = allDims.length;\n  var tensorsToDispose = [];\n  for (var i = 0; i < nSteps; ++i) {\n    var _iterator = _createForOfIteratorHelper(steps[i]),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var idTerm = _step.value;\n        var _backend_util$getEins2 = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]),\n          perm = _backend_util$getEins2.permutationIndices,\n          dimsToExpand = _backend_util$getEins2.expandDims;\n        var x = void 0;\n        if (backend_util.isIdentityPermutation(perm)) {\n          x = tensors[idTerm];\n        } else {\n          x = transpose({\n            inputs: {\n              x: tensors[idTerm]\n            },\n            backend: backend,\n            attrs: {\n              perm: perm\n            }\n          });\n          tensorsToDispose.push(x);\n        }\n        var targetShape = x.shape.slice();\n        for (var k = 0; k < dimsToExpand.length; ++k) {\n          targetShape.splice(dimsToExpand[k], 0, 1);\n        }\n        if (!util.arraysEqual(x.shape, targetShape)) {\n          x = reshape({\n            inputs: {\n              x: x\n            },\n            backend: backend,\n            attrs: {\n              shape: targetShape\n            }\n          });\n          tensorsToDispose.push(x);\n        }\n        if (out === null) {\n          out = x;\n        } else {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          out = multiply({\n            inputs: {\n              a: x,\n              b: out\n            },\n            backend: backend\n          });\n          tensorsToDispose.push(out);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {\n            x: out\n          },\n          backend: backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n  // Clean up intermediate tensors.\n  for (var _i = 0, _tensorsToDispose = tensorsToDispose; _i < _tensorsToDispose.length; _i++) {\n    var tensorInfo = _tensorsToDispose[_i];\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n  return out;\n}\nexport var einsumConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum\n};","map":{"version":3,"mappings":"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","names":["backend_util","Einsum","util","multiply","reshape","sum","transpose","einsum","args","inputs","backend","attrs","equation","tensors","decodeEinsumEquation","length","allDims","summedDims","idDims","checkEinsumDimSizes","getEinsumComputePath","path","steps","nSteps","out","numDimsRemaining","tensorsToDispose","i","idTerm","getEinsumPermutation","perm","permutationIndices","dimsToExpand","expandDims","x","isIdentityPermutation","push","targetShape","shape","slice","k","splice","arraysEqual","a","b","axis","keepDims","tensorInfo","disposeIntermediateTensorInfo","einsumConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Einsum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}