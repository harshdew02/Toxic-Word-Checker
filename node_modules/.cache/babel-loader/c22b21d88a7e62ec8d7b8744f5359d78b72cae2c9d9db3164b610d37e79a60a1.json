{"ast":null,"code":"import _regeneratorRuntime from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction setdiff1dAsync_(_x, _x2) {\n  return _setdiff1dAsync_.apply(this, arguments);\n}\nfunction _setdiff1dAsync_() {\n  _setdiff1dAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(x, y) {\n    var $x, $y, xVals, yVals, ySet, outputSize, i, buffer, indices, _i, p;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          $x = convertToTensor(x, 'x', 'setdiff1d');\n          $y = convertToTensor(y, 'y', 'setdiff1d');\n          util.assert($x.dtype === $y.dtype, function () {\n            return \"x and y should have the same dtype, but got x (\".concat($x.dtype, \") and y (\").concat($y.dtype, \").\");\n          });\n          util.assert($x.rank === 1, function () {\n            return \"x should be 1D tensor, but got x (\".concat($x.shape, \").\");\n          });\n          util.assert($y.rank === 1, function () {\n            return \"y should be 1D tensor, but got y (\".concat($y.shape, \").\");\n          });\n          _context.next = 7;\n          return $x.data();\n        case 7:\n          xVals = _context.sent;\n          _context.next = 10;\n          return $y.data();\n        case 10:\n          yVals = _context.sent;\n          ySet = new Set(yVals);\n          outputSize = 0;\n          for (i = 0; i < xVals.length; i++) {\n            if (!ySet.has(xVals[i])) {\n              outputSize++;\n            }\n          }\n          buffer = new TensorBuffer([outputSize], $x.dtype);\n          indices = new TensorBuffer([outputSize], 'int32');\n          for (_i = 0, p = 0; _i < xVals.length; _i++) {\n            if (!ySet.has(xVals[_i])) {\n              buffer.values[p] = xVals[_i];\n              indices.values[p] = _i;\n              p++;\n            }\n          }\n          return _context.abrupt(\"return\", [buffer.toTensor(), indices.toTensor()]);\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _setdiff1dAsync_.apply(this, arguments);\n}\nexport var setdiff1dAsync = setdiff1dAsync_;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA,SAAgBA,YAAY,QAAO,WAAW;AAC9C,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SA6BeC,eAAe;EAAA;AAAA;AAAA;EAAA,8EAA9B,iBACIC,CAAoB,EAAEC,CAAoB;IAAA;IAAA;MAAA;QAAA;UACtCC,EAAE,GAAGL,eAAe,CAACG,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC;UACzCG,EAAE,GAAGN,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC;UAE/CH,IAAI,CAACM,MAAM,CACPF,EAAE,CAACG,KAAK,KAAKF,EAAE,CAACE,KAAK,EACrB;YAAA,gEACIH,EAAE,CAACG,KAAK,sBAAYF,EAAE,CAACE,KAAK;UAAA,CAAI,CAAC;UAEzCP,IAAI,CAACM,MAAM,CACPF,EAAE,CAACI,IAAI,KAAK,CAAC,EAAE;YAAA,mDAA2CJ,EAAE,CAACK,KAAK;UAAA,CAAI,CAAC;UAE3ET,IAAI,CAACM,MAAM,CACPD,EAAE,CAACG,IAAI,KAAK,CAAC,EAAE;YAAA,mDAA2CH,EAAE,CAACI,KAAK;UAAA,CAAI,CAAC;UAAC;UAAA,OAExDL,EAAE,CAACM,IAAI,EAAE;QAAA;UAAvBC,KAAK;UAAA;UAAA,OACSN,EAAE,CAACK,IAAI,EAAE;QAAA;UAAvBE,KAAK;UACLC,IAAI,GAAG,IAAIC,GAAG,CAACF,KAAK,CAAC;UAEvBG,UAAU,GAAG,CAAC;UAClB,KAASC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;YACrC,IAAI,CAACH,IAAI,CAACK,GAAG,CAACP,KAAK,CAACK,CAAC,CAAC,CAAC,EAAE;cACvBD,UAAU,EAAE;;;UAIVI,MAAM,GAAG,IAAIrB,YAAY,CAAC,CAACiB,UAAU,CAAC,EAAEX,EAAE,CAACG,KAAK,CAAC;UACjDa,OAAO,GAAG,IAAItB,YAAY,CAAC,CAACiB,UAAU,CAAC,EAAE,OAAO,CAAC;UACvD,KAASC,EAAC,GAAG,CAAC,EAAEK,CAAC,GAAG,CAAC,EAAEL,EAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,EAAC,EAAE,EAAE;YAC5C,IAAI,CAACH,IAAI,CAACK,GAAG,CAACP,KAAK,CAACK,EAAC,CAAC,CAAC,EAAE;cACvBG,MAAM,CAACG,MAAM,CAACD,CAAC,CAAC,GAAGV,KAAK,CAACK,EAAC,CAAC;cAC3BI,OAAO,CAACE,MAAM,CAACD,CAAC,CAAC,GAAGL,EAAC;cACrBK,CAAC,EAAE;;;UAEN,iCACM,CAACF,MAAM,CAACI,QAAQ,EAAE,EAAEH,OAAO,CAACG,QAAQ,EAAE,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAC/C;EAAA;AAAA;AACD,OAAO,IAAMC,cAAc,GAAGvB,eAAe","names":["TensorBuffer","convertToTensor","util","setdiff1dAsync_","x","y","$x","$y","assert","dtype","rank","shape","data","xVals","yVals","ySet","Set","outputSize","i","length","has","buffer","indices","p","values","toTensor","setdiff1dAsync"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\setdiff1d_async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, TensorBuffer} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nasync function setdiff1dAsync_(\n    x: Tensor|TensorLike, y: Tensor|TensorLike): Promise<[Tensor, Tensor]> {\n  const $x = convertToTensor(x, 'x', 'setdiff1d');\n  const $y = convertToTensor(y, 'y', 'setdiff1d');\n\n  util.assert(\n      $x.dtype === $y.dtype,\n      () => `x and y should have the same dtype, but got x (${\n          $x.dtype}) and y (${$y.dtype}).`);\n\n  util.assert(\n      $x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n\n  util.assert(\n      $y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n\n  const buffer = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], 'int32');\n  for (let i = 0, p = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer.values[p] = xVals[i];\n      indices.values[p] = i;\n      p++;\n    }\n  }\n  return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}