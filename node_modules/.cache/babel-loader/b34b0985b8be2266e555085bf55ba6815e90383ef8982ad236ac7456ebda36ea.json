{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { countParamsInWeights } from './variable_utils';\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(model, lineLength, positions) {\n  var printFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : console.log;\n  var sequentialLike = isModelSequentialLike(model);\n  // Header names for different log elements.\n  var toDisplay = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(function (p) {\n      return Math.floor(lineLength * p);\n    });\n  }\n  var relevantNodes;\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (var depth in model.nodesByDepth) {\n      var _relevantNodes;\n      (_relevantNodes = relevantNodes).push.apply(_relevantNodes, _toConsumableArray(model.nodesByDepth[depth]));\n    }\n  }\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n  var layers = model.layers;\n  for (var i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n  // tslint:disable-next-line:no-any\n  model.checkTrainableWeightsConsistency();\n  var trainableCount = countTrainableParams(model);\n  var nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n  printFn(\"Total params: \".concat(trainableCount + nonTrainableCount));\n  printFn(\"Trainable params: \".concat(trainableCount));\n  printFn(\"Non-trainable params: \".concat(nonTrainableCount));\n  printFn('_'.repeat(lineLength));\n}\nfunction countTrainableParams(model) {\n  var trainableCount;\n  // tslint:disable:no-any\n  if (model.collectedTrainableWeights != null) {\n    trainableCount = countParamsInWeights(model.collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\nfunction isModelSequentialLike(model) {\n  var sequentialLike = true;\n  var nodesByDepth = [];\n  var nodes = [];\n  for (var depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (var _i = 0, _nodesByDepth = nodesByDepth; _i < _nodesByDepth.length; _i++) {\n    var depthNodes = _nodesByDepth[_i];\n    if (depthNodes.length > 1 || depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push.apply(nodes, _toConsumableArray(depthNodes));\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    var _iterator = _createForOfIteratorHelper(model.layers),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var layer = _step.value;\n        var flag = false;\n        var _iterator2 = _createForOfIteratorHelper(layer.inboundNodes),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var node = _step2.value;\n            if (nodes.indexOf(node) !== -1) {\n              if (flag) {\n                sequentialLike = false;\n                break;\n              } else {\n                flag = true;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        if (!sequentialLike) {\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return sequentialLike;\n}\nfunction printRow(fields, positions) {\n  var printFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console.log;\n  var line = '';\n  for (var i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(layer, positions,\n// tslint:disable-next-line:no-any\nprintFn) {\n  var outputShape;\n  var inputShape;\n  try {\n    inputShape = layer.inboundNodes.map(function (x) {\n      return JSON.stringify(x.inputShapes);\n    }).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n  var name = layer.name;\n  var className = layer.getClassName();\n  var fields = [\"\".concat(name, \" (\").concat(className, \")\"), inputShape, outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(layer, positions, relevantNodes,\n// tslint:disable-next-line:no-any\nprintFn) {\n  var outputShape;\n  var inputShape;\n  try {\n    inputShape = layer.inboundNodes.map(function (x) {\n      return JSON.stringify(x.inputShapes);\n    }).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n  var connections = [];\n  var _iterator3 = _createForOfIteratorHelper(layer.inboundNodes),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var node = _step3.value;\n      if (relevantNodes != null && relevantNodes.length > 0 && relevantNodes.indexOf(node) === -1) {\n        continue;\n      }\n      for (var _i2 = 0; _i2 < node.inboundLayers.length; ++_i2) {\n        var inboundLayer = node.inboundLayers[_i2].name;\n        var inboundLayerIndex = node.nodeIndices[_i2];\n        var inboundTensorIndex = node.tensorIndices[_i2];\n        connections.push(\"\".concat(inboundLayer, \"[\").concat(inboundLayerIndex, \"][\").concat(inboundTensorIndex, \"]\"));\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var name = layer.name;\n  var className = layer.getClassName();\n  var firstConnection = connections.length === 0 ? '' : connections[0];\n  var fields = [\"\".concat(name, \" (\").concat(className, \")\"), inputShape, outputShape, layer.countParams().toString(), firstConnection];\n  printRow(fields, positions, printFn);\n  for (var i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}","map":{"version":3,"mappings":"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","names":["countParamsInWeights","printSummary","model","lineLength","positions","printFn","console","log","sequentialLike","isModelSequentialLike","toDisplay","length","map","Math","floor","p","relevantNodes","push","depth","nodesByDepth","repeat","printRow","layers","i","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","countTrainableParams","nonTrainableCount","nonTrainableWeights","collectedTrainableWeights","trainableWeights","nodes","depthNodes","inboundLayers","layer","flag","inboundNodes","node","indexOf","fields","line","slice","outputShape","inputShape","JSON","stringify","x","inputShapes","join","err","name","className","getClassName","countParams","toString","connections","inboundLayer","inboundLayerIndex","nodeIndices","inboundTensorIndex","tensorIndices","firstConnection"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-layers\\src\\utils\\layer_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {Container} from '../engine/container';\nimport {Layer, Node} from '../engine/topology';\nimport {countParamsInWeights} from './variable_utils';\n\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(\n    model: Container, lineLength?: number, positions?: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void =\n        console.log): void {\n  const sequentialLike = isModelSequentialLike(model);\n\n  // Header names for different log elements.\n  const toDisplay: string[] = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes: Node[];\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(\n          layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n\n  // tslint:disable-next-line:no-any\n  (model as any).checkTrainableWeightsConsistency();\n\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model: Container): number {\n  let trainableCount: number;\n  // tslint:disable:no-any\n  if ((model as any).collectedTrainableWeights != null) {\n    trainableCount =\n        countParamsInWeights((model as any).collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model: Container): boolean {\n  let sequentialLike = true;\n  const nodesByDepth: Node[][] = [];\n  const nodes: Node[] = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 ||\n        depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\n\nfunction printRow(\n    fields: string[], positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void = console.log) {\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(\n    layer: Layer, positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields: string[] =\n      [`${name} (${className})`, inputShape,\n      outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(\n    layer: Layer, positions: number[], relevantNodes: Node[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections: string[] = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 &&\n        relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(\n          `${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields: string[] = [\n    `${name} (${className})`, inputShape,\n    outputShape, layer.countParams().toString(),\n    firstConnection\n  ];\n\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}