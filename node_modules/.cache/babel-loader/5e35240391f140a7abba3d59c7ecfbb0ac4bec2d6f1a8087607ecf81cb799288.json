{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var MaxPool2DBackpropProgram = /*#__PURE__*/_createClass(function MaxPool2DBackpropProgram(convInfo) {\n  _classCallCheck(this, MaxPool2DBackpropProgram);\n  this.variableNames = ['dy', 'maxPos'];\n  this.outputShape = convInfo.inShape;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n  this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n          wR += \").concat(dilationHeight, \") {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \").concat(effectiveFilterWidth, \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \").concat(lastIndex, \" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \").concat(effectiveFilterWidth, \" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});\nexport var MaxPool3DBackpropProgram = /*#__PURE__*/_createClass(function MaxPool3DBackpropProgram(convInfo) {\n  _classCallCheck(this, MaxPool3DBackpropProgram);\n  this.variableNames = ['dy', 'maxPos'];\n  this.outputShape = convInfo.inShape;\n  var strideDepth = convInfo.strideDepth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationDepth = convInfo.dilationDepth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n  this.userCode = \"\\n      const ivec3 pads = ivec3(\".concat(padFront, \", \").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \").concat(effectiveFilterDepth, \";\\n           wD += \").concat(dilationDepth, \") {\\n          float dyD = float(dyDCorner + wD) / \").concat(strideDepth, \".0;\\n\\n          if (dyD < 0.0 || dyD >= \").concat(convInfo.outDepth, \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n              wR += \").concat(dilationHeight, \") {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \").concat(effectiveFilterWidth, \";\\n                wC += \").concat(dilationWidth, \") {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \").concat(lastIndex, \" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \").concat(effectiveFilterHeight, \" * \").concat(effectiveFilterWidth, \" +\\n                  wR * \").concat(effectiveFilterWidth, \" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAoBA,WAAaA,wBAAwB,6BAKnC,kCAAYC,QAAiC;EAAA;EAJ7C,kBAAa,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC;EAK9B,IAAI,CAACC,WAAW,GAAGD,QAAQ,CAACE,OAAO;EACnC,IAAMC,YAAY,GAAGH,QAAQ,CAACG,YAAY;EAC1C,IAAMC,WAAW,GAAGJ,QAAQ,CAACI,WAAW;EACxC,IAAMC,cAAc,GAAGL,QAAQ,CAACK,cAAc;EAC9C,IAAMC,qBAAqB,GAAGN,QAAQ,CAACM,qBAAqB;EAC5D,IAAMC,oBAAoB,GAAGP,QAAQ,CAACO,oBAAoB;EAE1D,IAAMC,MAAM,GAAGF,qBAAqB,GAAG,CAAC,GAAGN,QAAQ,CAACS,OAAO,CAACC,GAAG;EAC/D,IAAMC,OAAO,GAAGJ,oBAAoB,GAAG,CAAC,GAAGP,QAAQ,CAACS,OAAO,CAACG,IAAI;EAEhE,IAAMC,SAAS,GAAGP,qBAAqB,GAAGC,oBAAoB,GAAG,CAAC;EAClE,IAAI,CAACO,QAAQ,8CACgBN,MAAM,eAAKG,OAAO,2dAcnBL,qBAAqB,gCACnCD,cAAc,gEACgBF,YAAY,sDAExBH,QAAQ,CAACe,SAAS,8IAKpBR,oBAAoB,wEACJH,WAAW,wDAEvBJ,QAAQ,CAACgB,QAAQ,yNAOvBH,SAAS,oMAIJN,oBAAoB,kMAQpD;AACH,CAAC;AAGH,WAAaU,wBAAwB,6BAKnC,kCAAYjB,QAAiC;EAAA;EAJ7C,kBAAa,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC;EAK9B,IAAI,CAACC,WAAW,GAAGD,QAAQ,CAACE,OAAO;EACnC,IAAMgB,WAAW,GAAGlB,QAAQ,CAACkB,WAAW;EACxC,IAAMf,YAAY,GAAGH,QAAQ,CAACG,YAAY;EAC1C,IAAMC,WAAW,GAAGJ,QAAQ,CAACI,WAAW;EACxC,IAAMe,aAAa,GAAGnB,QAAQ,CAACmB,aAAa;EAC5C,IAAMd,cAAc,GAAGL,QAAQ,CAACK,cAAc;EAC9C,IAAMe,aAAa,GAAGpB,QAAQ,CAACoB,aAAa;EAC5C,IAAMC,oBAAoB,GAAGrB,QAAQ,CAACqB,oBAAoB;EAC1D,IAAMf,qBAAqB,GAAGN,QAAQ,CAACM,qBAAqB;EAC5D,IAAMC,oBAAoB,GAAGP,QAAQ,CAACO,oBAAoB;EAE1D,IAAMe,QAAQ,GAAGD,oBAAoB,GAAG,CAAC,GAAGrB,QAAQ,CAACS,OAAO,CAACc,KAAK;EAClE,IAAMf,MAAM,GAAGF,qBAAqB,GAAG,CAAC,GAAGN,QAAQ,CAACS,OAAO,CAACC,GAAG;EAC/D,IAAMC,OAAO,GAAGJ,oBAAoB,GAAG,CAAC,GAAGP,QAAQ,CAACS,OAAO,CAACG,IAAI;EAEhE,IAAMC,SAAS,GACXQ,oBAAoB,GAAGf,qBAAqB,GAAGC,oBAAoB,GAAG,CAAC;EAC3E,IAAI,CAACO,QAAQ,8CACgBQ,QAAQ,eAAKd,MAAM,eAAKG,OAAO,ijBAiBhCU,oBAAoB,iCACjCF,aAAa,gEACgBD,WAAW,sDAEvBlB,QAAQ,CAACwB,QAAQ,8IAKnBlB,qBAAqB,oCACjCD,cAAc,kEACcF,YAAY,wDAExBH,QAAQ,CAACe,SAAS,uKAMpBR,oBAAoB,sCAChCa,aAAa,oEACehB,WAAW,0DAEvBJ,QAAQ,CAACgB,QAAQ,gPAOvBH,SAAS,2PAMlBP,qBAAqB,gBAAMC,oBAAoB,wCAC/CA,oBAAoB,qNASxC;AACH,CAAC","names":["MaxPool2DBackpropProgram","convInfo","outputShape","inShape","strideHeight","strideWidth","dilationHeight","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","lastIndex","userCode","outHeight","outWidth","MaxPool3DBackpropProgram","strideDepth","dilationDepth","dilationWidth","effectiveFilterDepth","padFront","front","outDepth"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\max_pool_backprop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}