{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n  var _getParamValue = getParamValue('fusedOps', node, tensorMap, context),\n    _getParamValue2 = _slicedToArray(_getParamValue, 2),\n    extraOp = _getParamValue2[0],\n    activationFunc = _getParamValue2[1];\n  var isBiasAdd = extraOp === 'biasadd';\n  var noBiasAdd = !isBiasAdd;\n  var isPrelu = activationFunc === 'prelu';\n  var isBatchNorm = extraOp === 'fusedbatchnorm';\n  var numArgs = getParamValue('numArgs', node, tensorMap, context);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  var stride = getParamValue('strides', node, tensorMap, context);\n  var pad = getPadding(node, tensorMap, context);\n  var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n  var dilations = getParamValue('dilations', node, tensorMap, context);\n  var _getParamValue3 = getParamValue('args', node, tensorMap, context),\n    _getParamValue4 = _slicedToArray(_getParamValue3, 2),\n    biasArg = _getParamValue4[0],\n    preluArg = _getParamValue4[1];\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n  var leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n  return {\n    stride: stride,\n    pad: pad,\n    dataFormat: dataFormat,\n    dilations: dilations,\n    biasArg: biasArg,\n    preluArg: preluArg,\n    activationFunc: activationFunc,\n    leakyreluAlpha: leakyreluAlpha\n  };\n}\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  var ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'Conv1D':\n      {\n        var stride = getParamValue('stride', node, tensorMap, context);\n        var pad = getParamValue('pad', node, tensorMap, context);\n        var dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        var dilation = getParamValue('dilation', node, tensorMap, context);\n        return [ops.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n      }\n    case 'Conv2D':\n      {\n        var _stride = getParamValue('strides', node, tensorMap, context);\n        var _pad = getPadding(node, tensorMap, context);\n        var _dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        var dilations = getParamValue('dilations', node, tensorMap, context);\n        return [ops.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [_stride[1], _stride[2]], _pad, _dataFormat, [dilations[1], dilations[2]])];\n      }\n    case '_FusedConv2D':\n      {\n        var _fusedConvAndDepthWis = fusedConvAndDepthWiseParams(node, tensorMap, context),\n          _stride2 = _fusedConvAndDepthWis.stride,\n          _pad2 = _fusedConvAndDepthWis.pad,\n          _dataFormat2 = _fusedConvAndDepthWis.dataFormat,\n          _dilations = _fusedConvAndDepthWis.dilations,\n          biasArg = _fusedConvAndDepthWis.biasArg,\n          preluArg = _fusedConvAndDepthWis.preluArg,\n          activationFunc = _fusedConvAndDepthWis.activationFunc,\n          leakyreluAlpha = _fusedConvAndDepthWis.leakyreluAlpha;\n        return [ops.fused.conv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [_stride2[1], _stride2[2]],\n          pad: _pad2,\n          dataFormat: _dataFormat2,\n          dilations: [_dilations[1], _dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha: leakyreluAlpha\n        })];\n      }\n    case 'FusedDepthwiseConv2dNative':\n      {\n        var _fusedConvAndDepthWis2 = fusedConvAndDepthWiseParams(node, tensorMap, context),\n          _stride3 = _fusedConvAndDepthWis2.stride,\n          _pad3 = _fusedConvAndDepthWis2.pad,\n          _dataFormat3 = _fusedConvAndDepthWis2.dataFormat,\n          _dilations2 = _fusedConvAndDepthWis2.dilations,\n          _biasArg = _fusedConvAndDepthWis2.biasArg,\n          _preluArg = _fusedConvAndDepthWis2.preluArg,\n          _activationFunc = _fusedConvAndDepthWis2.activationFunc,\n          _leakyreluAlpha = _fusedConvAndDepthWis2.leakyreluAlpha;\n        return [ops.fused.depthwiseConv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [_stride3[1], _stride3[2]],\n          pad: _pad3,\n          dataFormat: _dataFormat3,\n          dilations: [_dilations2[1], _dilations2[2]],\n          bias: _biasArg,\n          activation: _activationFunc,\n          preluActivationWeights: _preluArg,\n          leakyreluAlpha: _leakyreluAlpha\n        })];\n      }\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose':\n      {\n        var shape = getParamValue('outputShape', node, tensorMap, context);\n        var _stride4 = getParamValue('strides', node, tensorMap, context);\n        var _pad4 = getPadding(node, tensorMap, context);\n        return [ops.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [_stride4[1], _stride4[2]], _pad4)];\n      }\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d':\n      {\n        var _stride5 = getParamValue('strides', node, tensorMap, context);\n        var _pad5 = getPadding(node, tensorMap, context);\n        var _dilations3 = getParamValue('dilations', node, tensorMap, context);\n        var _dataFormat4 = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [ops.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [_stride5[1], _stride5[2]], _pad5, _dataFormat4, [_dilations3[1], _dilations3[2]])];\n      }\n    case 'Conv3D':\n      {\n        var _stride6 = getParamValue('strides', node, tensorMap, context);\n        var _pad6 = getParamValue('pad', node, tensorMap, context);\n        var _dataFormat5 = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        var _dilations4 = getParamValue('dilations', node, tensorMap, context);\n        return [ops.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [_stride6[1], _stride6[2], _stride6[3]], _pad6, _dataFormat5, [_dilations4[1], _dilations4[2], _dilations4[3]])];\n      }\n    case 'AvgPool':\n      {\n        var _stride7 = getParamValue('strides', node, tensorMap, context);\n        var _pad7 = getParamValue('pad', node, tensorMap, context);\n        var kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [_stride7[1], _stride7[2]], _pad7)];\n      }\n    case 'MaxPool':\n      {\n        var _stride8 = getParamValue('strides', node, tensorMap, context);\n        var _pad8 = getParamValue('pad', node, tensorMap, context);\n        var _kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.maxPool(getParamValue('x', node, tensorMap, context), [_kernelSize[1], _kernelSize[2]], [_stride8[1], _stride8[2]], _pad8)];\n      }\n    case 'MaxPoolWithArgmax':\n      {\n        var _stride9 = getParamValue('strides', node, tensorMap, context);\n        var _pad9 = getParamValue('pad', node, tensorMap, context);\n        var _kernelSize2 = getParamValue('kernelSize', node, tensorMap, context);\n        var includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n        var _ops$maxPoolWithArgma = ops.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [_kernelSize2[1], _kernelSize2[2]], [_stride9[1], _stride9[2]], _pad9, includeBatchInIndex),\n          result = _ops$maxPoolWithArgma.result,\n          indexes = _ops$maxPoolWithArgma.indexes;\n        return [result, indexes];\n      }\n    case 'AvgPool3D':\n      {\n        var _stride10 = getParamValue('strides', node, tensorMap, context);\n        var _pad10 = getParamValue('pad', node, tensorMap, context);\n        var _kernelSize3 = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.avgPool3d(getParamValue('x', node, tensorMap, context), [_kernelSize3[1], _kernelSize3[2], _kernelSize3[3]], [_stride10[1], _stride10[2], _stride10[3]], _pad10)];\n      }\n    case 'MaxPool3D':\n      {\n        var _stride11 = getParamValue('strides', node, tensorMap, context);\n        var _pad11 = getParamValue('pad', node, tensorMap, context);\n        var _kernelSize4 = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.maxPool3d(getParamValue('x', node, tensorMap, context), [_kernelSize4[1], _kernelSize4[2], _kernelSize4[3]], [_stride11[1], _stride11[2], _stride11[3]], _pad11)];\n      }\n    case 'Dilation2D':\n      {\n        var strides = getParamValue('strides', node, tensorMap, context);\n        var _pad12 = getParamValue('pad', node, tensorMap, context);\n        var _dilations5 = getParamValue('dilations', node, tensorMap, context);\n        // strides: [1, stride_height, stride_width, 1].\n        var strideHeight = strides[1];\n        var strideWidth = strides[2];\n        // dilations: [1, dilation_height, dilation_width, 1].\n        var dilationHeight = _dilations5[1];\n        var dilationWidth = _dilations5[2];\n        return [ops.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], _pad12, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n      }\n\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'convolution';","map":{"version":3,"mappings":"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","names":["tfOps","getPadding","getParamValue","fusedConvAndDepthWiseParams","node","tensorMap","context","extraOp","activationFunc","isBiasAdd","noBiasAdd","isPrelu","isBatchNorm","numArgs","Error","stride","pad","dataFormat","toUpperCase","dilations","biasArg","preluArg","undefined","leakyreluAlpha","executeOp","ops","op","dilation","conv1d","conv2d","fused","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","shape","conv2dTranspose","conv3d","kernelSize","avgPool","maxPool","includeBatchInIndex","maxPoolWithArgmax","result","indexes","avgPool3d","maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","dilation2d","TypeError","CATEGORY"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\convolution_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  let [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [ops.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [ops.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [ops.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [ops.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [ops.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [ops.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [ops.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = ops.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [ops.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [ops.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}