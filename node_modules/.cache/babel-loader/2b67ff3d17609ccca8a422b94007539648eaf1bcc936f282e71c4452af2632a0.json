{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function mirrorPad(args) {\n  var inputs = args.inputs,\n    backend = args.backend,\n    attrs = args.attrs;\n  var x = inputs.x;\n  var paddings = attrs.paddings,\n    mode = attrs.mode;\n  assertNotComplex(x, 'mirrorPad');\n  var outShape = paddings.map(function (p, i) {\n    return p[0] /* beforePad */ + x.shape[i] + p[1];\n  } /* afterPad */);\n  var start = paddings.map(function (p) {\n    return p[0];\n  });\n  var end = paddings.map(function (p, i) {\n    return p[0] + x.shape[i];\n  });\n  var offset = mode === 'reflect' ? 0 : 1;\n  var xVals = backend.data.get(x.dataId).values;\n  var xRank = x.shape.length;\n  var xStrides = util.computeStrides(x.shape);\n  var resultSize = util.sizeFromShape(outShape);\n  var resultRank = outShape.length;\n  var resultStrides = util.computeStrides(outShape);\n  var resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n  for (var i = 0; i < resultSize; i++) {\n    var coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (var _i = 0; _i < resultRank; _i++) {\n      if (coords[_i] < start[_i]) {\n        coords[_i] = start[_i] * 2 - coords[_i] - offset;\n      } else if (coords[_i] >= end[_i]) {\n        coords[_i] = (end[_i] - 1) * 2 - coords[_i] + offset;\n      }\n    }\n    coords = coords.map(function (c, i) {\n      return c - start[i];\n    });\n    var inIndex = util.locToIndex(coords, xRank, xStrides);\n    resVals[i] = xVals[inIndex];\n  }\n  var outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport var mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,SAAS,EAA4EC,IAAI,QAAO,uBAAuB;AAGzJ,SAAQC,gBAAgB,QAAO,aAAa;AAE5C,OAAM,SAAUC,SAAS,CAACC,IAIzB;EACC,IAAOC,MAAM,GAAoBD,IAAI,CAA9BC,MAAM;IAAEC,OAAO,GAAWF,IAAI,CAAtBE,OAAO;IAAEC,KAAK,GAAIH,IAAI,CAAbG,KAAK;EAC7B,IAAOC,CAAC,GAAIH,MAAM,CAAXG,CAAC;EACR,IAAOC,QAAQ,GAAUF,KAAK,CAAvBE,QAAQ;IAAEC,IAAI,GAAIH,KAAK,CAAbG,IAAI;EAErBR,gBAAgB,CAACM,CAAC,EAAE,WAAW,CAAC;EAEhC,IAAMG,QAAQ,GAAGF,QAAQ,CAACG,GAAG,CACzB,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkBL,CAAC,CAACO,KAAK,CAACD,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC,eAAe;EAEtE,IAAMG,KAAK,GAAGP,QAAQ,CAACG,GAAG,CAAC,WAAC;IAAA,OAAIC,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC;EACrC,IAAMI,GAAG,GAAGR,QAAQ,CAACG,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,CAAC,CAAC,CAAC,GAAGL,CAAC,CAACO,KAAK,CAACD,CAAC,CAAC;EAAA,EAAC;EACrD,IAAMI,MAAM,GAAGR,IAAI,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;EAEzC,IAAMS,KAAK,GAAGb,OAAO,CAACc,IAAI,CAACC,GAAG,CAACb,CAAC,CAACc,MAAM,CAAC,CAACC,MAAoB;EAC7D,IAAMC,KAAK,GAAGhB,CAAC,CAACO,KAAK,CAACU,MAAM;EAC5B,IAAMC,QAAQ,GAAGzB,IAAI,CAAC0B,cAAc,CAACnB,CAAC,CAACO,KAAK,CAAC;EAE7C,IAAMa,UAAU,GAAG3B,IAAI,CAAC4B,aAAa,CAAClB,QAAQ,CAAC;EAC/C,IAAMmB,UAAU,GAAGnB,QAAQ,CAACc,MAAM;EAClC,IAAMM,aAAa,GAAG9B,IAAI,CAAC0B,cAAc,CAAChB,QAAQ,CAAC;EACnD,IAAMqB,OAAO,GACT/B,IAAI,CAACgC,sBAAsB,CAACzB,CAAC,CAAC0B,KAAwB,EAAEN,UAAU,CAAC;EAEvE,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,UAAU,EAAEd,CAAC,EAAE,EAAE;IACnC,IAAIqB,MAAM,GAAGlC,IAAI,CAACmC,UAAU,CAACtB,CAAC,EAAEgB,UAAU,EAAEC,aAAa,CAAC;IAC1D,KAAK,IAAIjB,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGgB,UAAU,EAAEhB,EAAC,EAAE,EAAE;MACnC,IAAIqB,MAAM,CAACrB,EAAC,CAAC,GAAGE,KAAK,CAACF,EAAC,CAAC,EAAE;QACxBqB,MAAM,CAACrB,EAAC,CAAC,GAAGE,KAAK,CAACF,EAAC,CAAC,GAAG,CAAC,GAAGqB,MAAM,CAACrB,EAAC,CAAC,GAAGI,MAAM;OAC9C,MAAM,IAAIiB,MAAM,CAACrB,EAAC,CAAC,IAAIG,GAAG,CAACH,EAAC,CAAC,EAAE;QAC9BqB,MAAM,CAACrB,EAAC,CAAC,GAAG,CAACG,GAAG,CAACH,EAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAGqB,MAAM,CAACrB,EAAC,CAAC,GAAGI,MAAM;;;IAGrDiB,MAAM,GAAGA,MAAM,CAACvB,GAAG,CAAC,UAACyB,CAAC,EAAEvB,CAAC;MAAA,OAAKuB,CAAC,GAAGrB,KAAK,CAACF,CAAC,CAAC;IAAA,EAAC;IAE3C,IAAMwB,OAAO,GAAGrC,IAAI,CAACsC,UAAU,CAACJ,MAAM,EAAEX,KAAK,EAAEE,QAAQ,CAAC;IAExDM,OAAO,CAAClB,CAAC,CAAC,GAAGK,KAAK,CAACmB,OAAO,CAAC;;EAG7B,IAAME,KAAK,GAAGlC,OAAO,CAACmC,KAAK,CAACT,OAAO,EAAErB,QAAQ,EAAEH,CAAC,CAAC0B,KAAK,CAAC;EAEvD,OAAO;IAACZ,MAAM,EAAEkB,KAAK;IAAEzB,KAAK,EAAEJ,QAAQ;IAAEuB,KAAK,EAAE1B,CAAC,CAAC0B;EAAK,CAAC;AACzD;AAEA,OAAO,IAAMQ,eAAe,GAAiB;EAC3CC,UAAU,EAAE3C,SAAS;EACrB4C,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAE1C;CACb","names":["MirrorPad","util","assertNotComplex","mirrorPad","args","inputs","backend","attrs","x","paddings","mode","outShape","map","p","i","shape","start","end","offset","xVals","data","get","dataId","values","xRank","length","xStrides","computeStrides","resultSize","sizeFromShape","resultRank","resultStrides","resVals","getTypedArrayFromDType","dtype","coords","indexToLoc","c","inIndex","locToIndex","outId","write","mirrorPadConfig","kernelName","backendName","kernelFunc"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\MirrorPad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as unknown as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}