{"ast":null,"code":"import _slicedToArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nimport * as log from './log';\nvar kernelRegistry = getGlobal('kernelRegistry', function () {\n  return new Map();\n});\nvar gradRegistry = getGlobal('gradRegistry', function () {\n  return new Map();\n});\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  var it = kernelRegistry.entries();\n  var result = [];\n  while (true) {\n    var _it$next = it.next(),\n      done = _it$next.done,\n      value = _it$next.value;\n    if (done) {\n      break;\n    }\n    var _value = _slicedToArray(value, 2),\n      key = _value[0],\n      config = _value[1];\n    var _key$split = key.split('_'),\n      _key$split2 = _slicedToArray(_key$split, 1),\n      backend = _key$split2[0];\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n  var kernelName = config.kernelName,\n    backendName = config.backendName;\n  var key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    log.warn(\"The kernel '\".concat(kernelName, \"' for backend \") + \"'\".concat(backendName, \"' is already registered\"));\n  }\n  kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n  var kernelName = config.kernelName;\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(\"Overriding the gradient for '\".concat(kernelName, \"'\"));\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\"The kernel '\".concat(kernelName, \"' for backend \") + \"'\".concat(backendName, \"' is not registered\"));\n  }\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\"The gradient '\".concat(kernelName, \"' for backend is not registered\"));\n  }\n  gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  var kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(function (kernelConfig) {\n    var newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\nfunction makeKey(kernelName, backendName) {\n  return \"\".concat(backendName, \"_\").concat(kernelName);\n}","map":{"version":3,"mappings":"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","names":["env","getGlobal","log","kernelRegistry","Map","gradRegistry","getKernel","kernelName","backendName","key","makeKey","get","getGradient","getKernelsForBackend","it","entries","result","next","done","value","config","split","backend","push","registerKernel","has","warn","set","registerGradient","getBool","unregisterKernel","Error","delete","unregisterGradient","copyRegisteredKernels","registeredBackendName","newBackendName","kernels","forEach","newKernelConfig","Object","assign","kernelConfig"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\kernel_registry.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from './environment';\nimport {getGlobal} from './global_util';\nimport * as log from './log';\nimport {NamedGradientMap} from './tape';\nimport {Tensor} from './tensor';\nimport {TensorInfo} from './tensor_info';\nimport {RecursiveArray} from './types';\n\nconst kernelRegistry =\n  getGlobal('kernelRegistry', () => new Map<`${string}_${string}`,\n    KernelConfig>());\nconst gradRegistry =\n  getGlobal('gradRegistry', () => new Map<string, GradConfig>());\n\ntype AttributeValue =\n  number | number[] | boolean | boolean[] | string | string[] | NamedAttrMap;\n\n/** These are extra non-tensor/primitive params passed to kernel functions. */\nexport type Attribute = AttributeValue | RecursiveArray<AttributeValue>;\n\n/** Specifies the code to run when executing a kernel. */\nexport type KernelFunc = (params: {\n  inputs: NamedTensorInfoMap,\n  backend: {},\n  attrs?: NamedAttrMap,\n}) => TensorInfo | TensorInfo[];\n\n/** The function to run when computing a gradient during backprop. */\nexport type GradFunc =\n  (dy: Tensor | Tensor[], saved: Tensor[], attrs: NamedAttrMap) =>\n    NamedGradientMap;\n\n/** Function that gets called after the backend initializes. */\nexport type KernelSetupFunc = (backend: {}) => void;\n/** Function that gets called right before the backend is disposed. */\nexport type KernelDisposeFunc = KernelSetupFunc;\n\n/** Config object for registering a kernel in the global registry. */\nexport interface KernelConfig {\n  kernelName: string;\n  backendName: string;\n  kernelFunc: KernelFunc;\n  setupFunc?: KernelSetupFunc;\n  disposeFunc?: KernelDisposeFunc;\n}\n\n/** Config object for registering a gradient in the global registry. */\nexport interface GradConfig {\n  kernelName: string;\n  inputsToSave?: string[];\n  // When saveAllInputs is true, all inputs will be saved. Only use this flag\n  // if inputs is an array of Tensors.\n  saveAllInputs?: boolean;\n  outputsToSave?: boolean[];\n  gradFunc: GradFunc;\n}\n\nexport interface NamedTensorInfoMap {\n  [name: string]: TensorInfo|undefined;\n}\n\nexport interface NamedAttrMap {\n  [name: string]: Attribute;\n}\n\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(\n    kernelName: string, backendName: string): KernelConfig {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName: string): GradConfig {\n  return gradRegistry.get(kernelName);\n}\n\nexport function getKernelsForBackend(backendName: string): KernelConfig[] {\n  const it = kernelRegistry.entries();\n  const result: KernelConfig[] = [];\n\n  while (true) {\n    const {done, value} = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend, ] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config: KernelConfig) {\n  const {kernelName, backendName} = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    log.warn(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config: GradConfig) {\n  const {kernelName} = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(\n    kernelName: string, backendName: string): void {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName: string): void {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\n        `The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(\n    registeredBackendName: string, newBackendName: string): void {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig =\n        Object.assign({}, kernelConfig, {backendName: newBackendName});\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName: string,\n                 backendName: string): `${string}_${string}` {\n  return `${backendName}_${kernelName}`;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}