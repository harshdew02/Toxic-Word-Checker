{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as ragged from './executors/ragged_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager) {\n  var tidy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tfc.tidy;\n  var value = function (node, tensorMap, context) {\n    switch (node.category) {\n      case 'arithmetic':\n        return tidy(function () {\n          return arithmetic.executeOp(node, tensorMap, context);\n        });\n      case 'basic_math':\n        return tidy(function () {\n          return basicMath.executeOp(node, tensorMap, context);\n        });\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n      case 'convolution':\n        return tidy(function () {\n          return convolution.executeOp(node, tensorMap, context);\n        });\n      case 'creation':\n        return tidy(function () {\n          return creation.executeOp(node, tensorMap, context);\n        });\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n      case 'evaluation':\n        return tidy(function () {\n          return evaluation.executeOp(node, tensorMap, context);\n        });\n      case 'image':\n        return tidy(function () {\n          return image.executeOp(node, tensorMap, context);\n        });\n      case 'graph':\n        return tidy(function () {\n          return graph.executeOp(node, tensorMap, context);\n        });\n      case 'logical':\n        return tidy(function () {\n          return logical.executeOp(node, tensorMap, context);\n        });\n      case 'matrices':\n        return tidy(function () {\n          return matrices.executeOp(node, tensorMap, context);\n        });\n      case 'normalization':\n        return tidy(function () {\n          return normalization.executeOp(node, tensorMap, context);\n        });\n      case 'ragged':\n        return tidy(function () {\n          return ragged.executeOp(node, tensorMap, context);\n        });\n      case 'reduction':\n        return tidy(function () {\n          return reduction.executeOp(node, tensorMap, context);\n        });\n      case 'slice_join':\n        return tidy(function () {\n          return sliceJoin.executeOp(node, tensorMap, context);\n        });\n      case 'sparse':\n        return tidy(function () {\n          return sparse.executeOp(node, tensorMap, context);\n        });\n      case 'spectral':\n        return tidy(function () {\n          return spectral.executeOp(node, tensorMap, context);\n        });\n      case 'string':\n        return tidy(function () {\n          return string.executeOp(node, tensorMap, context);\n        });\n      case 'transformation':\n        return tidy(function () {\n          return transformation.executeOp(node, tensorMap, context);\n        });\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n      case 'custom':\n        var opMapper = getRegisteredOp(node.op);\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(\"Custom op \".concat(node.op, \" is not registered.\"));\n        }\n      default:\n        throw TypeError(\"Unknown op '\".concat(node.op, \"'. File an issue at \") + \"https://github.com/tensorflow/tfjs/issues so we can add it\" + \", or register a custom execution with tf.registerOp()\");\n    }\n  }(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then(function (data) {\n      return [].concat(data);\n    });\n  }\n  return [].concat(value);\n}","map":{"version":3,"mappings":"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","names":["tfc","NodeValueImpl","getRegisteredOp","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","image","logical","matrices","normalization","ragged","reduction","sliceJoin","sparse","spectral","string","transformation","executeOp","node","tensorMap","context","resourceManager","tidy","value","category","opMapper","op","customExecutor","TypeError","util","isPromise","then","data","concat"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\operation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as ragged from './executors/ragged_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager, tidy = tfc.tidy): tfc.Tensor[]|\n    Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tidy(() => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tidy(() => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tidy(() => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'ragged':\n            return tidy(() => ragged.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tidy(() => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n          case 'sparse':\n            return tidy(() => sparse.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'string':\n            return tidy(() => string.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}