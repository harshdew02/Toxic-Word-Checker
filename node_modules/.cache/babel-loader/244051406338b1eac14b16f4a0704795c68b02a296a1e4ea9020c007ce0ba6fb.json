{"ast":null,"code":"import _createClass from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport var ReshapePackedProgram = /*#__PURE__*/_createClass(function ReshapePackedProgram(outputShape, inputShape) {\n  _classCallCheck(this, ReshapePackedProgram);\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.customUniforms = [{\n    name: 'inputShape',\n    type: 'ivec3'\n  }];\n  this.outputShape = outputShape;\n  this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n  var mainLoop = \"\";\n  for (var i = 0; i < 4; i++) {\n    var thisRC = \"thisRC = rc;\";\n    if (i % 2 === 1) {\n      thisRC += \"thisRC.z += 1;\";\n    }\n    if (i > 1) {\n      thisRC += \"thisRC.y += 1;\";\n    }\n    mainLoop += \"\\n        \".concat(thisRC, \"\\n        \").concat(i > 0 ? \"if(thisRC.y < rows && thisRC.z < cols){\" : '', \"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\").concat(i, \"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \").concat(i > 0 ? '}' : '', \"\\n      \");\n  }\n  this.userCode = \"\\n      \".concat(getReshapedInputCoords(inputShape, this.enableShapeUniforms), \"\\n      \").concat(this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \").concat(this.enableShapeUniforms ? 'outShape[1]' : outputShape[1], \";\\n        int cols = \").concat(this.enableShapeUniforms ? 'outShape[2]' : outputShape[2], \";\\n\\n        \").concat(mainLoop, \"\\n\\n        setOutput(result);\\n      }\\n    \");\n});\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n  var coordsFromIndexSnippet = enableShapeUniforms ? shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \".concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,gBAAgB,QAAO,cAAc;AAC3D,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AAErD,WAAaC,oBAAoB,6BAS/B,8BAAYC,WAAqC,EAAEC,UAElD;EAAA;EAVD,kBAAa,GAAG,CAAC,GAAG,CAAC;EACrB,iBAAY,GAAG,IAAI;EACnB,iBAAY,GAAG,IAAI;EAInB,mBAAc,GAAG,CAAC;IAACC,IAAI,EAAE,YAAY;IAAEC,IAAI,EAAE;EAAgB,CAAE,CAAC;EAK9D,IAAI,CAACH,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACI,mBAAmB,GAAGP,gBAAgB,CAAC,IAAI,CAACG,WAAW,CAACK,MAAM,CAAC;EAEpE,IAAIC,QAAQ,KAAK;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIC,MAAM,iBAAiB;IAC3B,IAAID,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;MACfC,MAAM,oBAAoB;;IAE5B,IAAID,CAAC,GAAG,CAAC,EAAE;MACTC,MAAM,oBAAoB;;IAG5BF,QAAQ,wBACJE,MAAM,uBACND,CAAC,GAAG,CAAC,+CAA+C,EAAE,yOAM7CA,CAAC,4GAEVA,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,aACnB;;EAGH,IAAI,CAACE,QAAQ,qBACTC,sBAAsB,CAACT,UAAU,EAAE,IAAI,CAACG,mBAAmB,CAAC,qBAE5D,IAAI,CAACA,mBAAmB,GAAGN,WAAW,CAACa,wBAAwB,EAAE,GACtCb,WAAW,CAACc,kBAAkB,CAACZ,WAAW,CAAC,4JAQzD,IAAI,CAACI,mBAAmB,GAAG,aAAa,GAAGJ,WAAW,CAAC,CAAC,CAAC,mCACzD,IAAI,CAACI,mBAAmB,GAAG,aAAa,GAAGJ,WAAW,CAAC,CAAC,CAAC,0BAEpEM,QAAQ,kDAIb;AACH,CAAC;AAGH,SAASI,sBAAsB,CAC3BG,KAA+B,EAAET,mBAA4B;EAC/D,IAAMU,sBAAsB,GAAGV,mBAAmB,GAC9CN,WAAW,CAACiB,2CAA2C,CACnD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,YAAY,CAAC,GAClCjB,WAAW,CAACkB,kCAAkC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAEH,KAAK,CAAC;EAE1E,kFAEMC,sBAAsB;AAI9B","names":["useShapeUniforms","shader_util","ReshapePackedProgram","outputShape","inputShape","name","type","enableShapeUniforms","length","mainLoop","i","thisRC","userCode","getReshapedInputCoords","getFlatIndexFrom3DOutput","getFlatIndexFrom3D","shape","coordsFromIndexSnippet","getLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\reshape_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}