{"ast":null,"code":"import _toConsumableArray from \"E:/react-detect-toxicity-in-a-chat-app-youtube-2/Toxic-Word-Checker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ReshapePackedProgram } from '../reshape_packed_gpu';\nimport { getBatchDim, getRowsCols } from '../webgl_util';\nexport function packedReshape(input, afterShape, backend) {\n  var input3DShape = [getBatchDim(input.shape)].concat(_toConsumableArray(getRowsCols(input.shape)));\n  var input3D = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  var afterShapeAs3D = [getBatchDim(afterShape)].concat(_toConsumableArray(getRowsCols(afterShape)));\n  var program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  var preventEagerUnpackingOfOutput = true;\n  var customValues = [input3DShape];\n  var output = backend.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n  return {\n    dataId: output.dataId,\n    shape: afterShape,\n    dtype: output.dtype\n  };\n}","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;AAoBA,SAAQA,oBAAoB,QAAO,uBAAuB;AAC1D,SAAQC,WAAW,EAAEC,WAAW,QAAO,eAAe;AAEtD,OAAM,SAAUC,aAAa,CACzBC,KAAiB,EAAEC,UAAoB,EACvCC,OAAyB;EAC3B,IAAMC,YAAY,IACbN,WAAW,CAACG,KAAK,CAACI,KAAK,CAAC,4BACrBN,WAAW,CAACE,KAAK,CAACI,KAAK,CAAC,EAA6B;EAC7D,IAAMC,OAAO,GAAe;IAC1BC,KAAK,EAAEN,KAAK,CAACM,KAAK;IAClBF,KAAK,EAAED,YAAY;IACnBI,MAAM,EAAEP,KAAK,CAACO;GACf;EACD,IAAMC,cAAc,IACfX,WAAW,CAACI,UAAU,CAAC,4BACpBH,WAAW,CAACG,UAAU,CAAC,EAA6B;EAE5D,IAAMQ,OAAO,GAAG,IAAIb,oBAAoB,CAACY,cAAc,EAAEL,YAAY,CAAC;EACtE,IAAMO,6BAA6B,GAAG,IAAI;EAC1C,IAAMC,YAAY,GAAG,CAACR,YAAY,CAAC;EACnC,IAAMS,MAAM,GAAGV,OAAO,CAACW,eAAe,CAClCJ,OAAO,EAAE,CAACJ,OAAO,CAAC,EAAEL,KAAK,CAACM,KAAK,EAAEK,YAAY,EAC7CD,6BAA6B,CAAC;EAClC,OAAO;IAACH,MAAM,EAAEK,MAAM,CAACL,MAAM;IAAEH,KAAK,EAAEH,UAAU;IAAEK,KAAK,EAAEM,MAAM,CAACN;EAAK,CAAC;AACxE","names":["ReshapePackedProgram","getBatchDim","getRowsCols","packedReshape","input","afterShape","backend","input3DShape","shape","input3D","dtype","dataId","afterShapeAs3D","program","preventEagerUnpackingOfOutput","customValues","output","runWebGLProgram"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernel_utils\\reshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}