{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FlipLeftRight } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Flips the image left to right. Currently available in the CPU, WebGL, and\n * WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction flipLeftRight_(image) {\n  var $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');\n  util.assert($image.rank === 4, function () {\n    return 'Error in flipLeftRight: image must be rank 4,' + \"but got rank \".concat($image.rank, \".\");\n  });\n  var inputs = {\n    image: $image\n  };\n  var res = ENGINE.runKernel(FlipLeftRight, inputs, {});\n  return res;\n}\nexport var flipLeftRight = /* @__PURE__ */op({\n  flipLeftRight_: flipLeftRight_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,cAAc;AACnC,SAAQC,aAAa,QAA4B,oBAAoB;AAGrE,SAAQC,eAAe,QAAO,uBAAuB;AAErD,OAAO,KAAKC,IAAI,MAAM,YAAY;AAClC,SAAQC,EAAE,QAAO,cAAc;AAE/B;;;;;;AAMA;AACA,SAASC,cAAc,CAACC,KAA0B;EAChD,IAAMC,MAAM,GAAGL,eAAe,CAACI,KAAK,EAAE,OAAO,EAAE,eAAe,EAAE,SAAS,CAAC;EAE1EH,IAAI,CAACK,MAAM,CACPD,MAAM,CAACE,IAAI,KAAK,CAAC,EACjB;IAAA,OAAM,+CAA+C,0BACjCF,MAAM,CAACE,IAAI,MAAG;EAAA,EAAC;EAEvC,IAAMC,MAAM,GAAwB;IAACJ,KAAK,EAAEC;EAAM,CAAC;EACnD,IAAMI,GAAG,GACLX,MAAM,CAACY,SAAS,CAACX,aAAa,EAAES,MAAmC,EAAE,EAAE,CAAC;EAC5E,OAAOC,GAAe;AACxB;AAEA,OAAO,IAAME,aAAa,GAAG,eAAgBT,EAAE,CAAC;EAACC,cAAc,EAAdA;AAAc,CAAC,CAAC","names":["ENGINE","FlipLeftRight","convertToTensor","util","op","flipLeftRight_","image","$image","assert","rank","inputs","res","runKernel","flipLeftRight"],"sources":["E:\\react-detect-toxicity-in-a-chat-app-youtube-2\\Toxic-Word-Checker\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\image\\flip_left_right.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {FlipLeftRight, FlipLeftRightInputs} from '../../kernel_names';\nimport {Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {op} from '../operation';\n\n/**\n * Flips the image left to right. Currently available in the CPU, WebGL, and\n * WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction flipLeftRight_(image: Tensor4D|TensorLike): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in flipLeftRight: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n\n  const inputs: FlipLeftRightInputs = {image: $image};\n  const res =\n      ENGINE.runKernel(FlipLeftRight, inputs as unknown as NamedTensorMap, {});\n  return res as Tensor4D;\n}\n\nexport const flipLeftRight = /* @__PURE__ */ op({flipLeftRight_});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}